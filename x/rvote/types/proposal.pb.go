// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rvote/proposal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ProposalStatus enumerates the valid statuses of a proposal.
type ProposalStatus int32

const (
	StatusInitiated ProposalStatus = 0
	StatusApproved  ProposalStatus = 1
	StatusRejected  ProposalStatus = 2
	StatusExpired   ProposalStatus = 3
)

var ProposalStatus_name = map[int32]string{
	0: "PROPOSAL_STATUS_INITIATED",
	1: "PROPOSAL_STATUS_APPROVED",
	2: "PROPOSAL_STATUS_REJECTED",
	3: "PROPOSAL_STATUS_EXPIRED",
}

var ProposalStatus_value = map[string]int32{
	"PROPOSAL_STATUS_INITIATED": 0,
	"PROPOSAL_STATUS_APPROVED":  1,
	"PROPOSAL_STATUS_REJECTED":  2,
	"PROPOSAL_STATUS_EXPIRED":   3,
}

func (x ProposalStatus) String() string {
	return proto.EnumName(ProposalStatus_name, int32(x))
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a18424b8936b52ae, []int{0}
}

type Proposal struct {
	Content      *types.Any     `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Status       ProposalStatus `protobuf:"varint,2,opt,name=status,proto3,enum=stafiprotocol.stafihub.rvote.ProposalStatus" json:"status,omitempty" yaml:"prop_status"`
	VotesFor     []string       `protobuf:"bytes,3,rep,name=votesFor,proto3" json:"votesFor,omitempty" yaml:"votes_for"`
	VotesAgainst []string       `protobuf:"bytes,4,rep,name=votesAgainst,proto3" json:"votesAgainst,omitempty" yaml:"votes_against"`
	StartBlock   int64          `protobuf:"varint,5,opt,name=startBlock,proto3" json:"startBlock,omitempty" yaml:"start_block"`
	ExpireBlock  int64          `protobuf:"varint,6,opt,name=expireBlock,proto3" json:"expireBlock,omitempty" yaml:"expire_block"`
}

func (m *Proposal) Reset()      { *m = Proposal{} }
func (*Proposal) ProtoMessage() {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18424b8936b52ae, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("stafiprotocol.stafihub.rvote.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterType((*Proposal)(nil), "stafiprotocol.stafihub.rvote.Proposal")
}

func init() { proto.RegisterFile("rvote/proposal.proto", fileDescriptor_a18424b8936b52ae) }

var fileDescriptor_a18424b8936b52ae = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x93, 0x6d, 0xed, 0xae, 0x53, 0xad, 0x75, 0xb6, 0xb8, 0xd9, 0x20, 0x69, 0xc8, 0xa9,
	0x88, 0x26, 0x4b, 0x05, 0xc1, 0xd5, 0x4b, 0xba, 0x8d, 0x50, 0x11, 0x1b, 0xa6, 0x5d, 0x11, 0x11,
	0x42, 0x9a, 0x4d, 0x63, 0xb4, 0xcd, 0x84, 0xcc, 0x74, 0xd9, 0xde, 0x3c, 0x4a, 0x0f, 0xe2, 0x0b,
	0x14, 0x04, 0x5f, 0xc1, 0x87, 0x58, 0x3c, 0xed, 0x71, 0x4f, 0xc5, 0x6d, 0x2f, 0x9e, 0xfb, 0x04,
	0x92, 0x99, 0x8d, 0xb4, 0x8b, 0xec, 0x6d, 0x86, 0xdf, 0xf7, 0x9b, 0x2f, 0x33, 0xfc, 0x03, 0x2a,
	0xc9, 0x31, 0xa6, 0xbe, 0x11, 0x27, 0x38, 0xc6, 0xc4, 0x1d, 0xe8, 0x71, 0x82, 0x29, 0x86, 0xf7,
	0x09, 0x75, 0xfb, 0x21, 0x5b, 0x7b, 0x78, 0xa0, 0xb3, 0xdd, 0x87, 0x51, 0x4f, 0x67, 0x61, 0xb9,
	0x12, 0xe0, 0x00, 0x33, 0x68, 0xa4, 0x2b, 0xee, 0xc8, 0xbb, 0x1e, 0x26, 0x43, 0x4c, 0x1c, 0x0e,
	0xf8, 0x26, 0x43, 0x01, 0xc6, 0xc1, 0x80, 0xb5, 0x50, 0xdc, 0x1b, 0xf5, 0x0d, 0x37, 0x1a, 0x73,
	0xa4, 0x7d, 0xcd, 0x81, 0x2d, 0xfb, 0xb2, 0x1c, 0x3e, 0x03, 0x9b, 0x1e, 0x8e, 0xa8, 0x1f, 0x51,
	0x49, 0x54, 0xc5, 0x5a, 0xb1, 0x5e, 0xd1, 0xb9, 0xa9, 0x67, 0xa6, 0x6e, 0x46, 0xe3, 0x46, 0xf1,
	0xd7, 0xcf, 0x47, 0x9b, 0x07, 0x3c, 0x88, 0x32, 0x03, 0xbe, 0x07, 0x05, 0x42, 0x5d, 0x3a, 0x22,
	0xd2, 0x86, 0x2a, 0xd6, 0x4a, 0xf5, 0x87, 0xfa, 0x75, 0x97, 0xd0, 0xb3, 0xd2, 0x0e, 0x73, 0x1a,
	0xf7, 0x96, 0xb3, 0x2a, 0x1c, 0xbb, 0xc3, 0xc1, 0xbe, 0x96, 0xbe, 0x85, 0xc3, 0x8f, 0xd2, 0xd0,
	0xe5, 0x99, 0x70, 0x0f, 0x6c, 0xa5, 0x1a, 0x79, 0x81, 0x13, 0x29, 0xa7, 0xe6, 0x6a, 0x37, 0x1b,
	0x95, 0xe5, 0xac, 0x5a, 0xe6, 0x06, 0x23, 0x4e, 0x1f, 0x27, 0x1a, 0xfa, 0x97, 0x82, 0xcf, 0xc1,
	0x2d, 0xb6, 0x36, 0x03, 0x37, 0x8c, 0x08, 0x95, 0xf2, 0xcc, 0x92, 0x96, 0xb3, 0x6a, 0x65, 0xd5,
	0x72, 0x39, 0xd6, 0xd0, 0x5a, 0x1a, 0x3e, 0x01, 0x80, 0x50, 0x37, 0xa1, 0x8d, 0x01, 0xf6, 0x3e,
	0x49, 0x37, 0x54, 0xb1, 0x96, 0x5b, 0xfd, 0x46, 0xc6, 0x9c, 0x5e, 0x0a, 0x35, 0xb4, 0x92, 0x84,
	0x4f, 0x41, 0xd1, 0x3f, 0x89, 0xc3, 0xc4, 0xe7, 0x62, 0x81, 0x89, 0x3b, 0xcb, 0x59, 0x75, 0x9b,
	0x8b, 0x1c, 0x66, 0xe6, 0x6a, 0x76, 0x3f, 0xff, 0xe7, 0x7b, 0x55, 0x7c, 0x30, 0x13, 0x41, 0x69,
	0xfd, 0x6d, 0x60, 0x1d, 0xec, 0xda, 0xa8, 0x6d, 0xb7, 0x3b, 0xe6, 0x2b, 0xa7, 0xd3, 0x35, 0xbb,
	0x87, 0x1d, 0xa7, 0xf5, 0xba, 0xd5, 0x6d, 0x99, 0x5d, 0xab, 0x59, 0x16, 0xe4, 0xed, 0xc9, 0x54,
	0xbd, 0xc3, 0xa3, 0xad, 0x28, 0xa4, 0xa1, 0x4b, 0xfd, 0x23, 0xb8, 0x07, 0xa4, 0xab, 0x8e, 0x69,
	0xdb, 0xa8, 0xfd, 0xc6, 0x6a, 0x96, 0x45, 0x19, 0x4e, 0xa6, 0x6a, 0x89, 0x2b, 0x66, 0x1c, 0x27,
	0xf8, 0xf8, 0xff, 0x06, 0xb2, 0x5e, 0x5a, 0x07, 0x69, 0xc9, 0xc6, 0xaa, 0x81, 0xfc, 0x8f, 0xbe,
	0x97, 0x76, 0xe8, 0x60, 0xe7, 0xaa, 0x61, 0xbd, 0xb5, 0x5b, 0xc8, 0x6a, 0x96, 0x73, 0xf2, 0xdd,
	0xc9, 0x54, 0xbd, 0xcd, 0x05, 0x8b, 0x5d, 0xf2, 0x48, 0xce, 0x7f, 0xf9, 0xa1, 0x08, 0x8d, 0xc3,
	0xd3, 0x0b, 0x45, 0x38, 0xbf, 0x50, 0x84, 0xcf, 0x73, 0x45, 0x38, 0x9d, 0x2b, 0xe2, 0xd9, 0x5c,
	0x11, 0x7f, 0xcf, 0x15, 0xf1, 0xdb, 0x42, 0x11, 0xce, 0x16, 0x8a, 0x70, 0xbe, 0x50, 0x84, 0x77,
	0x46, 0x10, 0xd2, 0x74, 0x58, 0x3c, 0x3c, 0x34, 0xd6, 0xe6, 0xc8, 0xc8, 0xe6, 0xc8, 0x38, 0x31,
	0xf8, 0xbf, 0x43, 0xc7, 0xb1, 0x4f, 0x7a, 0x05, 0x16, 0x78, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xee, 0x71, 0x3e, 0x4a, 0x51, 0x03, 0x00, 0x00,
}

func (this *Proposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proposal)
	if !ok {
		that2, ok := that.(Proposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.VotesFor) != len(that1.VotesFor) {
		return false
	}
	for i := range this.VotesFor {
		if this.VotesFor[i] != that1.VotesFor[i] {
			return false
		}
	}
	if len(this.VotesAgainst) != len(that1.VotesAgainst) {
		return false
	}
	for i := range this.VotesAgainst {
		if this.VotesAgainst[i] != that1.VotesAgainst[i] {
			return false
		}
	}
	if this.StartBlock != that1.StartBlock {
		return false
	}
	if this.ExpireBlock != that1.ExpireBlock {
		return false
	}
	return true
}
func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireBlock != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ExpireBlock))
		i--
		dAtA[i] = 0x30
	}
	if m.StartBlock != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.VotesAgainst) > 0 {
		for iNdEx := len(m.VotesAgainst) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotesAgainst[iNdEx])
			copy(dAtA[i:], m.VotesAgainst[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.VotesAgainst[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.VotesFor) > 0 {
		for iNdEx := len(m.VotesFor) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotesFor[iNdEx])
			copy(dAtA[i:], m.VotesFor[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.VotesFor[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProposal(uint64(m.Status))
	}
	if len(m.VotesFor) > 0 {
		for _, s := range m.VotesFor {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if len(m.VotesAgainst) > 0 {
		for _, s := range m.VotesAgainst {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if m.StartBlock != 0 {
		n += 1 + sovProposal(uint64(m.StartBlock))
	}
	if m.ExpireBlock != 0 {
		n += 1 + sovProposal(uint64(m.ExpireBlock))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotesFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotesFor = append(m.VotesFor, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotesAgainst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotesAgainst = append(m.VotesAgainst, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireBlock", wireType)
			}
			m.ExpireBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
