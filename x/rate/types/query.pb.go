// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rate/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetExchangeRateRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetExchangeRateRequest) Reset()         { *m = QueryGetExchangeRateRequest{} }
func (m *QueryGetExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExchangeRateRequest) ProtoMessage()    {}
func (*QueryGetExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{0}
}
func (m *QueryGetExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExchangeRateRequest.Merge(m, src)
}
func (m *QueryGetExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExchangeRateRequest proto.InternalMessageInfo

func (m *QueryGetExchangeRateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetExchangeRateResponse struct {
	ExchangeRate ExchangeRate `protobuf:"bytes,1,opt,name=exchangeRate,proto3" json:"exchangeRate"`
}

func (m *QueryGetExchangeRateResponse) Reset()         { *m = QueryGetExchangeRateResponse{} }
func (m *QueryGetExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExchangeRateResponse) ProtoMessage()    {}
func (*QueryGetExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{1}
}
func (m *QueryGetExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExchangeRateResponse.Merge(m, src)
}
func (m *QueryGetExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExchangeRateResponse proto.InternalMessageInfo

func (m *QueryGetExchangeRateResponse) GetExchangeRate() ExchangeRate {
	if m != nil {
		return m.ExchangeRate
	}
	return ExchangeRate{}
}

type QueryAllExchangeRateRequest struct {
}

func (m *QueryAllExchangeRateRequest) Reset()         { *m = QueryAllExchangeRateRequest{} }
func (m *QueryAllExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExchangeRateRequest) ProtoMessage()    {}
func (*QueryAllExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{2}
}
func (m *QueryAllExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExchangeRateRequest.Merge(m, src)
}
func (m *QueryAllExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExchangeRateRequest proto.InternalMessageInfo

type QueryAllExchangeRateResponse struct {
	ExchangeRate []ExchangeRate `protobuf:"bytes,1,rep,name=exchangeRate,proto3" json:"exchangeRate"`
}

func (m *QueryAllExchangeRateResponse) Reset()         { *m = QueryAllExchangeRateResponse{} }
func (m *QueryAllExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExchangeRateResponse) ProtoMessage()    {}
func (*QueryAllExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{3}
}
func (m *QueryAllExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExchangeRateResponse.Merge(m, src)
}
func (m *QueryAllExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExchangeRateResponse proto.InternalMessageInfo

func (m *QueryAllExchangeRateResponse) GetExchangeRate() []ExchangeRate {
	if m != nil {
		return m.ExchangeRate
	}
	return nil
}

type QueryGetEraExchangeRateRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraExchangeRateRequest) Reset()         { *m = QueryGetEraExchangeRateRequest{} }
func (m *QueryGetEraExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraExchangeRateRequest) ProtoMessage()    {}
func (*QueryGetEraExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{4}
}
func (m *QueryGetEraExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraExchangeRateRequest.Merge(m, src)
}
func (m *QueryGetEraExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraExchangeRateRequest proto.InternalMessageInfo

func (m *QueryGetEraExchangeRateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetEraExchangeRateRequest) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraExchangeRateResponse struct {
	EraExchangeRate EraExchangeRate `protobuf:"bytes,1,opt,name=eraExchangeRate,proto3" json:"eraExchangeRate"`
}

func (m *QueryGetEraExchangeRateResponse) Reset()         { *m = QueryGetEraExchangeRateResponse{} }
func (m *QueryGetEraExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraExchangeRateResponse) ProtoMessage()    {}
func (*QueryGetEraExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{5}
}
func (m *QueryGetEraExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraExchangeRateResponse.Merge(m, src)
}
func (m *QueryGetEraExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraExchangeRateResponse proto.InternalMessageInfo

func (m *QueryGetEraExchangeRateResponse) GetEraExchangeRate() EraExchangeRate {
	if m != nil {
		return m.EraExchangeRate
	}
	return EraExchangeRate{}
}

type QueryEraExchangeRateByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryEraExchangeRateByDenomRequest) Reset()         { *m = QueryEraExchangeRateByDenomRequest{} }
func (m *QueryEraExchangeRateByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEraExchangeRateByDenomRequest) ProtoMessage()    {}
func (*QueryEraExchangeRateByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{6}
}
func (m *QueryEraExchangeRateByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraExchangeRateByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraExchangeRateByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraExchangeRateByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraExchangeRateByDenomRequest.Merge(m, src)
}
func (m *QueryEraExchangeRateByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraExchangeRateByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraExchangeRateByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraExchangeRateByDenomRequest proto.InternalMessageInfo

func (m *QueryEraExchangeRateByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryEraExchangeRateByDenomResponse struct {
	EraExchangeRates []EraExchangeRate `protobuf:"bytes,1,rep,name=eraExchangeRates,proto3" json:"eraExchangeRates"`
}

func (m *QueryEraExchangeRateByDenomResponse) Reset()         { *m = QueryEraExchangeRateByDenomResponse{} }
func (m *QueryEraExchangeRateByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEraExchangeRateByDenomResponse) ProtoMessage()    {}
func (*QueryEraExchangeRateByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d2a6803f5955cc, []int{7}
}
func (m *QueryEraExchangeRateByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEraExchangeRateByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEraExchangeRateByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEraExchangeRateByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEraExchangeRateByDenomResponse.Merge(m, src)
}
func (m *QueryEraExchangeRateByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEraExchangeRateByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEraExchangeRateByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEraExchangeRateByDenomResponse proto.InternalMessageInfo

func (m *QueryEraExchangeRateByDenomResponse) GetEraExchangeRates() []EraExchangeRate {
	if m != nil {
		return m.EraExchangeRates
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetExchangeRateRequest)(nil), "stafiprotocol.stafihub.rate.QueryGetExchangeRateRequest")
	proto.RegisterType((*QueryGetExchangeRateResponse)(nil), "stafiprotocol.stafihub.rate.QueryGetExchangeRateResponse")
	proto.RegisterType((*QueryAllExchangeRateRequest)(nil), "stafiprotocol.stafihub.rate.QueryAllExchangeRateRequest")
	proto.RegisterType((*QueryAllExchangeRateResponse)(nil), "stafiprotocol.stafihub.rate.QueryAllExchangeRateResponse")
	proto.RegisterType((*QueryGetEraExchangeRateRequest)(nil), "stafiprotocol.stafihub.rate.QueryGetEraExchangeRateRequest")
	proto.RegisterType((*QueryGetEraExchangeRateResponse)(nil), "stafiprotocol.stafihub.rate.QueryGetEraExchangeRateResponse")
	proto.RegisterType((*QueryEraExchangeRateByDenomRequest)(nil), "stafiprotocol.stafihub.rate.QueryEraExchangeRateByDenomRequest")
	proto.RegisterType((*QueryEraExchangeRateByDenomResponse)(nil), "stafiprotocol.stafihub.rate.QueryEraExchangeRateByDenomResponse")
}

func init() { proto.RegisterFile("rate/query.proto", fileDescriptor_a4d2a6803f5955cc) }

var fileDescriptor_a4d2a6803f5955cc = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x5a, 0x5b, 0x70, 0xac, 0xec, 0x32, 0x14, 0x29, 0x69, 0x4d, 0x4b, 0xbc, 0xb4,
	0x2a, 0x19, 0xb6, 0x7b, 0xb1, 0x3f, 0x44, 0xbb, 0x2a, 0xf6, 0x6a, 0xbc, 0x89, 0x08, 0xb3, 0xeb,
	0x33, 0x0d, 0x64, 0x33, 0x69, 0x66, 0x56, 0xba, 0x94, 0x22, 0x08, 0xde, 0x05, 0xff, 0x1a, 0x3d,
	0x78, 0xee, 0x71, 0xc1, 0x8b, 0x27, 0x29, 0xbb, 0xfe, 0x21, 0x92, 0xc9, 0x6c, 0x49, 0xb6, 0xd9,
	0x18, 0xe3, 0x25, 0x4c, 0x66, 0xde, 0xfb, 0xbe, 0xef, 0xe7, 0xcd, 0x3c, 0xdc, 0x88, 0x98, 0x04,
	0x7a, 0xdc, 0x87, 0x68, 0x60, 0x87, 0x11, 0x97, 0x9c, 0xac, 0x0a, 0xc9, 0xde, 0x79, 0x6a, 0xdd,
	0xe5, 0xbe, 0xad, 0xfe, 0x8e, 0xfa, 0x1d, 0x3b, 0x0e, 0x34, 0xd6, 0x5c, 0xce, 0x5d, 0x1f, 0x28,
	0x0b, 0x3d, 0xca, 0x82, 0x80, 0x4b, 0x26, 0x3d, 0x1e, 0x88, 0x24, 0xd5, 0xb8, 0xdb, 0xe5, 0xa2,
	0xc7, 0x05, 0xed, 0x30, 0xa1, 0x35, 0xe9, 0xfb, 0x66, 0x07, 0x24, 0x6b, 0xd2, 0x90, 0xb9, 0x5e,
	0xa0, 0x82, 0x75, 0x6c, 0x5d, 0x15, 0x8e, 0x3f, 0x7a, 0x63, 0xd9, 0xe5, 0x2e, 0x57, 0x4b, 0x1a,
	0xaf, 0x92, 0x5d, 0xab, 0x85, 0x57, 0x5f, 0xc4, 0x42, 0xcf, 0x41, 0x3e, 0x3b, 0xe9, 0x1e, 0xb1,
	0xc0, 0x05, 0x87, 0x49, 0x70, 0xe0, 0xb8, 0x0f, 0x42, 0x92, 0x65, 0xbc, 0xf0, 0x16, 0x02, 0xde,
	0x5b, 0x41, 0x1b, 0x68, 0xf3, 0xba, 0x93, 0xfc, 0x58, 0x02, 0xaf, 0xe5, 0x27, 0x89, 0x90, 0x07,
	0x02, 0xc8, 0x4b, 0xbc, 0x04, 0xa9, 0x7d, 0x95, 0x7c, 0x63, 0x7b, 0xcb, 0x2e, 0x20, 0xb7, 0xd3,
	0x42, 0xed, 0x6b, 0xe7, 0xbf, 0xd6, 0x6b, 0x4e, 0x46, 0xc4, 0xba, 0xad, 0x9d, 0x1e, 0xf8, 0x7e,
	0x8e, 0xd3, 0x4b, 0x4f, 0x57, 0x8e, 0x67, 0x7a, 0x9a, 0xff, 0x7f, 0x4f, 0x87, 0xd8, 0xbc, 0x6c,
	0x44, 0xc4, 0x4a, 0x37, 0x90, 0x34, 0xf0, 0x3c, 0x44, 0x6c, 0x65, 0x6e, 0x03, 0x6d, 0xde, 0x74,
	0xe2, 0xa5, 0xf5, 0x01, 0xaf, 0xcf, 0x54, 0xd2, 0x04, 0xaf, 0x71, 0x1d, 0xb2, 0x47, 0xba, 0xb1,
	0xf7, 0x8b, 0x21, 0xb2, 0x39, 0x9a, 0x63, 0x5a, 0xca, 0xda, 0xc5, 0x96, 0x32, 0x30, 0x1d, 0x3e,
	0x78, 0x1a, 0x3b, 0x2e, 0x7e, 0x0f, 0x9f, 0x10, 0xbe, 0x53, 0x98, 0xac, 0x09, 0xde, 0xe0, 0xc6,
	0x54, 0x59, 0xa1, 0xef, 0xa1, 0x0a, 0xc2, 0x15, 0xad, 0xed, 0x6f, 0x8b, 0x78, 0x41, 0xf9, 0x20,
	0xdf, 0x11, 0x5e, 0x4a, 0x9f, 0x91, 0x07, 0x85, 0x05, 0x0a, 0x46, 0xc0, 0xd8, 0xa9, 0x90, 0x99,
	0xf0, 0x5a, 0x3b, 0x1f, 0x7f, 0xfc, 0xfe, 0x32, 0xd7, 0x22, 0x4d, 0x9a, 0x91, 0xa0, 0x13, 0x09,
	0x35, 0x9e, 0x34, 0xfd, 0xa2, 0xe8, 0xa9, 0xea, 0xe8, 0x19, 0xf9, 0x8a, 0x70, 0x3d, 0xad, 0x79,
	0xe0, 0xfb, 0x65, 0x18, 0xf2, 0x87, 0xa3, 0x0c, 0xc3, 0x8c, 0xb9, 0xb1, 0x9a, 0x8a, 0xe1, 0x1e,
	0xd9, 0x2a, 0xcd, 0x40, 0x86, 0xb1, 0xf7, 0xec, 0xdd, 0x90, 0xbd, 0x72, 0x5d, 0xcc, 0x1d, 0x22,
	0x63, 0xbf, 0x5a, 0xb2, 0x26, 0x68, 0x2b, 0x82, 0x7d, 0xb2, 0x5b, 0x4c, 0x90, 0xcd, 0x9e, 0x5c,
	0x04, 0x3d, 0x85, 0x88, 0x9d, 0x91, 0x0b, 0x84, 0x6f, 0xe5, 0x3f, 0x6e, 0xf2, 0xe8, 0xef, 0xe6,
	0x0a, 0x67, 0xca, 0x78, 0x5c, 0x5d, 0x40, 0x13, 0x3e, 0x51, 0x84, 0x0f, 0xc9, 0xde, 0xbf, 0x10,
	0x6a, 0x91, 0x09, 0x68, 0xfb, 0xf0, 0x7c, 0x64, 0xa2, 0xe1, 0xc8, 0x44, 0x17, 0x23, 0x13, 0x7d,
	0x1e, 0x9b, 0xb5, 0xe1, 0xd8, 0xac, 0xfd, 0x1c, 0x9b, 0xb5, 0x57, 0xb6, 0xeb, 0xc9, 0xd8, 0x4f,
	0x97, 0xf7, 0x66, 0x15, 0x38, 0x49, 0x4a, 0xc8, 0x41, 0x08, 0xa2, 0xb3, 0xa8, 0xce, 0x5b, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x38, 0x3b, 0x55, 0xfc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a exchangeRate by index.
	ExchangeRate(ctx context.Context, in *QueryGetExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetExchangeRateResponse, error)
	// Queries a list of exchangeRate items.
	ExchangeRateAll(ctx context.Context, in *QueryAllExchangeRateRequest, opts ...grpc.CallOption) (*QueryAllExchangeRateResponse, error)
	// Queries a eraExchangeRate by index.
	EraExchangeRate(ctx context.Context, in *QueryGetEraExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetEraExchangeRateResponse, error)
	// Queries a list of eraExchangeRateByDenom items.
	EraExchangeRateByDenom(ctx context.Context, in *QueryEraExchangeRateByDenomRequest, opts ...grpc.CallOption) (*QueryEraExchangeRateByDenomResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryGetExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetExchangeRateResponse, error) {
	out := new(QueryGetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/stafiprotocol.stafihub.rate.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRateAll(ctx context.Context, in *QueryAllExchangeRateRequest, opts ...grpc.CallOption) (*QueryAllExchangeRateResponse, error) {
	out := new(QueryAllExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/stafiprotocol.stafihub.rate.Query/ExchangeRateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraExchangeRate(ctx context.Context, in *QueryGetEraExchangeRateRequest, opts ...grpc.CallOption) (*QueryGetEraExchangeRateResponse, error) {
	out := new(QueryGetEraExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/stafiprotocol.stafihub.rate.Query/EraExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraExchangeRateByDenom(ctx context.Context, in *QueryEraExchangeRateByDenomRequest, opts ...grpc.CallOption) (*QueryEraExchangeRateByDenomResponse, error) {
	out := new(QueryEraExchangeRateByDenomResponse)
	err := c.cc.Invoke(ctx, "/stafiprotocol.stafihub.rate.Query/EraExchangeRateByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a exchangeRate by index.
	ExchangeRate(context.Context, *QueryGetExchangeRateRequest) (*QueryGetExchangeRateResponse, error)
	// Queries a list of exchangeRate items.
	ExchangeRateAll(context.Context, *QueryAllExchangeRateRequest) (*QueryAllExchangeRateResponse, error)
	// Queries a eraExchangeRate by index.
	EraExchangeRate(context.Context, *QueryGetEraExchangeRateRequest) (*QueryGetEraExchangeRateResponse, error)
	// Queries a list of eraExchangeRateByDenom items.
	EraExchangeRateByDenom(context.Context, *QueryEraExchangeRateByDenomRequest) (*QueryEraExchangeRateByDenomResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ExchangeRate(ctx context.Context, req *QueryGetExchangeRateRequest) (*QueryGetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) ExchangeRateAll(ctx context.Context, req *QueryAllExchangeRateRequest) (*QueryAllExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRateAll not implemented")
}
func (*UnimplementedQueryServer) EraExchangeRate(ctx context.Context, req *QueryGetEraExchangeRateRequest) (*QueryGetEraExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraExchangeRate not implemented")
}
func (*UnimplementedQueryServer) EraExchangeRateByDenom(ctx context.Context, req *QueryEraExchangeRateByDenomRequest) (*QueryEraExchangeRateByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraExchangeRateByDenom not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafiprotocol.stafihub.rate.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryGetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafiprotocol.stafihub.rate.Query/ExchangeRateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRateAll(ctx, req.(*QueryAllExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafiprotocol.stafihub.rate.Query/EraExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraExchangeRate(ctx, req.(*QueryGetEraExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraExchangeRateByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEraExchangeRateByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraExchangeRateByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafiprotocol.stafihub.rate.Query/EraExchangeRateByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraExchangeRateByDenom(ctx, req.(*QueryEraExchangeRateByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafiprotocol.stafihub.rate.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "ExchangeRateAll",
			Handler:    _Query_ExchangeRateAll_Handler,
		},
		{
			MethodName: "EraExchangeRate",
			Handler:    _Query_EraExchangeRate_Handler,
		},
		{
			MethodName: "EraExchangeRateByDenom",
			Handler:    _Query_EraExchangeRateByDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rate/query.proto",
}

func (m *QueryGetExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		for iNdEx := len(m.ExchangeRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEraExchangeRateByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraExchangeRateByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraExchangeRateByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEraExchangeRateByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEraExchangeRateByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEraExchangeRateByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EraExchangeRates) > 0 {
		for iNdEx := len(m.EraExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		for _, e := range m.ExchangeRate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetEraExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEraExchangeRateByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEraExchangeRateByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraExchangeRates) > 0 {
		for _, e := range m.EraExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = append(m.ExchangeRate, ExchangeRate{})
			if err := m.ExchangeRate[len(m.ExchangeRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraExchangeRateByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraExchangeRateByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraExchangeRateByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEraExchangeRateByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEraExchangeRateByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEraExchangeRateByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraExchangeRates = append(m.EraExchangeRates, EraExchangeRate{})
			if err := m.EraExchangeRates[len(m.EraExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
