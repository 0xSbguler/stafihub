// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rvalidator/rvalidator.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RValidatorStatus int32

const (
	Onboard    RValidatorStatus = 0
	Pickable   RValidatorStatus = 1
	Picked     RValidatorStatus = 2
	Unpickable RValidatorStatus = 3
	Offboard   RValidatorStatus = 4
)

var RValidatorStatus_name = map[int32]string{
	0: "RVALIDATOR_STATUS_ONBOARD",
	1: "RVALIDATOR_STATUS_PICKABLE",
	2: "RVALIDATOR_STATUS_PICKED",
	3: "RVALIDATOR_STATUS_UNPICKABLE",
	4: "RVALIDATOR_STATUS_OFFBOARD",
}

var RValidatorStatus_value = map[string]int32{
	"RVALIDATOR_STATUS_ONBOARD":    0,
	"RVALIDATOR_STATUS_PICKABLE":   1,
	"RVALIDATOR_STATUS_PICKED":     2,
	"RVALIDATOR_STATUS_UNPICKABLE": 3,
	"RVALIDATOR_STATUS_OFFBOARD":   4,
}

func (x RValidatorStatus) String() string {
	return proto.EnumName(RValidatorStatus_name, int32(x))
}

func (RValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{0}
}

type StatusProposal struct {
	Content  *StatusProposalContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Executed bool                   `protobuf:"varint,2,opt,name=executed,proto3" json:"executed,omitempty"`
	Voters   []string               `protobuf:"bytes,3,rep,name=voters,proto3" json:"voters,omitempty"`
}

func (m *StatusProposal) Reset()         { *m = StatusProposal{} }
func (m *StatusProposal) String() string { return proto.CompactTextString(m) }
func (*StatusProposal) ProtoMessage()    {}
func (*StatusProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{0}
}
func (m *StatusProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusProposal.Merge(m, src)
}
func (m *StatusProposal) XXX_Size() int {
	return m.Size()
}
func (m *StatusProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusProposal.DiscardUnknown(m)
}

var xxx_messageInfo_StatusProposal proto.InternalMessageInfo

func (m *StatusProposal) GetContent() *StatusProposalContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StatusProposal) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *StatusProposal) GetVoters() []string {
	if m != nil {
		return m.Voters
	}
	return nil
}

type StatusProposalContent struct {
	Denom        string           `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Addresses    []string         `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	SourceStatus RValidatorStatus `protobuf:"varint,3,opt,name=sourceStatus,proto3,enum=stafihub.stafihub.rvalidator.RValidatorStatus" json:"sourceStatus,omitempty"`
	DestStatus   RValidatorStatus `protobuf:"varint,4,opt,name=destStatus,proto3,enum=stafihub.stafihub.rvalidator.RValidatorStatus" json:"destStatus,omitempty"`
}

func (m *StatusProposalContent) Reset()         { *m = StatusProposalContent{} }
func (m *StatusProposalContent) String() string { return proto.CompactTextString(m) }
func (*StatusProposalContent) ProtoMessage()    {}
func (*StatusProposalContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{1}
}
func (m *StatusProposalContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusProposalContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusProposalContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusProposalContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusProposalContent.Merge(m, src)
}
func (m *StatusProposalContent) XXX_Size() int {
	return m.Size()
}
func (m *StatusProposalContent) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusProposalContent.DiscardUnknown(m)
}

var xxx_messageInfo_StatusProposalContent proto.InternalMessageInfo

func (m *StatusProposalContent) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *StatusProposalContent) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *StatusProposalContent) GetSourceStatus() RValidatorStatus {
	if m != nil {
		return m.SourceStatus
	}
	return Onboard
}

func (m *StatusProposalContent) GetDestStatus() RValidatorStatus {
	if m != nil {
		return m.DestStatus
	}
	return Onboard
}

type RValidator struct {
	Denom   string                                  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Address string                                  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status  RValidatorStatus                        `protobuf:"varint,3,opt,name=status,proto3,enum=stafihub.stafihub.rvalidator.RValidatorStatus" json:"status,omitempty"`
	Locked  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=locked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"locked"`
}

func (m *RValidator) Reset()         { *m = RValidator{} }
func (m *RValidator) String() string { return proto.CompactTextString(m) }
func (*RValidator) ProtoMessage()    {}
func (*RValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{2}
}
func (m *RValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RValidator.Merge(m, src)
}
func (m *RValidator) XXX_Size() int {
	return m.Size()
}
func (m *RValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_RValidator.DiscardUnknown(m)
}

var xxx_messageInfo_RValidator proto.InternalMessageInfo

func (m *RValidator) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RValidator) GetStatus() RValidatorStatus {
	if m != nil {
		return m.Status
	}
	return Onboard
}

type RValidatorIndicator struct {
	Denom      string                                  `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Commission github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,2,opt,name=commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission"`
	Uptime     uint32                                  `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Locked     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=locked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"locked"`
}

func (m *RValidatorIndicator) Reset()         { *m = RValidatorIndicator{} }
func (m *RValidatorIndicator) String() string { return proto.CompactTextString(m) }
func (*RValidatorIndicator) ProtoMessage()    {}
func (*RValidatorIndicator) Descriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{3}
}
func (m *RValidatorIndicator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RValidatorIndicator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RValidatorIndicator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RValidatorIndicator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RValidatorIndicator.Merge(m, src)
}
func (m *RValidatorIndicator) XXX_Size() int {
	return m.Size()
}
func (m *RValidatorIndicator) XXX_DiscardUnknown() {
	xxx_messageInfo_RValidatorIndicator.DiscardUnknown(m)
}

var xxx_messageInfo_RValidatorIndicator proto.InternalMessageInfo

func (m *RValidatorIndicator) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RValidatorIndicator) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

type RValidatorSet struct {
	Denom       string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Onboards    []string `protobuf:"bytes,2,rep,name=onboards,proto3" json:"onboards,omitempty"`
	Pickables   []string `protobuf:"bytes,3,rep,name=pickables,proto3" json:"pickables,omitempty"`
	Pickeds     []string `protobuf:"bytes,4,rep,name=pickeds,proto3" json:"pickeds,omitempty"`
	Unpickables []string `protobuf:"bytes,5,rep,name=unpickables,proto3" json:"unpickables,omitempty"`
	Offboards   []string `protobuf:"bytes,6,rep,name=offboards,proto3" json:"offboards,omitempty"`
}

func (m *RValidatorSet) Reset()         { *m = RValidatorSet{} }
func (m *RValidatorSet) String() string { return proto.CompactTextString(m) }
func (*RValidatorSet) ProtoMessage()    {}
func (*RValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_948146c7329589c9, []int{4}
}
func (m *RValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RValidatorSet.Merge(m, src)
}
func (m *RValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *RValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_RValidatorSet proto.InternalMessageInfo

func (m *RValidatorSet) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RValidatorSet) GetOnboards() []string {
	if m != nil {
		return m.Onboards
	}
	return nil
}

func (m *RValidatorSet) GetPickables() []string {
	if m != nil {
		return m.Pickables
	}
	return nil
}

func (m *RValidatorSet) GetPickeds() []string {
	if m != nil {
		return m.Pickeds
	}
	return nil
}

func (m *RValidatorSet) GetUnpickables() []string {
	if m != nil {
		return m.Unpickables
	}
	return nil
}

func (m *RValidatorSet) GetOffboards() []string {
	if m != nil {
		return m.Offboards
	}
	return nil
}

func init() {
	proto.RegisterEnum("stafihub.stafihub.rvalidator.RValidatorStatus", RValidatorStatus_name, RValidatorStatus_value)
	proto.RegisterType((*StatusProposal)(nil), "stafihub.stafihub.rvalidator.StatusProposal")
	proto.RegisterType((*StatusProposalContent)(nil), "stafihub.stafihub.rvalidator.StatusProposalContent")
	proto.RegisterType((*RValidator)(nil), "stafihub.stafihub.rvalidator.RValidator")
	proto.RegisterType((*RValidatorIndicator)(nil), "stafihub.stafihub.rvalidator.RValidatorIndicator")
	proto.RegisterType((*RValidatorSet)(nil), "stafihub.stafihub.rvalidator.RValidatorSet")
}

func init() { proto.RegisterFile("rvalidator/rvalidator.proto", fileDescriptor_948146c7329589c9) }

var fileDescriptor_948146c7329589c9 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xce, 0x36, 0x69, 0x3e, 0xa6, 0x1f, 0x8a, 0xf6, 0xed, 0x8b, 0x8c, 0xa9, 0x5c, 0x2b, 0x87,
	0x12, 0x55, 0xe0, 0xa0, 0xf6, 0x17, 0x24, 0x4d, 0x8b, 0x22, 0x4a, 0x12, 0x6d, 0x3f, 0x0e, 0x5c,
	0x2a, 0xc7, 0xde, 0x16, 0xab, 0x89, 0x37, 0xf2, 0x6e, 0xaa, 0xf2, 0x0f, 0x50, 0x4e, 0x48, 0x9c,
	0x73, 0xe2, 0xcf, 0xf4, 0x82, 0xd4, 0x1b, 0x08, 0xa1, 0x0a, 0xb5, 0xbf, 0x81, 0x1b, 0x07, 0x64,
	0x7b, 0xfd, 0x51, 0xda, 0x46, 0x08, 0x38, 0x65, 0x66, 0xf2, 0xcc, 0x33, 0xf3, 0x8c, 0x1e, 0x2f,
	0x3c, 0xf2, 0x4e, 0xcd, 0xbe, 0x63, 0x9b, 0x82, 0x79, 0xb5, 0x24, 0x34, 0x86, 0x1e, 0x13, 0x0c,
	0x2f, 0x73, 0x61, 0x1e, 0x39, 0xaf, 0x47, 0x3d, 0x23, 0x0e, 0x12, 0x8c, 0xba, 0x74, 0xcc, 0x8e,
	0x59, 0x00, 0xac, 0xf9, 0x51, 0xd8, 0x53, 0x79, 0x8f, 0x60, 0x71, 0x57, 0x98, 0x62, 0xc4, 0xbb,
	0x1e, 0x1b, 0x32, 0x6e, 0xf6, 0xf1, 0x4b, 0x28, 0x58, 0xcc, 0x15, 0xd4, 0x15, 0x0a, 0xd2, 0x51,
	0x75, 0x6e, 0x7d, 0xc3, 0x98, 0x46, 0x6c, 0xdc, 0x6c, 0xdf, 0x0c, 0x5b, 0x49, 0xc4, 0x81, 0x55,
	0x28, 0xd2, 0x33, 0x6a, 0x8d, 0x04, 0xb5, 0x95, 0x19, 0x1d, 0x55, 0x8b, 0x24, 0xce, 0xf1, 0x03,
	0xc8, 0x9f, 0x32, 0x41, 0x3d, 0xae, 0x64, 0xf5, 0x6c, 0xb5, 0x44, 0x64, 0x56, 0xf9, 0x8e, 0xe0,
	0xff, 0x3b, 0x69, 0xf1, 0x12, 0xcc, 0xda, 0xd4, 0x65, 0x83, 0x60, 0xb5, 0x12, 0x09, 0x13, 0x5c,
	0x81, 0x92, 0x69, 0xdb, 0x1e, 0xe5, 0x9c, 0x72, 0x65, 0xc6, 0xa7, 0x6a, 0xe4, 0xce, 0x2f, 0x57,
	0x32, 0x24, 0x29, 0x63, 0x02, 0xf3, 0x9c, 0x8d, 0x3c, 0x8b, 0x86, 0xc4, 0x4a, 0x56, 0x47, 0xd5,
	0xc5, 0x75, 0x63, 0xba, 0x36, 0x72, 0x10, 0x85, 0x61, 0x17, 0xb9, 0xc1, 0x81, 0xdb, 0x00, 0x36,
	0xe5, 0x42, 0x32, 0xe6, 0xfe, 0x88, 0x31, 0xc5, 0x50, 0xf9, 0x88, 0x00, 0x12, 0xc0, 0x3d, 0x62,
	0x15, 0x28, 0x48, 0x55, 0xc1, 0x3d, 0x4b, 0x24, 0x4a, 0xf1, 0x36, 0xe4, 0xf9, 0xdf, 0x88, 0x93,
	0xdd, 0xf8, 0x39, 0xe4, 0xfb, 0xcc, 0x3a, 0xa1, 0x76, 0x20, 0xa9, 0xd4, 0xa8, 0xf9, 0xb7, 0xfc,
	0x72, 0xb9, 0xf2, 0xf8, 0xd8, 0x11, 0x3e, 0x87, 0xc5, 0x06, 0x35, 0x8b, 0xf1, 0x01, 0xe3, 0xf2,
	0xe7, 0x29, 0xb7, 0x4f, 0x6a, 0xe2, 0xcd, 0x90, 0x72, 0x63, 0x93, 0x39, 0x2e, 0x91, 0xed, 0x95,
	0xaf, 0x08, 0xfe, 0x4b, 0xa6, 0xb4, 0x5c, 0xdb, 0xb1, 0xa6, 0x08, 0x6b, 0x03, 0x58, 0x6c, 0x30,
	0x70, 0x38, 0x77, 0x98, 0x1b, 0x6a, 0x6b, 0x18, 0x72, 0xf4, 0xea, 0x6f, 0x8c, 0x6e, 0x52, 0x8b,
	0xa4, 0x18, 0x7c, 0x77, 0x8d, 0x86, 0xc2, 0x19, 0xd0, 0xe0, 0x1c, 0x0b, 0x44, 0x66, 0xff, 0x4e,
	0xde, 0x27, 0x04, 0x0b, 0xa9, 0x23, 0xd2, 0xfb, 0xec, 0xa9, 0x43, 0x91, 0xb9, 0x3d, 0x66, 0x7a,
	0xf6, 0x4d, 0x77, 0xc6, 0x55, 0xdf, 0xc0, 0x43, 0xc7, 0x3a, 0x31, 0x7b, 0x7d, 0x2a, 0xbf, 0x85,
	0xc8, 0xc0, 0x71, 0x19, 0x6b, 0x50, 0xf0, 0x13, 0x6a, 0xfb, 0x4e, 0x4b, 0x10, 0x51, 0x11, 0xaf,
	0xc2, 0xdc, 0xc8, 0x4d, 0x58, 0x66, 0x53, 0x98, 0xf4, 0x1f, 0xfe, 0x2c, 0x76, 0x74, 0x24, 0xd7,
	0xc9, 0xa7, 0x67, 0xc5, 0xe5, 0xb5, 0x1f, 0x08, 0xca, 0xbf, 0xda, 0x03, 0xaf, 0xc1, 0x43, 0x72,
	0x50, 0xdf, 0x69, 0x35, 0xeb, 0x7b, 0x1d, 0x72, 0xb8, 0xbb, 0x57, 0xdf, 0xdb, 0xdf, 0x3d, 0xec,
	0xb4, 0x1b, 0x9d, 0x3a, 0x69, 0x96, 0x33, 0xea, 0xdc, 0x78, 0xa2, 0x17, 0x3a, 0xa1, 0x22, 0xfc,
	0x04, 0xd4, 0xdb, 0xd8, 0x6e, 0x6b, 0xf3, 0x45, 0xbd, 0xb1, 0xb3, 0x55, 0x46, 0xea, 0xfc, 0x78,
	0xa2, 0x17, 0xbb, 0x72, 0x27, 0x5c, 0x05, 0xe5, 0x6e, 0xf4, 0x56, 0xb3, 0x3c, 0xa3, 0xc2, 0x78,
	0xa2, 0xe7, 0xbb, 0x81, 0x4a, 0xfc, 0x0c, 0x96, 0x6f, 0x23, 0xf7, 0xdb, 0x31, 0x73, 0x56, 0x5d,
	0x1c, 0x4f, 0x74, 0xd8, 0x8f, 0xf5, 0xde, 0xbd, 0x49, 0x67, 0x7b, 0x3b, 0x5c, 0x3b, 0x17, 0x6e,
	0xd2, 0x91, 0xca, 0xd5, 0xdc, 0xdb, 0x0f, 0x5a, 0xa6, 0xd1, 0x3a, 0xbf, 0xd2, 0xd0, 0xc5, 0x95,
	0x86, 0xbe, 0x5d, 0x69, 0xe8, 0xdd, 0xb5, 0x96, 0xb9, 0xb8, 0xd6, 0x32, 0x9f, 0xaf, 0xb5, 0xcc,
	0xab, 0x5a, 0xca, 0x23, 0xd1, 0x37, 0x95, 0x04, 0x67, 0xa9, 0x47, 0x39, 0x34, 0x4c, 0x2f, 0x1f,
	0xbc, 0xb3, 0x1b, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x60, 0x0d, 0x4b, 0x27, 0xba, 0x05, 0x00,
	0x00,
}

func (m *StatusProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Voters[iNdEx])
			copy(dAtA[i:], m.Voters[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Voters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRvalidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusProposalContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusProposalContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusProposalContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestStatus != 0 {
		i = encodeVarintRvalidator(dAtA, i, uint64(m.DestStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceStatus != 0 {
		i = encodeVarintRvalidator(dAtA, i, uint64(m.SourceStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Locked.Size()
		i -= size
		if _, err := m.Locked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRvalidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Status != 0 {
		i = encodeVarintRvalidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RValidatorIndicator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RValidatorIndicator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RValidatorIndicator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Locked.Size()
		i -= size
		if _, err := m.Locked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRvalidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Uptime != 0 {
		i = encodeVarintRvalidator(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRvalidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offboards) > 0 {
		for iNdEx := len(m.Offboards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Offboards[iNdEx])
			copy(dAtA[i:], m.Offboards[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Offboards[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Unpickables) > 0 {
		for iNdEx := len(m.Unpickables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Unpickables[iNdEx])
			copy(dAtA[i:], m.Unpickables[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Unpickables[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Pickeds) > 0 {
		for iNdEx := len(m.Pickeds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pickeds[iNdEx])
			copy(dAtA[i:], m.Pickeds[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Pickeds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Pickables) > 0 {
		for iNdEx := len(m.Pickables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pickables[iNdEx])
			copy(dAtA[i:], m.Pickables[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Pickables[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Onboards) > 0 {
		for iNdEx := len(m.Onboards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Onboards[iNdEx])
			copy(dAtA[i:], m.Onboards[iNdEx])
			i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Onboards[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRvalidator(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRvalidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovRvalidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovRvalidator(uint64(l))
	}
	if m.Executed {
		n += 2
	}
	if len(m.Voters) > 0 {
		for _, s := range m.Voters {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	return n
}

func (m *StatusProposalContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRvalidator(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	if m.SourceStatus != 0 {
		n += 1 + sovRvalidator(uint64(m.SourceStatus))
	}
	if m.DestStatus != 0 {
		n += 1 + sovRvalidator(uint64(m.DestStatus))
	}
	return n
}

func (m *RValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRvalidator(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRvalidator(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRvalidator(uint64(m.Status))
	}
	l = m.Locked.Size()
	n += 1 + l + sovRvalidator(uint64(l))
	return n
}

func (m *RValidatorIndicator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRvalidator(uint64(l))
	}
	l = m.Commission.Size()
	n += 1 + l + sovRvalidator(uint64(l))
	if m.Uptime != 0 {
		n += 1 + sovRvalidator(uint64(m.Uptime))
	}
	l = m.Locked.Size()
	n += 1 + l + sovRvalidator(uint64(l))
	return n
}

func (m *RValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRvalidator(uint64(l))
	}
	if len(m.Onboards) > 0 {
		for _, s := range m.Onboards {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	if len(m.Pickables) > 0 {
		for _, s := range m.Pickables {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	if len(m.Pickeds) > 0 {
		for _, s := range m.Pickeds {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	if len(m.Unpickables) > 0 {
		for _, s := range m.Unpickables {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	if len(m.Offboards) > 0 {
		for _, s := range m.Offboards {
			l = len(s)
			n += 1 + l + sovRvalidator(uint64(l))
		}
	}
	return n
}

func sovRvalidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRvalidator(x uint64) (n int) {
	return sovRvalidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &StatusProposalContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRvalidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRvalidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusProposalContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusProposalContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusProposalContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceStatus", wireType)
			}
			m.SourceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceStatus |= RValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestStatus", wireType)
			}
			m.DestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestStatus |= RValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRvalidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRvalidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRvalidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRvalidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RValidatorIndicator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RValidatorIndicator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RValidatorIndicator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRvalidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRvalidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Onboards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Onboards = append(m.Onboards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pickables = append(m.Pickables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickeds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pickeds = append(m.Pickeds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unpickables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unpickables = append(m.Unpickables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offboards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRvalidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRvalidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offboards = append(m.Offboards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRvalidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRvalidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRvalidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRvalidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRvalidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRvalidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRvalidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRvalidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRvalidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRvalidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRvalidator = fmt.Errorf("proto: unexpected end of group")
)
