// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rmintreward/models.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintRewardAct struct {
	Begin                  int64                                  `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End                    int64                                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	LockedBlocks           int64                                  `protobuf:"varint,3,opt,name=lockedBlocks,proto3" json:"lockedBlocks,omitempty"`
	TotalRTokenAmount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=totalRTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRTokenAmount"`
	TotalNativeTokenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=totalNativeTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalNativeTokenAmount"`
	TokenRewardInfos       []*TokenRewardInfo                     `protobuf:"bytes,7,rep,name=tokenRewardInfos,proto3" json:"tokenRewardInfos,omitempty"`
}

func (m *MintRewardAct) Reset()         { *m = MintRewardAct{} }
func (m *MintRewardAct) String() string { return proto.CompactTextString(m) }
func (*MintRewardAct) ProtoMessage()    {}
func (*MintRewardAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7673bad6a6e525, []int{0}
}
func (m *MintRewardAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintRewardAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintRewardAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintRewardAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintRewardAct.Merge(m, src)
}
func (m *MintRewardAct) XXX_Size() int {
	return m.Size()
}
func (m *MintRewardAct) XXX_DiscardUnknown() {
	xxx_messageInfo_MintRewardAct.DiscardUnknown(m)
}

var xxx_messageInfo_MintRewardAct proto.InternalMessageInfo

func (m *MintRewardAct) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *MintRewardAct) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *MintRewardAct) GetLockedBlocks() int64 {
	if m != nil {
		return m.LockedBlocks
	}
	return 0
}

func (m *MintRewardAct) GetTokenRewardInfos() []*TokenRewardInfo {
	if m != nil {
		return m.TokenRewardInfos
	}
	return nil
}

type TokenRewardInfo struct {
	Denom             string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	RewardRate        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rewardRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewardRate"`
	TotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	LeftAmount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=leftAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"leftAmount"`
	UserLimit         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=userLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"userLimit"`
}

func (m *TokenRewardInfo) Reset()         { *m = TokenRewardInfo{} }
func (m *TokenRewardInfo) String() string { return proto.CompactTextString(m) }
func (*TokenRewardInfo) ProtoMessage()    {}
func (*TokenRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7673bad6a6e525, []int{1}
}
func (m *TokenRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRewardInfo.Merge(m, src)
}
func (m *TokenRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRewardInfo proto.InternalMessageInfo

func (m *TokenRewardInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type UserClaimInfo struct {
	MintRTokenAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=mintRTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"mintRTokenAmount"`
	NativeTokenAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=nativeTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"nativeTokenAmount"`
	MintBLock          int64                                  `protobuf:"varint,3,opt,name=mintBLock,proto3" json:"mintBLock,omitempty"`
	LatestClaimedBlock int64                                  `protobuf:"varint,4,opt,name=latestClaimedBlock,proto3" json:"latestClaimedBlock,omitempty"`
	TokenClaimInfos    []*TokenClaimInfo                      `protobuf:"bytes,5,rep,name=TokenClaimInfos,proto3" json:"TokenClaimInfos,omitempty"`
}

func (m *UserClaimInfo) Reset()         { *m = UserClaimInfo{} }
func (m *UserClaimInfo) String() string { return proto.CompactTextString(m) }
func (*UserClaimInfo) ProtoMessage()    {}
func (*UserClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7673bad6a6e525, []int{2}
}
func (m *UserClaimInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserClaimInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserClaimInfo.Merge(m, src)
}
func (m *UserClaimInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserClaimInfo proto.InternalMessageInfo

func (m *UserClaimInfo) GetMintBLock() int64 {
	if m != nil {
		return m.MintBLock
	}
	return 0
}

func (m *UserClaimInfo) GetLatestClaimedBlock() int64 {
	if m != nil {
		return m.LatestClaimedBlock
	}
	return 0
}

func (m *UserClaimInfo) GetTokenClaimInfos() []*TokenClaimInfo {
	if m != nil {
		return m.TokenClaimInfos
	}
	return nil
}

type TokenClaimInfo struct {
	Denom              string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TotalRewardAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	TotalClaimedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=totalClaimedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalClaimedAmount"`
}

func (m *TokenClaimInfo) Reset()         { *m = TokenClaimInfo{} }
func (m *TokenClaimInfo) String() string { return proto.CompactTextString(m) }
func (*TokenClaimInfo) ProtoMessage()    {}
func (*TokenClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7673bad6a6e525, []int{3}
}
func (m *TokenClaimInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenClaimInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenClaimInfo.Merge(m, src)
}
func (m *TokenClaimInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenClaimInfo proto.InternalMessageInfo

func (m *TokenClaimInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type Acts struct {
	Acts []uint64 `protobuf:"varint,1,rep,packed,name=acts,proto3" json:"acts,omitempty"`
}

func (m *Acts) Reset()         { *m = Acts{} }
func (m *Acts) String() string { return proto.CompactTextString(m) }
func (*Acts) ProtoMessage()    {}
func (*Acts) Descriptor() ([]byte, []int) {
	return fileDescriptor_db7673bad6a6e525, []int{4}
}
func (m *Acts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Acts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Acts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Acts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acts.Merge(m, src)
}
func (m *Acts) XXX_Size() int {
	return m.Size()
}
func (m *Acts) XXX_DiscardUnknown() {
	xxx_messageInfo_Acts.DiscardUnknown(m)
}

var xxx_messageInfo_Acts proto.InternalMessageInfo

func (m *Acts) GetActs() []uint64 {
	if m != nil {
		return m.Acts
	}
	return nil
}

func init() {
	proto.RegisterType((*MintRewardAct)(nil), "stafihub.stafihub.rmintreward.MintRewardAct")
	proto.RegisterType((*TokenRewardInfo)(nil), "stafihub.stafihub.rmintreward.TokenRewardInfo")
	proto.RegisterType((*UserClaimInfo)(nil), "stafihub.stafihub.rmintreward.UserClaimInfo")
	proto.RegisterType((*TokenClaimInfo)(nil), "stafihub.stafihub.rmintreward.TokenClaimInfo")
	proto.RegisterType((*Acts)(nil), "stafihub.stafihub.rmintreward.Acts")
}

func init() { proto.RegisterFile("rmintreward/models.proto", fileDescriptor_db7673bad6a6e525) }

var fileDescriptor_db7673bad6a6e525 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0x92, 0x76, 0xa8, 0x0f, 0x06, 0xc5, 0x9a, 0x50, 0x34, 0x41, 0x56, 0xe5, 0x80, 0x7a,
	0x59, 0x82, 0xe0, 0x13, 0xb4, 0x70, 0x19, 0x2a, 0x3b, 0x58, 0x43, 0x48, 0x15, 0x42, 0x4a, 0x13,
	0xb7, 0x44, 0x4d, 0xec, 0x29, 0x7e, 0xe5, 0xcf, 0xb7, 0xe0, 0x63, 0xed, 0xb8, 0x23, 0xe2, 0x30,
	0xa1, 0x96, 0x0f, 0x80, 0xc4, 0x19, 0x09, 0xd9, 0x09, 0x6d, 0xba, 0x74, 0x08, 0x32, 0x4e, 0x7e,
	0x7e, 0x7e, 0xfe, 0x3d, 0xfb, 0xf7, 0xfb, 0xd9, 0x60, 0x67, 0x69, 0xcc, 0x31, 0x63, 0xef, 0x83,
	0x2c, 0xf2, 0x53, 0x11, 0xb1, 0x44, 0x7a, 0xa7, 0x99, 0x40, 0x41, 0x1e, 0x48, 0x0c, 0x26, 0xf1,
	0xdb, 0xf9, 0xd8, 0x5b, 0x05, 0xa5, 0xda, 0xfd, 0xbd, 0xa9, 0x98, 0x0a, 0x5d, 0xe9, 0xab, 0x28,
	0xdf, 0xe4, 0xfe, 0x34, 0x61, 0xf7, 0x45, 0xcc, 0x91, 0xea, 0xa2, 0x7e, 0x88, 0x64, 0x0f, 0x5a,
	0x63, 0x36, 0x8d, 0xb9, 0x6d, 0x74, 0x8d, 0x9e, 0x45, 0xf3, 0x09, 0xe9, 0x80, 0xc5, 0x78, 0x64,
	0x9b, 0x3a, 0xa7, 0x42, 0xe2, 0xc2, 0xad, 0x44, 0x84, 0x33, 0x16, 0x0d, 0xd4, 0x20, 0x6d, 0x4b,
	0x2f, 0x6d, 0xe4, 0xc8, 0x6b, 0xb8, 0x8b, 0x02, 0x83, 0x84, 0x9e, 0x88, 0x19, 0xe3, 0xfd, 0x54,
	0xcc, 0x39, 0xda, 0xad, 0xae, 0xd1, 0x6b, 0x0f, 0xbc, 0xb3, 0x8b, 0x83, 0xc6, 0x97, 0x8b, 0x83,
	0x87, 0xd3, 0x18, 0xd5, 0x51, 0x43, 0x91, 0xfa, 0xa1, 0x90, 0xa9, 0x90, 0xc5, 0x70, 0x28, 0xa3,
	0x99, 0x8f, 0x1f, 0x4f, 0x99, 0xf4, 0x8e, 0x38, 0xd2, 0x2a, 0x10, 0x99, 0xc0, 0x3d, 0x9d, 0x3c,
	0x0e, 0x30, 0x7e, 0xc7, 0xca, 0x2d, 0x76, 0x6a, 0xb5, 0xb8, 0x02, 0x8d, 0x8c, 0xa0, 0x83, 0x6a,
	0x9a, 0x73, 0x74, 0xc4, 0x27, 0x42, 0xda, 0x37, 0xba, 0x56, 0xef, 0xe6, 0x63, 0xcf, 0xfb, 0x23,
	0xe7, 0xde, 0xc9, 0xe6, 0x36, 0x5a, 0xc1, 0x71, 0x7f, 0x98, 0x70, 0xe7, 0x52, 0x95, 0x52, 0x20,
	0x62, 0x5c, 0xa4, 0x5a, 0x81, 0x36, 0xcd, 0x27, 0xe4, 0x18, 0x20, 0x47, 0xa5, 0x01, 0x32, 0x2d,
	0xc4, 0xbf, 0xdd, 0xf0, 0x19, 0x0b, 0x69, 0x09, 0x61, 0xad, 0x4d, 0xae, 0x7c, 0x4e, 0x9c, 0x75,
	0x1d, 0x6d, 0x4a, 0x40, 0xea, 0xb4, 0x09, 0x9b, 0x60, 0x01, 0xdb, 0xac, 0x05, 0x5b, 0x42, 0x20,
	0x43, 0x68, 0xcf, 0x25, 0xcb, 0x86, 0x71, 0x1a, 0xd7, 0x75, 0xd0, 0x1a, 0xc0, 0xfd, 0x6e, 0xc2,
	0xee, 0x4b, 0xc9, 0xb2, 0xa7, 0x49, 0x10, 0xa7, 0x9a, 0xf3, 0x11, 0x74, 0x94, 0x6e, 0x1b, 0x46,
	0x35, 0x6a, 0xb5, 0xa9, 0xe0, 0x28, 0xa6, 0x79, 0xc5, 0xa2, 0x66, 0x3d, 0xa6, 0x2b, 0x40, 0xe4,
	0x3e, 0xb4, 0x55, 0xc7, 0xc1, 0x50, 0x84, 0xb3, 0xe2, 0x11, 0xae, 0x13, 0xc4, 0x03, 0x92, 0x04,
	0xc8, 0x24, 0xea, 0xab, 0x16, 0x0f, 0x53, 0xeb, 0x61, 0xd1, 0x2d, 0x2b, 0xe4, 0x55, 0x61, 0xc7,
	0x15, 0x33, 0xd2, 0x6e, 0x69, 0xab, 0x1f, 0xfe, 0x8d, 0xd5, 0x57, 0xbb, 0xe8, 0x65, 0x14, 0xf7,
	0x9b, 0x01, 0xb7, 0x37, 0x73, 0x57, 0xf8, 0x7c, 0xab, 0x2f, 0xcd, 0xff, 0xe5, 0xcb, 0x37, 0x40,
	0x74, 0xb2, 0xb8, 0xf4, 0xb5, 0x6c, 0xbf, 0x05, 0xc9, 0xdd, 0x87, 0x66, 0x3f, 0x44, 0x49, 0x08,
	0x34, 0x83, 0x10, 0xa5, 0x6d, 0x74, 0xad, 0x5e, 0x93, 0xea, 0x78, 0xf0, 0xfc, 0x6c, 0xe1, 0x18,
	0xe7, 0x0b, 0xc7, 0xf8, 0xba, 0x70, 0x8c, 0x4f, 0x4b, 0xa7, 0x71, 0xbe, 0x74, 0x1a, 0x9f, 0x97,
	0x4e, 0x63, 0xf4, 0xa8, 0xd4, 0xf1, 0x37, 0xbb, 0xeb, 0xe0, 0x83, 0x5f, 0xfe, 0xf3, 0x75, 0xff,
	0xf1, 0x8e, 0xfe, 0xbe, 0x9f, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xf6, 0xc0, 0x77, 0x0f,
	0x06, 0x00, 0x00,
}

func (m *MintRewardAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintRewardAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintRewardAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenRewardInfos) > 0 {
		for iNdEx := len(m.TokenRewardInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenRewardInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.TotalNativeTokenAmount.Size()
		i -= size
		if _, err := m.TotalNativeTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalRTokenAmount.Size()
		i -= size
		if _, err := m.TotalRTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.LockedBlocks != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.LockedBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.End != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UserLimit.Size()
		i -= size
		if _, err := m.UserLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LeftAmount.Size()
		i -= size
		if _, err := m.LeftAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RewardRate.Size()
		i -= size
		if _, err := m.RewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserClaimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClaimInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserClaimInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenClaimInfos) > 0 {
		for iNdEx := len(m.TokenClaimInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenClaimInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LatestClaimedBlock != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.LatestClaimedBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.MintBLock != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.MintBLock))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.NativeTokenAmount.Size()
		i -= size
		if _, err := m.NativeTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MintRTokenAmount.Size()
		i -= size
		if _, err := m.MintRTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TokenClaimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenClaimInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenClaimInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalClaimedAmount.Size()
		i -= size
		if _, err := m.TotalClaimedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Acts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Acts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Acts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acts) > 0 {
		dAtA2 := make([]byte, len(m.Acts)*10)
		var j1 int
		for _, num := range m.Acts {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintModels(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintRewardAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovModels(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovModels(uint64(m.End))
	}
	if m.LockedBlocks != 0 {
		n += 1 + sovModels(uint64(m.LockedBlocks))
	}
	l = m.TotalRTokenAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.TotalNativeTokenAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.TokenRewardInfos) > 0 {
		for _, e := range m.TokenRewardInfos {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *TokenRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.RewardRate.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.LeftAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.UserLimit.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *UserClaimInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintRTokenAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.NativeTokenAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	if m.MintBLock != 0 {
		n += 1 + sovModels(uint64(m.MintBLock))
	}
	if m.LatestClaimedBlock != 0 {
		n += 1 + sovModels(uint64(m.LatestClaimedBlock))
	}
	if len(m.TokenClaimInfos) > 0 {
		for _, e := range m.TokenClaimInfos {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *TokenClaimInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.TotalClaimedAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *Acts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Acts) > 0 {
		l = 0
		for _, e := range m.Acts {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintRewardAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintRewardAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintRewardAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedBlocks", wireType)
			}
			m.LockedBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNativeTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalNativeTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenRewardInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenRewardInfos = append(m.TokenRewardInfos, &TokenRewardInfo{})
			if err := m.TokenRewardInfos[len(m.TokenRewardInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeftAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClaimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClaimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClaimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintBLock", wireType)
			}
			m.MintBLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintBLock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestClaimedBlock", wireType)
			}
			m.LatestClaimedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestClaimedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenClaimInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenClaimInfos = append(m.TokenClaimInfos, &TokenClaimInfo{})
			if err := m.TokenClaimInfos[len(m.TokenClaimInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenClaimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenClaimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenClaimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Acts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Acts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Acts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Acts = append(m.Acts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Acts) == 0 {
					m.Acts = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Acts = append(m.Acts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Acts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
