// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/proposal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetChainEraProposal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Era      uint32 `protobuf:"varint,3,opt,name=era,proto3" json:"era,omitempty"`
	PropId   string `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *SetChainEraProposal) Reset()         { *m = SetChainEraProposal{} }
func (m *SetChainEraProposal) String() string { return proto.CompactTextString(m) }
func (*SetChainEraProposal) ProtoMessage()    {}
func (*SetChainEraProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{0}
}
func (m *SetChainEraProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetChainEraProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetChainEraProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetChainEraProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetChainEraProposal.Merge(m, src)
}
func (m *SetChainEraProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetChainEraProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetChainEraProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetChainEraProposal proto.InternalMessageInfo

func (m *SetChainEraProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *SetChainEraProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SetChainEraProposal) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *SetChainEraProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type BondReportProposal struct {
	Proposer string     `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string     `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   string     `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Action   BondAction `protobuf:"varint,4,opt,name=action,proto3,enum=stafihub.stafihub.ledger.BondAction" json:"action,omitempty"`
	PropId   string     `protobuf:"bytes,5,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *BondReportProposal) Reset()         { *m = BondReportProposal{} }
func (m *BondReportProposal) String() string { return proto.CompactTextString(m) }
func (*BondReportProposal) ProtoMessage()    {}
func (*BondReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{1}
}
func (m *BondReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondReportProposal.Merge(m, src)
}
func (m *BondReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *BondReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BondReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BondReportProposal proto.InternalMessageInfo

func (m *BondReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *BondReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondReportProposal) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

func (m *BondReportProposal) GetAction() BondAction {
	if m != nil {
		return m.Action
	}
	return BondOnly
}

func (m *BondReportProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type ActiveReportProposal struct {
	Proposer string                                 `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   string                                 `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Staked   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staked"`
	Unstaked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=unstaked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unstaked"`
	PropId   string                                 `protobuf:"bytes,6,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *ActiveReportProposal) Reset()         { *m = ActiveReportProposal{} }
func (m *ActiveReportProposal) String() string { return proto.CompactTextString(m) }
func (*ActiveReportProposal) ProtoMessage()    {}
func (*ActiveReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{2}
}
func (m *ActiveReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveReportProposal.Merge(m, src)
}
func (m *ActiveReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *ActiveReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveReportProposal proto.InternalMessageInfo

func (m *ActiveReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ActiveReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ActiveReportProposal) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

func (m *ActiveReportProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type TransferReportProposal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   string `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	PropId   string `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *TransferReportProposal) Reset()         { *m = TransferReportProposal{} }
func (m *TransferReportProposal) String() string { return proto.CompactTextString(m) }
func (*TransferReportProposal) ProtoMessage()    {}
func (*TransferReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{3}
}
func (m *TransferReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReportProposal.Merge(m, src)
}
func (m *TransferReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *TransferReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReportProposal proto.InternalMessageInfo

func (m *TransferReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *TransferReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TransferReportProposal) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

func (m *TransferReportProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

type ExecuteBondProposal struct {
	Proposer string                                 `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Bonder   string                                 `protobuf:"bytes,3,opt,name=bonder,proto3" json:"bonder,omitempty"`
	Pool     string                                 `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	Txhash   string                                 `protobuf:"bytes,5,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	PropId   string                                 `protobuf:"bytes,7,opt,name=propId,proto3" json:"propId,omitempty"`
	State    LiquidityBondState                     `protobuf:"varint,8,opt,name=state,proto3,enum=stafihub.stafihub.ledger.LiquidityBondState" json:"state,omitempty"`
}

func (m *ExecuteBondProposal) Reset()         { *m = ExecuteBondProposal{} }
func (m *ExecuteBondProposal) String() string { return proto.CompactTextString(m) }
func (*ExecuteBondProposal) ProtoMessage()    {}
func (*ExecuteBondProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{4}
}
func (m *ExecuteBondProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteBondProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteBondProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteBondProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBondProposal.Merge(m, src)
}
func (m *ExecuteBondProposal) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteBondProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBondProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBondProposal proto.InternalMessageInfo

func (m *ExecuteBondProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ExecuteBondProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ExecuteBondProposal) GetBonder() string {
	if m != nil {
		return m.Bonder
	}
	return ""
}

func (m *ExecuteBondProposal) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *ExecuteBondProposal) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *ExecuteBondProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *ExecuteBondProposal) GetState() LiquidityBondState {
	if m != nil {
		return m.State
	}
	return LiquidityBondStateVerifyOk
}

type InterchainTxProposal struct {
	Proposer    string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom       string       `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string       `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	ShotId      string       `protobuf:"bytes,4,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Msgs        []*types.Any `protobuf:"bytes,5,rep,name=msgs,proto3" json:"msgs,omitempty"`
	Factor      uint32       `protobuf:"varint,6,opt,name=factor,proto3" json:"factor,omitempty"`
	PropId      string       `protobuf:"bytes,7,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *InterchainTxProposal) Reset()         { *m = InterchainTxProposal{} }
func (m *InterchainTxProposal) String() string { return proto.CompactTextString(m) }
func (*InterchainTxProposal) ProtoMessage()    {}
func (*InterchainTxProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{5}
}
func (m *InterchainTxProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainTxProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainTxProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainTxProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainTxProposal.Merge(m, src)
}
func (m *InterchainTxProposal) XXX_Size() int {
	return m.Size()
}
func (m *InterchainTxProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainTxProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainTxProposal proto.InternalMessageInfo

func (m *InterchainTxProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *InterchainTxProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *InterchainTxProposal) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *InterchainTxProposal) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

func (m *InterchainTxProposal) GetMsgs() []*types.Any {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *InterchainTxProposal) GetFactor() uint32 {
	if m != nil {
		return m.Factor
	}
	return 0
}

func (m *InterchainTxProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func init() {
	proto.RegisterType((*SetChainEraProposal)(nil), "stafihub.stafihub.ledger.SetChainEraProposal")
	proto.RegisterType((*BondReportProposal)(nil), "stafihub.stafihub.ledger.BondReportProposal")
	proto.RegisterType((*ActiveReportProposal)(nil), "stafihub.stafihub.ledger.ActiveReportProposal")
	proto.RegisterType((*TransferReportProposal)(nil), "stafihub.stafihub.ledger.TransferReportProposal")
	proto.RegisterType((*ExecuteBondProposal)(nil), "stafihub.stafihub.ledger.ExecuteBondProposal")
	proto.RegisterType((*InterchainTxProposal)(nil), "stafihub.stafihub.ledger.InterchainTxProposal")
}

func init() { proto.RegisterFile("ledger/proposal.proto", fileDescriptor_533d0a7d0c3c5281) }

var fileDescriptor_533d0a7d0c3c5281 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xdb, 0xc4, 0xb4, 0x53, 0x15, 0xa1, 0x49, 0x88, 0x4c, 0x16, 0x6e, 0x14, 0x21, 0x14,
	0x09, 0xb0, 0xa5, 0xb2, 0x65, 0x93, 0xa0, 0x20, 0x05, 0xb1, 0x40, 0x6e, 0x57, 0xec, 0x26, 0xf6,
	0xc4, 0xb1, 0x9a, 0xcc, 0x75, 0x67, 0xc6, 0x28, 0xe1, 0x1b, 0x58, 0xf0, 0x27, 0x6c, 0xf8, 0x88,
	0x2e, 0xbb, 0x44, 0x08, 0x55, 0x28, 0xf9, 0x11, 0x34, 0x8f, 0x04, 0x67, 0x91, 0x05, 0x44, 0x5d,
	0xf9, 0x1e, 0xfb, 0xdc, 0xc7, 0x9c, 0x73, 0x3d, 0xe8, 0xf1, 0x94, 0x26, 0x29, 0xe5, 0x61, 0xce,
	0x21, 0x07, 0x41, 0xa6, 0x41, 0xce, 0x41, 0x02, 0xf6, 0x84, 0x24, 0xe3, 0x6c, 0x52, 0x8c, 0x82,
	0x4d, 0x60, 0x88, 0xad, 0x46, 0x0a, 0x29, 0x68, 0x52, 0xa8, 0x22, 0xc3, 0x6f, 0xd5, 0x6d, 0x19,
	0xf3, 0xb0, 0x2f, 0x9f, 0xa4, 0x00, 0xe9, 0x94, 0x86, 0x1a, 0x8d, 0x8a, 0x71, 0x48, 0xd8, 0xc2,
	0x7c, 0xea, 0x5c, 0xa3, 0xfa, 0x05, 0x95, 0x6f, 0x26, 0x24, 0x63, 0x03, 0x4e, 0x3e, 0xd8, 0xe6,
	0xb8, 0x85, 0x8e, 0xcc, 0x20, 0x94, 0x7b, 0x4e, 0xdb, 0xe9, 0x1e, 0x47, 0x1b, 0x8c, 0x1b, 0xa8,
	0x96, 0x50, 0x06, 0x33, 0xef, 0x40, 0x7f, 0x30, 0x00, 0x3f, 0x42, 0x87, 0x94, 0x13, 0xef, 0xb0,
	0xed, 0x74, 0x4f, 0x23, 0x15, 0xe2, 0x26, 0x72, 0x55, 0xce, 0x30, 0xf1, 0xaa, 0x9a, 0x68, 0x51,
	0xe7, 0xbb, 0x83, 0x70, 0x1f, 0x58, 0x12, 0xd1, 0x1c, 0xb8, 0xdc, 0xa3, 0x65, 0x13, 0xb9, 0x62,
	0x02, 0x72, 0x98, 0xe8, 0xae, 0xc7, 0x91, 0x45, 0xf8, 0x35, 0x72, 0x49, 0x2c, 0x33, 0x60, 0xba,
	0xf1, 0xc3, 0xf3, 0xa7, 0xc1, 0x2e, 0x11, 0x03, 0x35, 0x47, 0x4f, 0x73, 0x23, 0x9b, 0x53, 0x1a,
	0xbb, 0xb6, 0x35, 0xf6, 0x97, 0x03, 0xd4, 0x50, 0xd4, 0x4f, 0xf4, 0xde, 0x06, 0x7f, 0x8b, 0x5c,
	0x21, 0xc9, 0x15, 0xb5, 0x8a, 0xf5, 0x83, 0x9b, 0xbb, 0xb3, 0xca, 0xcf, 0xbb, 0xb3, 0x67, 0x69,
	0x26, 0xd5, 0xd0, 0x31, 0xcc, 0xc2, 0x18, 0xc4, 0x0c, 0x84, 0x7d, 0xbc, 0x14, 0xc9, 0x55, 0x28,
	0x17, 0x39, 0x15, 0xc1, 0x90, 0xc9, 0xc8, 0x66, 0xe3, 0x77, 0xe8, 0xa8, 0x60, 0xb6, 0x52, 0xed,
	0xbf, 0x2a, 0x6d, 0xf2, 0x4b, 0x72, 0xb8, 0x5b, 0x72, 0x7c, 0x46, 0xcd, 0x4b, 0x4e, 0x98, 0x18,
	0x53, 0x7e, 0x6f, 0x7a, 0xec, 0xda, 0xa0, 0x6f, 0x07, 0xa8, 0x3e, 0x98, 0xd3, 0xb8, 0x90, 0x54,
	0x19, 0xb8, 0x5f, 0xe7, 0x11, 0xb0, 0x84, 0xf2, 0x75, 0x67, 0x83, 0x30, 0x46, 0xd5, 0x1c, 0x60,
	0x6a, 0xfb, 0xea, 0x58, 0x71, 0xe5, 0x7c, 0x42, 0xc4, 0x64, 0xbd, 0x18, 0x06, 0x29, 0xd7, 0xc8,
	0x0c, 0x0a, 0x26, 0x8d, 0x42, 0xff, 0xee, 0x9a, 0xc9, 0x2e, 0x9d, 0xf6, 0x41, 0xf9, 0xb4, 0xb8,
	0x8f, 0x6a, 0x42, 0x12, 0x49, 0xbd, 0x23, 0xbd, 0xcd, 0x2f, 0x76, 0x6f, 0xf3, 0xfb, 0xec, 0xba,
	0xc8, 0x92, 0x4c, 0x2e, 0x94, 0x2a, 0x17, 0x2a, 0x27, 0x32, 0xa9, 0x9d, 0x5f, 0x0e, 0x6a, 0x0c,
	0x99, 0xa4, 0x3c, 0x56, 0x7f, 0xfa, 0xe5, 0x7c, 0x0f, 0xc9, 0xda, 0xe8, 0x44, 0xc9, 0xd1, 0x4b,
	0x12, 0x4e, 0x85, 0xb0, 0xba, 0x95, 0x5f, 0x95, 0xec, 0xac, 0x6e, 0xd9, 0xd9, 0x45, 0xd5, 0x99,
	0x48, 0x85, 0x57, 0x6b, 0x1f, 0x76, 0x4f, 0xce, 0x1b, 0x81, 0xb9, 0x95, 0x82, 0xf5, 0xad, 0x14,
	0xf4, 0xd8, 0x22, 0xd2, 0x0c, 0x55, 0x61, 0x4c, 0x62, 0x09, 0x5c, 0x4b, 0x7a, 0x1a, 0x59, 0xb4,
	0x4b, 0xa2, 0xfe, 0xe0, 0x66, 0xe9, 0x3b, 0xb7, 0x4b, 0xdf, 0xf9, 0xbd, 0xf4, 0x9d, 0xaf, 0x2b,
	0xbf, 0x72, 0xbb, 0xf2, 0x2b, 0x3f, 0x56, 0x7e, 0xe5, 0xe3, 0xf3, 0x92, 0x09, 0x6b, 0xb9, 0xfe,
	0x06, 0x73, 0x7b, 0x4f, 0x1a, 0x37, 0x46, 0xae, 0x1e, 0xe5, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x96, 0x96, 0xa0, 0x1e, 0x8c, 0x05, 0x00, 0x00,
}

func (m *SetChainEraProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChainEraProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetChainEraProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Era != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Action != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Unstaked.Size()
		i -= size
		if _, err := m.Unstaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Staked.Size()
		i -= size
		if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteBondProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBondProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteBondProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bonder) > 0 {
		i -= len(m.Bonder)
		copy(dAtA[i:], m.Bonder)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Bonder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainTxProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainTxProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainTxProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Factor != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Factor))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetChainEraProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovProposal(uint64(m.Era))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *BondReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovProposal(uint64(m.Action))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ActiveReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.Staked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = m.Unstaked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *TransferReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ExecuteBondProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Bonder)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	return n
}

func (m *InterchainTxProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if m.Factor != 0 {
		n += 1 + sovProposal(uint64(m.Factor))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetChainEraProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChainEraProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChainEraProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= BondAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unstaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unstaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBondProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteBondProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteBondProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= LiquidityBondState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainTxProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainTxProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainTxProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			m.Factor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Factor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
