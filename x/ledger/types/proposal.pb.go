// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/proposal.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetChainEraProposal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Era      uint32 `protobuf:"varint,3,opt,name=era,proto3" json:"era,omitempty"`
	PropId   []byte `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *SetChainEraProposal) Reset()         { *m = SetChainEraProposal{} }
func (m *SetChainEraProposal) String() string { return proto.CompactTextString(m) }
func (*SetChainEraProposal) ProtoMessage()    {}
func (*SetChainEraProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{0}
}
func (m *SetChainEraProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetChainEraProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetChainEraProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetChainEraProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetChainEraProposal.Merge(m, src)
}
func (m *SetChainEraProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetChainEraProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetChainEraProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetChainEraProposal proto.InternalMessageInfo

func (m *SetChainEraProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *SetChainEraProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SetChainEraProposal) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *SetChainEraProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

type BondReportProposal struct {
	Proposer string     `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string     `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   []byte     `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Action   BondAction `protobuf:"varint,4,opt,name=action,proto3,enum=stafiprotocol.stafihub.ledger.BondAction" json:"action,omitempty"`
	PropId   []byte     `protobuf:"bytes,5,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *BondReportProposal) Reset()         { *m = BondReportProposal{} }
func (m *BondReportProposal) String() string { return proto.CompactTextString(m) }
func (*BondReportProposal) ProtoMessage()    {}
func (*BondReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{1}
}
func (m *BondReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondReportProposal.Merge(m, src)
}
func (m *BondReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *BondReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BondReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BondReportProposal proto.InternalMessageInfo

func (m *BondReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *BondReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondReportProposal) GetShotId() []byte {
	if m != nil {
		return m.ShotId
	}
	return nil
}

func (m *BondReportProposal) GetAction() BondAction {
	if m != nil {
		return m.Action
	}
	return BondOnly
}

func (m *BondReportProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

type BondAndReportActiveProposal struct {
	Proposer string                                 `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   []byte                                 `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Action   BondAction                             `protobuf:"varint,4,opt,name=action,proto3,enum=stafiprotocol.stafihub.ledger.BondAction" json:"action,omitempty"`
	Staked   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staked"`
	Unstaked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=unstaked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unstaked"`
	PropId   []byte                                 `protobuf:"bytes,7,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *BondAndReportActiveProposal) Reset()         { *m = BondAndReportActiveProposal{} }
func (m *BondAndReportActiveProposal) String() string { return proto.CompactTextString(m) }
func (*BondAndReportActiveProposal) ProtoMessage()    {}
func (*BondAndReportActiveProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{2}
}
func (m *BondAndReportActiveProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondAndReportActiveProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondAndReportActiveProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondAndReportActiveProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondAndReportActiveProposal.Merge(m, src)
}
func (m *BondAndReportActiveProposal) XXX_Size() int {
	return m.Size()
}
func (m *BondAndReportActiveProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BondAndReportActiveProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BondAndReportActiveProposal proto.InternalMessageInfo

func (m *BondAndReportActiveProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *BondAndReportActiveProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BondAndReportActiveProposal) GetShotId() []byte {
	if m != nil {
		return m.ShotId
	}
	return nil
}

func (m *BondAndReportActiveProposal) GetAction() BondAction {
	if m != nil {
		return m.Action
	}
	return BondOnly
}

func (m *BondAndReportActiveProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

type ActiveReportProposal struct {
	Proposer string                                 `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   []byte                                 `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Staked   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staked"`
	Unstaked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=unstaked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unstaked"`
	PropId   []byte                                 `protobuf:"bytes,6,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *ActiveReportProposal) Reset()         { *m = ActiveReportProposal{} }
func (m *ActiveReportProposal) String() string { return proto.CompactTextString(m) }
func (*ActiveReportProposal) ProtoMessage()    {}
func (*ActiveReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{3}
}
func (m *ActiveReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveReportProposal.Merge(m, src)
}
func (m *ActiveReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *ActiveReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveReportProposal proto.InternalMessageInfo

func (m *ActiveReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ActiveReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ActiveReportProposal) GetShotId() []byte {
	if m != nil {
		return m.ShotId
	}
	return nil
}

func (m *ActiveReportProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

type WithdrawReportProposal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   []byte `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	PropId   []byte `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *WithdrawReportProposal) Reset()         { *m = WithdrawReportProposal{} }
func (m *WithdrawReportProposal) String() string { return proto.CompactTextString(m) }
func (*WithdrawReportProposal) ProtoMessage()    {}
func (*WithdrawReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{4}
}
func (m *WithdrawReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawReportProposal.Merge(m, src)
}
func (m *WithdrawReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawReportProposal proto.InternalMessageInfo

func (m *WithdrawReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *WithdrawReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *WithdrawReportProposal) GetShotId() []byte {
	if m != nil {
		return m.ShotId
	}
	return nil
}

func (m *WithdrawReportProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

type TransferReportProposal struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ShotId   []byte `protobuf:"bytes,3,opt,name=shotId,proto3" json:"shotId,omitempty"`
	PropId   []byte `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
}

func (m *TransferReportProposal) Reset()         { *m = TransferReportProposal{} }
func (m *TransferReportProposal) String() string { return proto.CompactTextString(m) }
func (*TransferReportProposal) ProtoMessage()    {}
func (*TransferReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_533d0a7d0c3c5281, []int{5}
}
func (m *TransferReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReportProposal.Merge(m, src)
}
func (m *TransferReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *TransferReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReportProposal proto.InternalMessageInfo

func (m *TransferReportProposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *TransferReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TransferReportProposal) GetShotId() []byte {
	if m != nil {
		return m.ShotId
	}
	return nil
}

func (m *TransferReportProposal) GetPropId() []byte {
	if m != nil {
		return m.PropId
	}
	return nil
}

func init() {
	proto.RegisterType((*SetChainEraProposal)(nil), "stafiprotocol.stafihub.ledger.SetChainEraProposal")
	proto.RegisterType((*BondReportProposal)(nil), "stafiprotocol.stafihub.ledger.BondReportProposal")
	proto.RegisterType((*BondAndReportActiveProposal)(nil), "stafiprotocol.stafihub.ledger.BondAndReportActiveProposal")
	proto.RegisterType((*ActiveReportProposal)(nil), "stafiprotocol.stafihub.ledger.ActiveReportProposal")
	proto.RegisterType((*WithdrawReportProposal)(nil), "stafiprotocol.stafihub.ledger.WithdrawReportProposal")
	proto.RegisterType((*TransferReportProposal)(nil), "stafiprotocol.stafihub.ledger.TransferReportProposal")
}

func init() { proto.RegisterFile("ledger/proposal.proto", fileDescriptor_533d0a7d0c3c5281) }

var fileDescriptor_533d0a7d0c3c5281 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0xc7, 0x3b, 0x7c, 0x54, 0x98, 0xa0, 0x31, 0x03, 0x36, 0x0d, 0xc6, 0x42, 0x58, 0x18, 0x5c,
	0xd8, 0x1a, 0x7d, 0x02, 0x30, 0x9a, 0xc0, 0xca, 0x54, 0x13, 0x13, 0x77, 0x43, 0x3b, 0xb4, 0x0d,
	0xd0, 0xa9, 0x33, 0x83, 0x1f, 0x3c, 0x83, 0x0b, 0x5f, 0xc7, 0x37, 0x60, 0xc9, 0xca, 0x18, 0x17,
	0xc4, 0xc0, 0x8b, 0x98, 0xce, 0x0c, 0x48, 0x17, 0xba, 0xf0, 0xc2, 0xcd, 0x5d, 0xcd, 0x39, 0xcc,
	0xf9, 0x9f, 0xff, 0x99, 0x5f, 0x38, 0x85, 0xf7, 0xe6, 0x24, 0x8c, 0x08, 0xf3, 0x32, 0x46, 0x33,
	0xca, 0xf1, 0xdc, 0xcd, 0x18, 0x15, 0x14, 0x3d, 0xe0, 0x02, 0x4f, 0x13, 0x19, 0x07, 0x74, 0xee,
	0xca, 0x2c, 0x5e, 0x4e, 0x5c, 0x55, 0xdd, 0x6e, 0x45, 0x34, 0xa2, 0xf2, 0xd6, 0xcb, 0x23, 0x25,
	0x6a, 0x37, 0x75, 0x2f, 0x75, 0xa8, 0x1f, 0x7b, 0xef, 0x61, 0xf3, 0x35, 0x11, 0xcf, 0x63, 0x9c,
	0xa4, 0x2f, 0x18, 0x7e, 0xa5, 0x6d, 0x50, 0x1b, 0xd6, 0x94, 0x25, 0x61, 0x36, 0xe8, 0x82, 0x7e,
	0xdd, 0x3f, 0xe6, 0xa8, 0x05, 0xab, 0x21, 0x49, 0xe9, 0xc2, 0x2e, 0xc9, 0x0b, 0x95, 0xa0, 0xbb,
	0xb0, 0x4c, 0x18, 0xb6, 0xcb, 0x5d, 0xd0, 0xbf, 0xed, 0xe7, 0x21, 0xb2, 0xa0, 0x99, 0x6b, 0x46,
	0xa1, 0x5d, 0xe9, 0x82, 0x7e, 0xc3, 0xd7, 0x59, 0xef, 0x1b, 0x80, 0x68, 0x48, 0xd3, 0xd0, 0x27,
	0x19, 0x65, 0xe2, 0x0a, 0x96, 0x16, 0x34, 0x79, 0x4c, 0xc5, 0x28, 0x94, 0xae, 0x0d, 0x5f, 0x67,
	0x68, 0x00, 0x4d, 0x1c, 0x88, 0x84, 0xa6, 0xd2, 0xf8, 0xce, 0xd3, 0x47, 0xee, 0x3f, 0x71, 0xb9,
	0xf9, 0x30, 0x03, 0x29, 0xf0, 0xb5, 0xf0, 0x64, 0xf6, 0x6a, 0x61, 0xf6, 0xef, 0x25, 0x78, 0x5f,
	0x96, 0x1f, 0xc6, 0xcf, 0x75, 0x1f, 0xc8, 0xcd, 0x7c, 0xc4, 0x4b, 0x68, 0x72, 0x81, 0x67, 0x44,
	0x3d, 0xa2, 0x3e, 0x74, 0xd7, 0xdb, 0x8e, 0xf1, 0x73, 0xdb, 0x79, 0x18, 0x25, 0x22, 0x57, 0x06,
	0x74, 0xe1, 0x05, 0x94, 0x2f, 0x28, 0xd7, 0xc7, 0x63, 0x1e, 0xce, 0x3c, 0xf1, 0x39, 0x23, 0xdc,
	0x1d, 0xa5, 0xc2, 0xd7, 0x6a, 0x34, 0x86, 0xb5, 0x65, 0xaa, 0x3b, 0x99, 0xff, 0xd5, 0xe9, 0xa8,
	0x3f, 0x01, 0x7b, 0xab, 0x00, 0xf6, 0x4b, 0x09, 0xb6, 0x14, 0xcb, 0x8b, 0xfd, 0x2d, 0xfe, 0xe0,
	0xa8, 0x9c, 0x0d, 0x47, 0xf5, 0x6c, 0x38, 0xcc, 0x02, 0x8e, 0x15, 0xb4, 0xde, 0x26, 0x22, 0x0e,
	0x19, 0xfe, 0x78, 0x31, 0x1e, 0x7f, 0xdb, 0xcf, 0x15, 0xb4, 0xde, 0x30, 0x9c, 0xf2, 0x29, 0x61,
	0xd7, 0xed, 0x3d, 0x1c, 0xaf, 0x77, 0x0e, 0xd8, 0xec, 0x1c, 0xf0, 0x6b, 0xe7, 0x80, 0xaf, 0x7b,
	0xc7, 0xd8, 0xec, 0x1d, 0xe3, 0xc7, 0xde, 0x31, 0xde, 0x3d, 0x39, 0x61, 0x5b, 0xd8, 0x04, 0xef,
	0xb0, 0x09, 0xde, 0x27, 0xfd, 0x69, 0x53, 0xa4, 0x27, 0xa6, 0xac, 0x78, 0xf6, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x47, 0xcb, 0xc5, 0xca, 0x44, 0x05, 0x00, 0x00,
}

func (m *SetChainEraProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChainEraProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetChainEraProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Era != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Action != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondAndReportActiveProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondAndReportActiveProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondAndReportActiveProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Unstaked.Size()
		i -= size
		if _, err := m.Unstaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Staked.Size()
		i -= size
		if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Action != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Unstaked.Size()
		i -= size
		if _, err := m.Unstaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Staked.Size()
		i -= size
		if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetChainEraProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovProposal(uint64(m.Era))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *BondReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovProposal(uint64(m.Action))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *BondAndReportActiveProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovProposal(uint64(m.Action))
	}
	l = m.Staked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = m.Unstaked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ActiveReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.Staked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = m.Unstaked.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *WithdrawReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *TransferReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetChainEraProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChainEraProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChainEraProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = append(m.ShotId[:0], dAtA[iNdEx:postIndex]...)
			if m.ShotId == nil {
				m.ShotId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= BondAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondAndReportActiveProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondAndReportActiveProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondAndReportActiveProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = append(m.ShotId[:0], dAtA[iNdEx:postIndex]...)
			if m.ShotId == nil {
				m.ShotId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= BondAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unstaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unstaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = append(m.ShotId[:0], dAtA[iNdEx:postIndex]...)
			if m.ShotId == nil {
				m.ShotId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unstaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unstaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = append(m.ShotId[:0], dAtA[iNdEx:postIndex]...)
			if m.ShotId == nil {
				m.ShotId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = append(m.ShotId[:0], dAtA[iNdEx:postIndex]...)
			if m.ShotId == nil {
				m.ShotId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = append(m.PropId[:0], dAtA[iNdEx:postIndex]...)
			if m.PropId == nil {
				m.PropId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
