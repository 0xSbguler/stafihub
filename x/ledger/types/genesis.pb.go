// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_stafihub_stafihub_utils "github.com/stafihub/stafihub/utils"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the ledger module's genesis state.
type GenesisState struct {
	ExchangeRateList            []ExchangeRate             `protobuf:"bytes,1,rep,name=exchangeRateList,proto3" json:"exchangeRateList"`
	EraExchangeRateList         []*EraExchangeRate         `protobuf:"bytes,2,rep,name=eraExchangeRateList,proto3" json:"eraExchangeRateList,omitempty"`
	TotalProtocolFeeList        []*TotalProtocolFee        `protobuf:"bytes,3,rep,name=totalProtocolFeeList,proto3" json:"totalProtocolFeeList,omitempty"`
	UnbondSwitchList            []*UnbondSwitch            `protobuf:"bytes,4,rep,name=unbondSwitchList,proto3" json:"unbondSwitchList,omitempty"`
	BondedPoolList              []*Pool                    `protobuf:"bytes,5,rep,name=bondedPoolList,proto3" json:"bondedPoolList,omitempty"`
	BondPipelineList            []*BondPipeline            `protobuf:"bytes,6,rep,name=bondPipelineList,proto3" json:"bondPipelineList,omitempty"`
	EraUnbondLimitList          []*EraUnbondLimit          `protobuf:"bytes,7,rep,name=eraUnbondLimitList,proto3" json:"eraUnbondLimitList,omitempty"`
	PoolDetailList              []*PoolDetail              `protobuf:"bytes,8,rep,name=poolDetailList,proto3" json:"poolDetailList,omitempty"`
	CurrentEraSnapshotList      []*EraSnapshot             `protobuf:"bytes,9,rep,name=currentEraSnapshotList,proto3" json:"currentEraSnapshotList,omitempty"`
	SnapshotList                []*GenesisSnapshot         `protobuf:"bytes,10,rep,name=snapshotList,proto3" json:"snapshotList,omitempty"`
	EraSnapshotList             []*GenesisEraSnapshot      `protobuf:"bytes,11,rep,name=eraSnapshotList,proto3" json:"eraSnapshotList,omitempty"`
	ChainEraList                []*ChainEra                `protobuf:"bytes,12,rep,name=chainEraList,proto3" json:"chainEraList,omitempty"`
	StakingRewardCommissionList []*StakingRewardCommission `protobuf:"bytes,13,rep,name=stakingRewardCommissionList,proto3" json:"stakingRewardCommissionList,omitempty"`
	ProtocolFeeReceiver         string                     `protobuf:"bytes,14,opt,name=protocolFeeReceiver,proto3" json:"protocolFeeReceiver,omitempty"`
	RelayFeeReceiverList        []*RelayFeeReceiver        `protobuf:"bytes,15,rep,name=relayFeeReceiverList,proto3" json:"relayFeeReceiverList,omitempty"`
	TotalExpectedActiveList     []*TotalExpectedActive     `protobuf:"bytes,16,rep,name=totalExpectedActiveList,proto3" json:"totalExpectedActiveList,omitempty"`
	PoolUnbondingList           []*GenesisPoolUnbonding    `protobuf:"bytes,17,rep,name=poolUnbondingList,proto3" json:"poolUnbondingList,omitempty"`
	UnbondRelayFeeList          []*UnbondRelayFee          `protobuf:"bytes,18,rep,name=unbondRelayFeeList,proto3" json:"unbondRelayFeeList,omitempty"`
	UnbondCommissionList        []*UnbondCommission        `protobuf:"bytes,19,rep,name=unbondCommissionList,proto3" json:"unbondCommissionList,omitempty"`
	BondRecordList              []*BondRecord              `protobuf:"bytes,20,rep,name=bondRecordList,proto3" json:"bondRecordList,omitempty"`
	RparamsList                 []*RParams                 `protobuf:"bytes,21,rep,name=rparamsList,proto3" json:"rparamsList,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetExchangeRateList() []ExchangeRate {
	if m != nil {
		return m.ExchangeRateList
	}
	return nil
}

func (m *GenesisState) GetEraExchangeRateList() []*EraExchangeRate {
	if m != nil {
		return m.EraExchangeRateList
	}
	return nil
}

func (m *GenesisState) GetTotalProtocolFeeList() []*TotalProtocolFee {
	if m != nil {
		return m.TotalProtocolFeeList
	}
	return nil
}

func (m *GenesisState) GetUnbondSwitchList() []*UnbondSwitch {
	if m != nil {
		return m.UnbondSwitchList
	}
	return nil
}

func (m *GenesisState) GetBondedPoolList() []*Pool {
	if m != nil {
		return m.BondedPoolList
	}
	return nil
}

func (m *GenesisState) GetBondPipelineList() []*BondPipeline {
	if m != nil {
		return m.BondPipelineList
	}
	return nil
}

func (m *GenesisState) GetEraUnbondLimitList() []*EraUnbondLimit {
	if m != nil {
		return m.EraUnbondLimitList
	}
	return nil
}

func (m *GenesisState) GetPoolDetailList() []*PoolDetail {
	if m != nil {
		return m.PoolDetailList
	}
	return nil
}

func (m *GenesisState) GetCurrentEraSnapshotList() []*EraSnapshot {
	if m != nil {
		return m.CurrentEraSnapshotList
	}
	return nil
}

func (m *GenesisState) GetSnapshotList() []*GenesisSnapshot {
	if m != nil {
		return m.SnapshotList
	}
	return nil
}

func (m *GenesisState) GetEraSnapshotList() []*GenesisEraSnapshot {
	if m != nil {
		return m.EraSnapshotList
	}
	return nil
}

func (m *GenesisState) GetChainEraList() []*ChainEra {
	if m != nil {
		return m.ChainEraList
	}
	return nil
}

func (m *GenesisState) GetStakingRewardCommissionList() []*StakingRewardCommission {
	if m != nil {
		return m.StakingRewardCommissionList
	}
	return nil
}

func (m *GenesisState) GetProtocolFeeReceiver() string {
	if m != nil {
		return m.ProtocolFeeReceiver
	}
	return ""
}

func (m *GenesisState) GetRelayFeeReceiverList() []*RelayFeeReceiver {
	if m != nil {
		return m.RelayFeeReceiverList
	}
	return nil
}

func (m *GenesisState) GetTotalExpectedActiveList() []*TotalExpectedActive {
	if m != nil {
		return m.TotalExpectedActiveList
	}
	return nil
}

func (m *GenesisState) GetPoolUnbondingList() []*GenesisPoolUnbonding {
	if m != nil {
		return m.PoolUnbondingList
	}
	return nil
}

func (m *GenesisState) GetUnbondRelayFeeList() []*UnbondRelayFee {
	if m != nil {
		return m.UnbondRelayFeeList
	}
	return nil
}

func (m *GenesisState) GetUnbondCommissionList() []*UnbondCommission {
	if m != nil {
		return m.UnbondCommissionList
	}
	return nil
}

func (m *GenesisState) GetBondRecordList() []*BondRecord {
	if m != nil {
		return m.BondRecordList
	}
	return nil
}

func (m *GenesisState) GetRparamsList() []*RParams {
	if m != nil {
		return m.RparamsList
	}
	return nil
}

type UnbondSwitch struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Switch bool   `protobuf:"varint,2,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (m *UnbondSwitch) Reset()         { *m = UnbondSwitch{} }
func (m *UnbondSwitch) String() string { return proto.CompactTextString(m) }
func (*UnbondSwitch) ProtoMessage()    {}
func (*UnbondSwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{1}
}
func (m *UnbondSwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondSwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondSwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondSwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondSwitch.Merge(m, src)
}
func (m *UnbondSwitch) XXX_Size() int {
	return m.Size()
}
func (m *UnbondSwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondSwitch.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondSwitch proto.InternalMessageInfo

func (m *UnbondSwitch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UnbondSwitch) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

type GenesisEraSnapshot struct {
	Denom   string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era     uint32   `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	ShotIds []string `protobuf:"bytes,3,rep,name=shotIds,proto3" json:"shotIds,omitempty"`
}

func (m *GenesisEraSnapshot) Reset()         { *m = GenesisEraSnapshot{} }
func (m *GenesisEraSnapshot) String() string { return proto.CompactTextString(m) }
func (*GenesisEraSnapshot) ProtoMessage()    {}
func (*GenesisEraSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{2}
}
func (m *GenesisEraSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisEraSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisEraSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisEraSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisEraSnapshot.Merge(m, src)
}
func (m *GenesisEraSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GenesisEraSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisEraSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisEraSnapshot proto.InternalMessageInfo

func (m *GenesisEraSnapshot) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GenesisEraSnapshot) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *GenesisEraSnapshot) GetShotIds() []string {
	if m != nil {
		return m.ShotIds
	}
	return nil
}

type StakingRewardCommission struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Value github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"value"`
}

func (m *StakingRewardCommission) Reset()         { *m = StakingRewardCommission{} }
func (m *StakingRewardCommission) String() string { return proto.CompactTextString(m) }
func (*StakingRewardCommission) ProtoMessage()    {}
func (*StakingRewardCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{3}
}
func (m *StakingRewardCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardCommission.Merge(m, src)
}
func (m *StakingRewardCommission) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardCommission.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardCommission proto.InternalMessageInfo

func (m *StakingRewardCommission) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type UnbondCommission struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Value github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"value"`
}

func (m *UnbondCommission) Reset()         { *m = UnbondCommission{} }
func (m *UnbondCommission) String() string { return proto.CompactTextString(m) }
func (*UnbondCommission) ProtoMessage()    {}
func (*UnbondCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{4}
}
func (m *UnbondCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondCommission.Merge(m, src)
}
func (m *UnbondCommission) XXX_Size() int {
	return m.Size()
}
func (m *UnbondCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondCommission.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondCommission proto.InternalMessageInfo

func (m *UnbondCommission) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type RelayFeeReceiver struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *RelayFeeReceiver) Reset()         { *m = RelayFeeReceiver{} }
func (m *RelayFeeReceiver) String() string { return proto.CompactTextString(m) }
func (*RelayFeeReceiver) ProtoMessage()    {}
func (*RelayFeeReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{5}
}
func (m *RelayFeeReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayFeeReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayFeeReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayFeeReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayFeeReceiver.Merge(m, src)
}
func (m *RelayFeeReceiver) XXX_Size() int {
	return m.Size()
}
func (m *RelayFeeReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayFeeReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_RelayFeeReceiver proto.InternalMessageInfo

func (m *RelayFeeReceiver) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RelayFeeReceiver) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type TotalExpectedActive struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era   uint32                                 `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Value github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"value"`
}

func (m *TotalExpectedActive) Reset()         { *m = TotalExpectedActive{} }
func (m *TotalExpectedActive) String() string { return proto.CompactTextString(m) }
func (*TotalExpectedActive) ProtoMessage()    {}
func (*TotalExpectedActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{6}
}
func (m *TotalExpectedActive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalExpectedActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalExpectedActive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalExpectedActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalExpectedActive.Merge(m, src)
}
func (m *TotalExpectedActive) XXX_Size() int {
	return m.Size()
}
func (m *TotalExpectedActive) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalExpectedActive.DiscardUnknown(m)
}

var xxx_messageInfo_TotalExpectedActive proto.InternalMessageInfo

func (m *TotalExpectedActive) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TotalExpectedActive) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

type GenesisPoolUnbonding struct {
	Denom     string     `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Era       uint32     `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	Pool      string     `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Sequence  uint32     `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Unbonding *Unbonding `protobuf:"bytes,5,opt,name=unbonding,proto3" json:"unbonding,omitempty"`
}

func (m *GenesisPoolUnbonding) Reset()         { *m = GenesisPoolUnbonding{} }
func (m *GenesisPoolUnbonding) String() string { return proto.CompactTextString(m) }
func (*GenesisPoolUnbonding) ProtoMessage()    {}
func (*GenesisPoolUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{7}
}
func (m *GenesisPoolUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPoolUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPoolUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPoolUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPoolUnbonding.Merge(m, src)
}
func (m *GenesisPoolUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPoolUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPoolUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPoolUnbonding proto.InternalMessageInfo

func (m *GenesisPoolUnbonding) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GenesisPoolUnbonding) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *GenesisPoolUnbonding) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *GenesisPoolUnbonding) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *GenesisPoolUnbonding) GetUnbonding() *Unbonding {
	if m != nil {
		return m.Unbonding
	}
	return nil
}

type GenesisSnapshot struct {
	ShotId   string        `protobuf:"bytes,1,opt,name=shotId,proto3" json:"shotId,omitempty"`
	Snapshot *BondSnapshot `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *GenesisSnapshot) Reset()         { *m = GenesisSnapshot{} }
func (m *GenesisSnapshot) String() string { return proto.CompactTextString(m) }
func (*GenesisSnapshot) ProtoMessage()    {}
func (*GenesisSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9841dde51c65fe0e, []int{8}
}
func (m *GenesisSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSnapshot.Merge(m, src)
}
func (m *GenesisSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSnapshot proto.InternalMessageInfo

func (m *GenesisSnapshot) GetShotId() string {
	if m != nil {
		return m.ShotId
	}
	return ""
}

func (m *GenesisSnapshot) GetSnapshot() *BondSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "stafihub.stafihub.ledger.GenesisState")
	proto.RegisterType((*UnbondSwitch)(nil), "stafihub.stafihub.ledger.UnbondSwitch")
	proto.RegisterType((*GenesisEraSnapshot)(nil), "stafihub.stafihub.ledger.GenesisEraSnapshot")
	proto.RegisterType((*StakingRewardCommission)(nil), "stafihub.stafihub.ledger.StakingRewardCommission")
	proto.RegisterType((*UnbondCommission)(nil), "stafihub.stafihub.ledger.UnbondCommission")
	proto.RegisterType((*RelayFeeReceiver)(nil), "stafihub.stafihub.ledger.RelayFeeReceiver")
	proto.RegisterType((*TotalExpectedActive)(nil), "stafihub.stafihub.ledger.TotalExpectedActive")
	proto.RegisterType((*GenesisPoolUnbonding)(nil), "stafihub.stafihub.ledger.GenesisPoolUnbonding")
	proto.RegisterType((*GenesisSnapshot)(nil), "stafihub.stafihub.ledger.GenesisSnapshot")
}

func init() { proto.RegisterFile("ledger/genesis.proto", fileDescriptor_9841dde51c65fe0e) }

var fileDescriptor_9841dde51c65fe0e = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xc7, 0xbd, 0xf1, 0xa7, 0xc6, 0x8a, 0xad, 0x50, 0x6a, 0xb2, 0x70, 0x01, 0xc5, 0x55, 0xdb,
	0x40, 0xfd, 0x88, 0xdc, 0xa6, 0xd7, 0x5e, 0x22, 0x5b, 0x2e, 0x02, 0xb8, 0x80, 0x40, 0xd5, 0x41,
	0xd0, 0x2f, 0x80, 0xde, 0x65, 0x57, 0x44, 0x56, 0x4b, 0x75, 0xc9, 0x75, 0x9c, 0x73, 0x5f, 0xa0,
	0x4f, 0xd1, 0x7b, 0xdf, 0x22, 0xc7, 0x1c, 0x8b, 0x1e, 0x82, 0xc2, 0x7e, 0x91, 0x82, 0x43, 0xad,
	0xb2, 0x5a, 0xed, 0x6a, 0x73, 0xc9, 0x49, 0x24, 0x35, 0xff, 0xdf, 0xcc, 0x90, 0x33, 0xe4, 0x42,
	0x2b, 0xe4, 0x7e, 0xc0, 0xe3, 0xa3, 0x80, 0x47, 0x5c, 0x09, 0xd5, 0x9b, 0xc6, 0x52, 0x4b, 0xe2,
	0x2a, 0xcd, 0x7e, 0x13, 0xe3, 0xe4, 0xa2, 0x37, 0x1f, 0x58, 0xbb, 0x83, 0x56, 0x20, 0x03, 0x89,
	0x46, 0x47, 0x66, 0x64, 0xed, 0x0f, 0x9a, 0x33, 0x8a, 0xfd, 0xb1, 0x8b, 0x9d, 0xbf, 0xf6, 0xa0,
	0xfe, 0x9d, 0xc5, 0x8e, 0x34, 0xd3, 0x9c, 0x3c, 0x83, 0x06, 0xbf, 0xf2, 0xc6, 0x2c, 0x0a, 0x38,
	0x65, 0x9a, 0x9f, 0x09, 0xa5, 0x5d, 0xe7, 0x70, 0xbd, 0xbb, 0xfb, 0xe8, 0x41, 0xaf, 0xcc, 0x61,
	0x6f, 0x90, 0x51, 0xf4, 0x37, 0x5e, 0xbd, 0xb9, 0xbf, 0x46, 0x97, 0x28, 0xe4, 0x27, 0x68, 0xf2,
	0x98, 0x0d, 0xf2, 0xf0, 0x5b, 0x08, 0xff, 0x6c, 0x05, 0x7c, 0x51, 0x44, 0x8b, 0x28, 0xe4, 0x57,
	0x68, 0x69, 0xa9, 0x59, 0x38, 0x34, 0x59, 0x79, 0x32, 0x3c, 0xe5, 0x96, 0xbe, 0x8e, 0xf4, 0xcf,
	0xcb, 0xe9, 0x3f, 0xe4, 0x54, 0xb4, 0x90, 0x43, 0x28, 0x34, 0x92, 0xe8, 0x42, 0x46, 0xfe, 0xe8,
	0x85, 0xd0, 0xde, 0x18, 0xd9, 0x1b, 0x55, 0xdb, 0x72, 0x9e, 0x51, 0xd0, 0x25, 0x3d, 0x39, 0x85,
	0x3d, 0xb3, 0xc2, 0xfd, 0xa1, 0x94, 0x21, 0x12, 0x37, 0x91, 0xd8, 0x2e, 0x27, 0x1a, 0x4b, 0x9a,
	0x53, 0x99, 0xd8, 0xcc, 0xca, 0x50, 0x4c, 0x79, 0x28, 0x22, 0x9b, 0xf7, 0x56, 0x55, 0x6c, 0xfd,
	0x8c, 0x82, 0x2e, 0xe9, 0xc9, 0x33, 0x20, 0x3c, 0x66, 0x36, 0x81, 0x33, 0x31, 0x11, 0x1a, 0xa9,
	0xdb, 0x48, 0xed, 0xae, 0x3c, 0xab, 0x8c, 0x86, 0x16, 0x30, 0xc8, 0x19, 0xec, 0x4d, 0xa5, 0x0c,
	0x4f, 0xb8, 0x66, 0xc2, 0x66, 0xbd, 0x83, 0xd4, 0x4f, 0x56, 0x67, 0x6d, 0xed, 0x69, 0x4e, 0x4b,
	0x7e, 0x81, 0xbb, 0x5e, 0x12, 0xc7, 0x3c, 0xd2, 0x83, 0x98, 0x8d, 0x22, 0x36, 0x55, 0x63, 0x69,
	0x63, 0xad, 0x21, 0xf5, 0xd3, 0x95, 0xb1, 0xa6, 0x02, 0x5a, 0x02, 0x21, 0xdf, 0x43, 0x5d, 0x65,
	0xa1, 0x50, 0x55, 0xac, 0x69, 0x2f, 0xa5, 0xe0, 0x05, 0x39, 0x79, 0x0a, 0xfb, 0x3c, 0x17, 0xe6,
	0x2e, 0x12, 0xbf, 0xac, 0x24, 0x66, 0xa3, 0xcd, 0x43, 0xc8, 0x29, 0xd4, 0xbd, 0x31, 0x13, 0xd1,
	0x20, 0x66, 0x08, 0xad, 0x23, 0xb4, 0x53, 0x0e, 0x3d, 0x9e, 0x59, 0xd3, 0x05, 0x1d, 0x51, 0xf0,
	0xa1, 0xd2, 0xec, 0xb9, 0x88, 0x02, 0xca, 0x5f, 0xb0, 0xd8, 0x3f, 0x96, 0x93, 0x89, 0x50, 0x4a,
	0xc8, 0x08, 0xb1, 0xb7, 0x11, 0xfb, 0x75, 0x39, 0x76, 0x54, 0x2c, 0xa6, 0xab, 0xa8, 0xe4, 0x2b,
	0x68, 0x4e, 0x33, 0xfd, 0xc7, 0x3d, 0x2e, 0x2e, 0x79, 0xec, 0xee, 0x1d, 0x3a, 0xdd, 0x1a, 0x2d,
	0xfa, 0xcb, 0x34, 0x7b, 0xcc, 0x43, 0xf6, 0x32, 0xb3, 0x86, 0xf1, 0xed, 0x57, 0x35, 0x3b, 0xcd,
	0xa9, 0x68, 0x21, 0x87, 0x04, 0x70, 0x0f, 0x2f, 0x81, 0xc1, 0xd5, 0x94, 0x7b, 0x9a, 0xfb, 0x8f,
	0x3d, 0x2d, 0x2e, 0x6d, 0x5f, 0x35, 0xd0, 0xc5, 0xc3, 0x8a, 0xfb, 0x64, 0x51, 0x48, 0xcb, 0x68,
	0xe4, 0x67, 0xb8, 0x63, 0xea, 0xd9, 0xb6, 0x88, 0x88, 0x02, 0x74, 0x71, 0x07, 0x5d, 0xf4, 0x2a,
	0x2b, 0x62, 0x98, 0x55, 0xd2, 0x65, 0x90, 0xe9, 0x61, 0x7b, 0xe7, 0xa4, 0x69, 0x23, 0x9e, 0x54,
	0xf5, 0xf0, 0xf9, 0x82, 0x86, 0x16, 0x30, 0xcc, 0x01, 0xd8, 0xd5, 0x5c, 0x81, 0x34, 0xab, 0x0e,
	0xe0, 0x3c, 0xa7, 0xa2, 0x85, 0x1c, 0x73, 0x47, 0x58, 0x9f, 0x9e, 0x8c, 0x7d, 0x24, 0xb7, 0xaa,
	0xee, 0x88, 0xfe, 0xdc, 0x9e, 0xe6, 0xb4, 0xe4, 0x18, 0x76, 0xe3, 0x29, 0x8b, 0xd9, 0x44, 0x21,
	0xea, 0x03, 0x44, 0x7d, 0xb4, 0xa2, 0x4a, 0x86, 0x68, 0x4c, 0xb3, 0xaa, 0xce, 0xb7, 0x50, 0xcf,
	0x5e, 0xe7, 0xa4, 0x05, 0x9b, 0x3e, 0x8f, 0xe4, 0xc4, 0x75, 0xb0, 0x4e, 0xed, 0x84, 0xdc, 0x85,
	0x2d, 0x85, 0xff, 0xbb, 0xb7, 0x0e, 0x9d, 0xee, 0x0e, 0x9d, 0xcd, 0x3a, 0x4f, 0x81, 0x2c, 0xf7,
	0x71, 0x09, 0xa3, 0x01, 0xeb, 0x3c, 0x66, 0x08, 0xb8, 0x4d, 0xcd, 0x90, 0xb8, 0xb0, 0x6d, 0xec,
	0x9f, 0xf8, 0x0a, 0xdf, 0xb3, 0x1a, 0x4d, 0xa7, 0x9d, 0x04, 0xee, 0x95, 0xf4, 0x5c, 0x09, 0xfc,
	0x04, 0x36, 0x2f, 0x59, 0x98, 0x70, 0xc4, 0xd7, 0xfa, 0x3d, 0xf3, 0x56, 0xff, 0xfb, 0xe6, 0xfe,
	0x83, 0x40, 0x68, 0xb3, 0x03, 0x9e, 0x9c, 0x1c, 0xa5, 0xdb, 0xf1, 0x76, 0x90, 0x68, 0x11, 0xaa,
	0xde, 0x09, 0xf7, 0xa8, 0x15, 0x77, 0x22, 0x68, 0xe4, 0x4f, 0xf2, 0xbd, 0xfa, 0xeb, 0x43, 0x23,
	0xdf, 0xba, 0x25, 0xfe, 0x5c, 0xd8, 0x66, 0xbe, 0x1f, 0x73, 0xa5, 0xac, 0x47, 0x9a, 0x4e, 0x3b,
	0x7f, 0x38, 0xd0, 0x2c, 0x68, 0xce, 0x77, 0x3e, 0x84, 0x79, 0x26, 0xeb, 0xa5, 0x99, 0x78, 0x52,
	0x4d, 0xa4, 0x9a, 0xfd, 0x3c, 0x54, 0xfe, 0xf3, 0x23, 0xfd, 0x72, 0xca, 0x55, 0xef, 0x49, 0xa4,
	0xd3, 0x4c, 0xfe, 0x76, 0xa0, 0x55, 0xd4, 0xbf, 0xef, 0x1c, 0x06, 0x81, 0x0d, 0xd3, 0xe9, 0x36,
	0x0a, 0x8a, 0x63, 0x72, 0x00, 0x3b, 0x8a, 0xff, 0x9e, 0xf0, 0xc8, 0xe3, 0xee, 0x06, 0x9a, 0xce,
	0xe7, 0xe4, 0x31, 0xd4, 0x92, 0xd4, 0x89, 0xbb, 0x79, 0xe8, 0x74, 0x77, 0x1f, 0x7d, 0x5c, 0xd5,
	0x9f, 0xa6, 0x9c, 0xde, 0xaa, 0x3a, 0x13, 0xd8, 0xcf, 0x3d, 0x6b, 0x58, 0xe7, 0x58, 0x82, 0xb3,
	0x70, 0x67, 0x33, 0xd2, 0x87, 0x9d, 0xf4, 0xc1, 0xc3, 0xa0, 0x2b, 0x3f, 0x41, 0xe6, 0x6f, 0xda,
	0x5c, 0xd7, 0x1f, 0xbc, 0xba, 0x6e, 0x3b, 0xaf, 0xaf, 0xdb, 0xce, 0x7f, 0xd7, 0x6d, 0xe7, 0xcf,
	0x9b, 0xf6, 0xda, 0xeb, 0x9b, 0xf6, 0xda, 0x3f, 0x37, 0xed, 0xb5, 0x1f, 0xbf, 0x58, 0x59, 0x35,
	0x57, 0xb3, 0x2f, 0x5b, 0xbb, 0xe9, 0x17, 0x5b, 0xf8, 0x72, 0x7c, 0xf3, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x16, 0x32, 0xa9, 0x75, 0x3d, 0x0b, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RparamsList) > 0 {
		for iNdEx := len(m.RparamsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RparamsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.BondRecordList) > 0 {
		for iNdEx := len(m.BondRecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondRecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.UnbondCommissionList) > 0 {
		for iNdEx := len(m.UnbondCommissionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondCommissionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.UnbondRelayFeeList) > 0 {
		for iNdEx := len(m.UnbondRelayFeeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondRelayFeeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.PoolUnbondingList) > 0 {
		for iNdEx := len(m.PoolUnbondingList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolUnbondingList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.TotalExpectedActiveList) > 0 {
		for iNdEx := len(m.TotalExpectedActiveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalExpectedActiveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.RelayFeeReceiverList) > 0 {
		for iNdEx := len(m.RelayFeeReceiverList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayFeeReceiverList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ProtocolFeeReceiver) > 0 {
		i -= len(m.ProtocolFeeReceiver)
		copy(dAtA[i:], m.ProtocolFeeReceiver)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ProtocolFeeReceiver)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StakingRewardCommissionList) > 0 {
		for iNdEx := len(m.StakingRewardCommissionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingRewardCommissionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.ChainEraList) > 0 {
		for iNdEx := len(m.ChainEraList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainEraList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.EraSnapshotList) > 0 {
		for iNdEx := len(m.EraSnapshotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraSnapshotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.SnapshotList) > 0 {
		for iNdEx := len(m.SnapshotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnapshotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CurrentEraSnapshotList) > 0 {
		for iNdEx := len(m.CurrentEraSnapshotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentEraSnapshotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PoolDetailList) > 0 {
		for iNdEx := len(m.PoolDetailList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolDetailList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.EraUnbondLimitList) > 0 {
		for iNdEx := len(m.EraUnbondLimitList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraUnbondLimitList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BondPipelineList) > 0 {
		for iNdEx := len(m.BondPipelineList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondPipelineList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BondedPoolList) > 0 {
		for iNdEx := len(m.BondedPoolList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondedPoolList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UnbondSwitchList) > 0 {
		for iNdEx := len(m.UnbondSwitchList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondSwitchList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TotalProtocolFeeList) > 0 {
		for iNdEx := len(m.TotalProtocolFeeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalProtocolFeeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EraExchangeRateList) > 0 {
		for iNdEx := len(m.EraExchangeRateList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraExchangeRateList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExchangeRateList) > 0 {
		for iNdEx := len(m.ExchangeRateList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRateList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnbondSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondSwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondSwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Switch {
		i--
		if m.Switch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisEraSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisEraSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisEraSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShotIds) > 0 {
		for iNdEx := len(m.ShotIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShotIds[iNdEx])
			copy(dAtA[i:], m.ShotIds[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.ShotIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Era != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayFeeReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayFeeReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayFeeReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalExpectedActive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalExpectedActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalExpectedActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Era != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisPoolUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPoolUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPoolUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unbonding != nil {
		{
			size, err := m.Unbonding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Era != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShotId) > 0 {
		i -= len(m.ShotId)
		copy(dAtA[i:], m.ShotId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ShotId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRateList) > 0 {
		for _, e := range m.ExchangeRateList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EraExchangeRateList) > 0 {
		for _, e := range m.EraExchangeRateList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TotalProtocolFeeList) > 0 {
		for _, e := range m.TotalProtocolFeeList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondSwitchList) > 0 {
		for _, e := range m.UnbondSwitchList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BondedPoolList) > 0 {
		for _, e := range m.BondedPoolList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BondPipelineList) > 0 {
		for _, e := range m.BondPipelineList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EraUnbondLimitList) > 0 {
		for _, e := range m.EraUnbondLimitList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolDetailList) > 0 {
		for _, e := range m.PoolDetailList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CurrentEraSnapshotList) > 0 {
		for _, e := range m.CurrentEraSnapshotList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SnapshotList) > 0 {
		for _, e := range m.SnapshotList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EraSnapshotList) > 0 {
		for _, e := range m.EraSnapshotList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainEraList) > 0 {
		for _, e := range m.ChainEraList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakingRewardCommissionList) > 0 {
		for _, e := range m.StakingRewardCommissionList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.ProtocolFeeReceiver)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RelayFeeReceiverList) > 0 {
		for _, e := range m.RelayFeeReceiverList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TotalExpectedActiveList) > 0 {
		for _, e := range m.TotalExpectedActiveList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolUnbondingList) > 0 {
		for _, e := range m.PoolUnbondingList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondRelayFeeList) > 0 {
		for _, e := range m.UnbondRelayFeeList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondCommissionList) > 0 {
		for _, e := range m.UnbondCommissionList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BondRecordList) > 0 {
		for _, e := range m.BondRecordList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RparamsList) > 0 {
		for _, e := range m.RparamsList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UnbondSwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Switch {
		n += 2
	}
	return n
}

func (m *GenesisEraSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovGenesis(uint64(m.Era))
	}
	if len(m.ShotIds) > 0 {
		for _, s := range m.ShotIds {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *StakingRewardCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UnbondCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *RelayFeeReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *TotalExpectedActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovGenesis(uint64(m.Era))
	}
	l = m.Value.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisPoolUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovGenesis(uint64(m.Era))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovGenesis(uint64(m.Sequence))
	}
	if m.Unbonding != nil {
		l = m.Unbonding.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShotId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRateList = append(m.ExchangeRateList, ExchangeRate{})
			if err := m.ExchangeRateList[len(m.ExchangeRateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraExchangeRateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraExchangeRateList = append(m.EraExchangeRateList, &EraExchangeRate{})
			if err := m.EraExchangeRateList[len(m.EraExchangeRateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProtocolFeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalProtocolFeeList = append(m.TotalProtocolFeeList, &TotalProtocolFee{})
			if err := m.TotalProtocolFeeList[len(m.TotalProtocolFeeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondSwitchList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondSwitchList = append(m.UnbondSwitchList, &UnbondSwitch{})
			if err := m.UnbondSwitchList[len(m.UnbondSwitchList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondedPoolList = append(m.BondedPoolList, &Pool{})
			if err := m.BondedPoolList[len(m.BondedPoolList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondPipelineList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondPipelineList = append(m.BondPipelineList, &BondPipeline{})
			if err := m.BondPipelineList[len(m.BondPipelineList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraUnbondLimitList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraUnbondLimitList = append(m.EraUnbondLimitList, &EraUnbondLimit{})
			if err := m.EraUnbondLimitList[len(m.EraUnbondLimitList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolDetailList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolDetailList = append(m.PoolDetailList, &PoolDetail{})
			if err := m.PoolDetailList[len(m.PoolDetailList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEraSnapshotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentEraSnapshotList = append(m.CurrentEraSnapshotList, &EraSnapshot{})
			if err := m.CurrentEraSnapshotList[len(m.CurrentEraSnapshotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotList = append(m.SnapshotList, &GenesisSnapshot{})
			if err := m.SnapshotList[len(m.SnapshotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraSnapshotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraSnapshotList = append(m.EraSnapshotList, &GenesisEraSnapshot{})
			if err := m.EraSnapshotList[len(m.EraSnapshotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainEraList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainEraList = append(m.ChainEraList, &ChainEra{})
			if err := m.ChainEraList[len(m.ChainEraList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewardCommissionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingRewardCommissionList = append(m.StakingRewardCommissionList, &StakingRewardCommission{})
			if err := m.StakingRewardCommissionList[len(m.StakingRewardCommissionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolFeeReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayFeeReceiverList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayFeeReceiverList = append(m.RelayFeeReceiverList, &RelayFeeReceiver{})
			if err := m.RelayFeeReceiverList[len(m.RelayFeeReceiverList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExpectedActiveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalExpectedActiveList = append(m.TotalExpectedActiveList, &TotalExpectedActive{})
			if err := m.TotalExpectedActiveList[len(m.TotalExpectedActiveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnbondingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolUnbondingList = append(m.PoolUnbondingList, &GenesisPoolUnbonding{})
			if err := m.PoolUnbondingList[len(m.PoolUnbondingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondRelayFeeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondRelayFeeList = append(m.UnbondRelayFeeList, &UnbondRelayFee{})
			if err := m.UnbondRelayFeeList[len(m.UnbondRelayFeeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondCommissionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondCommissionList = append(m.UnbondCommissionList, &UnbondCommission{})
			if err := m.UnbondCommissionList[len(m.UnbondCommissionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondRecordList = append(m.BondRecordList, &BondRecord{})
			if err := m.BondRecordList[len(m.BondRecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RparamsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RparamsList = append(m.RparamsList, &RParams{})
			if err := m.RparamsList[len(m.RparamsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Switch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisEraSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisEraSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisEraSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotIds = append(m.ShotIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayFeeReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayFeeReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayFeeReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalExpectedActive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalExpectedActive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalExpectedActive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisPoolUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisPoolUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisPoolUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbonding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unbonding == nil {
				m.Unbonding = &Unbonding{}
			}
			if err := m.Unbonding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &BondSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
