// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rdex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QuerySwapPoolInfoRequest struct {
	LpDenom string `protobuf:"bytes,1,opt,name=lpDenom,proto3" json:"lpDenom,omitempty"`
}

func (m *QuerySwapPoolInfoRequest) Reset()         { *m = QuerySwapPoolInfoRequest{} }
func (m *QuerySwapPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwapPoolInfoRequest) ProtoMessage()    {}
func (*QuerySwapPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{2}
}
func (m *QuerySwapPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapPoolInfoRequest.Merge(m, src)
}
func (m *QuerySwapPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapPoolInfoRequest proto.InternalMessageInfo

func (m *QuerySwapPoolInfoRequest) GetLpDenom() string {
	if m != nil {
		return m.LpDenom
	}
	return ""
}

type QuerySwapPoolInfoResponse struct {
	SwapPool *SwapPool `protobuf:"bytes,1,opt,name=swapPool,proto3" json:"swapPool,omitempty"`
}

func (m *QuerySwapPoolInfoResponse) Reset()         { *m = QuerySwapPoolInfoResponse{} }
func (m *QuerySwapPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwapPoolInfoResponse) ProtoMessage()    {}
func (*QuerySwapPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{3}
}
func (m *QuerySwapPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapPoolInfoResponse.Merge(m, src)
}
func (m *QuerySwapPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapPoolInfoResponse proto.InternalMessageInfo

func (m *QuerySwapPoolInfoResponse) GetSwapPool() *SwapPool {
	if m != nil {
		return m.SwapPool
	}
	return nil
}

type QuerySwapPoolListRequest struct {
}

func (m *QuerySwapPoolListRequest) Reset()         { *m = QuerySwapPoolListRequest{} }
func (m *QuerySwapPoolListRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwapPoolListRequest) ProtoMessage()    {}
func (*QuerySwapPoolListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{4}
}
func (m *QuerySwapPoolListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapPoolListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapPoolListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapPoolListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapPoolListRequest.Merge(m, src)
}
func (m *QuerySwapPoolListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapPoolListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapPoolListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapPoolListRequest proto.InternalMessageInfo

type QuerySwapPoolListResponse struct {
	SwapPoolList []*SwapPool `protobuf:"bytes,1,rep,name=swapPoolList,proto3" json:"swapPoolList,omitempty"`
}

func (m *QuerySwapPoolListResponse) Reset()         { *m = QuerySwapPoolListResponse{} }
func (m *QuerySwapPoolListResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwapPoolListResponse) ProtoMessage()    {}
func (*QuerySwapPoolListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{5}
}
func (m *QuerySwapPoolListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwapPoolListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwapPoolListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwapPoolListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwapPoolListResponse.Merge(m, src)
}
func (m *QuerySwapPoolListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwapPoolListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwapPoolListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwapPoolListResponse proto.InternalMessageInfo

func (m *QuerySwapPoolListResponse) GetSwapPoolList() []*SwapPool {
	if m != nil {
		return m.SwapPoolList
	}
	return nil
}

type QueryProviderListRequest struct {
}

func (m *QueryProviderListRequest) Reset()         { *m = QueryProviderListRequest{} }
func (m *QueryProviderListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderListRequest) ProtoMessage()    {}
func (*QueryProviderListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{6}
}
func (m *QueryProviderListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderListRequest.Merge(m, src)
}
func (m *QueryProviderListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderListRequest proto.InternalMessageInfo

type QueryProviderListResponse struct {
	ProviderList []string `protobuf:"bytes,1,rep,name=providerList,proto3" json:"providerList,omitempty"`
}

func (m *QueryProviderListResponse) Reset()         { *m = QueryProviderListResponse{} }
func (m *QueryProviderListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderListResponse) ProtoMessage()    {}
func (*QueryProviderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{7}
}
func (m *QueryProviderListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderListResponse.Merge(m, src)
}
func (m *QueryProviderListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderListResponse proto.InternalMessageInfo

func (m *QueryProviderListResponse) GetProviderList() []string {
	if m != nil {
		return m.ProviderList
	}
	return nil
}

type QueryPoolCreatorListRequest struct {
}

func (m *QueryPoolCreatorListRequest) Reset()         { *m = QueryPoolCreatorListRequest{} }
func (m *QueryPoolCreatorListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolCreatorListRequest) ProtoMessage()    {}
func (*QueryPoolCreatorListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{8}
}
func (m *QueryPoolCreatorListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolCreatorListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolCreatorListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolCreatorListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolCreatorListRequest.Merge(m, src)
}
func (m *QueryPoolCreatorListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolCreatorListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolCreatorListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolCreatorListRequest proto.InternalMessageInfo

type QueryPoolCreatorListResponse struct {
	PoolCreatorList []string `protobuf:"bytes,1,rep,name=poolCreatorList,proto3" json:"poolCreatorList,omitempty"`
}

func (m *QueryPoolCreatorListResponse) Reset()         { *m = QueryPoolCreatorListResponse{} }
func (m *QueryPoolCreatorListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolCreatorListResponse) ProtoMessage()    {}
func (*QueryPoolCreatorListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aba77cce02ad22b2, []int{9}
}
func (m *QueryPoolCreatorListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolCreatorListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolCreatorListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolCreatorListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolCreatorListResponse.Merge(m, src)
}
func (m *QueryPoolCreatorListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolCreatorListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolCreatorListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolCreatorListResponse proto.InternalMessageInfo

func (m *QueryPoolCreatorListResponse) GetPoolCreatorList() []string {
	if m != nil {
		return m.PoolCreatorList
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "stafihub.stafihub.rdex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stafihub.stafihub.rdex.QueryParamsResponse")
	proto.RegisterType((*QuerySwapPoolInfoRequest)(nil), "stafihub.stafihub.rdex.QuerySwapPoolInfoRequest")
	proto.RegisterType((*QuerySwapPoolInfoResponse)(nil), "stafihub.stafihub.rdex.QuerySwapPoolInfoResponse")
	proto.RegisterType((*QuerySwapPoolListRequest)(nil), "stafihub.stafihub.rdex.QuerySwapPoolListRequest")
	proto.RegisterType((*QuerySwapPoolListResponse)(nil), "stafihub.stafihub.rdex.QuerySwapPoolListResponse")
	proto.RegisterType((*QueryProviderListRequest)(nil), "stafihub.stafihub.rdex.QueryProviderListRequest")
	proto.RegisterType((*QueryProviderListResponse)(nil), "stafihub.stafihub.rdex.QueryProviderListResponse")
	proto.RegisterType((*QueryPoolCreatorListRequest)(nil), "stafihub.stafihub.rdex.QueryPoolCreatorListRequest")
	proto.RegisterType((*QueryPoolCreatorListResponse)(nil), "stafihub.stafihub.rdex.QueryPoolCreatorListResponse")
}

func init() { proto.RegisterFile("rdex/query.proto", fileDescriptor_aba77cce02ad22b2) }

var fileDescriptor_aba77cce02ad22b2 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0xc6, 0x7d, 0xfc, 0x31, 0x64, 0xb1, 0x14, 0x58, 0x22, 0x64, 0x8e, 0x70, 0x58, 0x2b, 0x11,
	0x9c, 0x44, 0xf8, 0x62, 0x27, 0x05, 0x05, 0x12, 0x52, 0x92, 0x02, 0x24, 0x0a, 0xe3, 0x54, 0xd0,
	0x44, 0x6b, 0x7b, 0x7d, 0x9c, 0x74, 0xbe, 0xd9, 0xdc, 0xae, 0x43, 0x22, 0x44, 0x43, 0x47, 0x87,
	0xc4, 0x1b, 0x40, 0x8d, 0x78, 0x05, 0xca, 0x94, 0x91, 0x68, 0xa8, 0x10, 0xb2, 0x79, 0x10, 0x74,
	0xbb, 0x6b, 0x73, 0x67, 0xee, 0x62, 0xa7, 0x5b, 0xcf, 0xcc, 0x37, 0xdf, 0xcf, 0x33, 0x63, 0xa3,
	0xeb, 0x51, 0x97, 0x1d, 0xb9, 0x07, 0x03, 0x16, 0x1d, 0xd7, 0x78, 0x04, 0x12, 0xf0, 0x2d, 0x21,
	0x69, 0xcf, 0x7f, 0x3d, 0x68, 0xd7, 0x26, 0x8f, 0xb8, 0xc6, 0x5e, 0xf2, 0xc0, 0x03, 0x55, 0xe2,
	0xc6, 0x2f, 0x5d, 0x6d, 0x2f, 0x7b, 0x00, 0x5e, 0xc0, 0x5c, 0xca, 0x7d, 0x97, 0x86, 0x21, 0x48,
	0x2a, 0x7d, 0x08, 0x85, 0xc9, 0xae, 0x75, 0x40, 0xf4, 0x41, 0xb8, 0x6d, 0x2a, 0x98, 0x36, 0x71,
	0x0f, 0xeb, 0x6d, 0x26, 0x69, 0xdd, 0xe5, 0xd4, 0xf3, 0x43, 0x55, 0x6c, 0x6a, 0x6f, 0x28, 0x12,
	0x4e, 0x23, 0xda, 0x17, 0xa9, 0x50, 0x1f, 0xba, 0x2c, 0x30, 0x21, 0xb2, 0x84, 0xf0, 0x8b, 0xb8,
	0x4f, 0x53, 0xd5, 0xb5, 0xd8, 0xc1, 0x80, 0x09, 0x49, 0xf6, 0xd0, 0xcd, 0x54, 0x54, 0x70, 0x08,
	0x05, 0xc3, 0x8f, 0x51, 0x51, 0xf7, 0x2b, 0x5b, 0x15, 0xab, 0x7a, 0xad, 0xe1, 0xd4, 0xb2, 0xbf,
	0x5b, 0x4d, 0xeb, 0xb6, 0x2f, 0x9d, 0xfc, 0xba, 0x57, 0x68, 0x19, 0x0d, 0xd9, 0x42, 0x65, 0xd5,
	0x74, 0xef, 0x0d, 0xe5, 0x4d, 0x80, 0xe0, 0x59, 0xd8, 0x03, 0x63, 0x88, 0xcb, 0xe8, 0x4a, 0xc0,
	0x77, 0x59, 0x08, 0x7d, 0xd5, 0x7a, 0xa1, 0x35, 0xfe, 0x48, 0x5e, 0xa2, 0xdb, 0x19, 0xaa, 0x09,
	0xd0, 0x55, 0x61, 0xe2, 0x06, 0xa9, 0x92, 0x87, 0x34, 0xd6, 0xb7, 0x26, 0x0a, 0x62, 0x4f, 0x01,
	0x3d, 0xf7, 0x85, 0x1c, 0x4f, 0x80, 0x4e, 0xd9, 0xea, 0x9c, 0xb1, 0xdd, 0x45, 0x25, 0x91, 0x88,
	0x97, 0xad, 0xca, 0xc5, 0xb9, 0xac, 0x53, 0xaa, 0x89, 0x7d, 0x33, 0x82, 0x43, 0xbf, 0xcb, 0xa2,
	0xa4, 0xfd, 0x13, 0x63, 0x9f, 0xce, 0x19, 0x7b, 0x82, 0x4a, 0x3c, 0x11, 0x57, 0xf6, 0x0b, 0xad,
	0x54, 0x8c, 0xdc, 0x45, 0x77, 0x74, 0x03, 0x80, 0x60, 0x27, 0x62, 0x54, 0x42, 0xaa, 0xff, 0x53,
	0xb4, 0x9c, 0x9d, 0x36, 0x16, 0x55, 0xb4, 0xc8, 0xd3, 0x29, 0xe3, 0x32, 0x1d, 0x6e, 0x7c, 0x2f,
	0xa2, 0xcb, 0xaa, 0x15, 0xfe, 0x60, 0xa1, 0xa2, 0x5e, 0x3c, 0x5e, 0xcb, 0x1b, 0xc5, 0xff, 0xb7,
	0x66, 0xaf, 0xcf, 0x55, 0xab, 0xb9, 0xc8, 0xca, 0xfb, 0x1f, 0x7f, 0x3e, 0x5d, 0xa8, 0x60, 0xc7,
	0x1d, 0xd7, 0xfe, 0x7b, 0x24, 0xee, 0x1d, 0x7f, 0xb5, 0x50, 0x29, 0x79, 0x31, 0x78, 0xe3, 0x4c,
	0x97, 0x8c, 0x93, 0xb4, 0xeb, 0xe7, 0x50, 0x18, 0xba, 0x47, 0x8a, 0xae, 0x81, 0x37, 0xf2, 0xe8,
	0xe2, 0xfd, 0xef, 0xc7, 0x13, 0xdc, 0xf7, 0xc3, 0x1e, 0xb8, 0x6f, 0xcd, 0x91, 0xbf, 0xc3, 0x5f,
	0x12, 0xbc, 0xf1, 0x58, 0xe7, 0xe4, 0x4d, 0xac, 0x74, 0x4e, 0xde, 0xe4, 0x96, 0x49, 0x4d, 0xf1,
	0x56, 0xf1, 0xca, 0x6c, 0xde, 0x20, 0x86, 0xfa, 0x6c, 0xa1, 0x52, 0xf2, 0x22, 0x67, 0x50, 0x66,
	0x1c, 0xf6, 0x0c, 0xca, 0xac, 0x73, 0x27, 0x0f, 0x15, 0xe5, 0x03, 0x7c, 0x3f, 0x77, 0xe7, 0x46,
	0xa5, 0x21, 0xbf, 0x59, 0x68, 0x71, 0xea, 0xac, 0xf1, 0xe6, 0xd9, 0xae, 0x99, 0xbf, 0x11, 0x7b,
	0xeb, 0x7c, 0x22, 0x43, 0x5b, 0x57, 0xb4, 0xeb, 0x78, 0x35, 0x97, 0x36, 0x1e, 0x67, 0x47, 0x2b,
	0x15, 0xf1, 0xf6, 0xce, 0xc9, 0xd0, 0xb1, 0x4e, 0x87, 0x8e, 0xf5, 0x7b, 0xe8, 0x58, 0x1f, 0x47,
	0x4e, 0xe1, 0x74, 0xe4, 0x14, 0x7e, 0x8e, 0x9c, 0xc2, 0xab, 0x55, 0xcf, 0x97, 0xb1, 0x6d, 0x07,
	0xfa, 0x19, 0xed, 0x8e, 0x74, 0x43, 0x79, 0xcc, 0x99, 0x68, 0x17, 0xd5, 0xff, 0xf9, 0xe6, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0xbb, 0xf8, 0x38, 0x81, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of SwapPoolInfo items.
	SwapPoolInfo(ctx context.Context, in *QuerySwapPoolInfoRequest, opts ...grpc.CallOption) (*QuerySwapPoolInfoResponse, error)
	// Queries a list of SwapPoolList items.
	SwapPoolList(ctx context.Context, in *QuerySwapPoolListRequest, opts ...grpc.CallOption) (*QuerySwapPoolListResponse, error)
	// Queries a list of ProviderList items.
	ProviderList(ctx context.Context, in *QueryProviderListRequest, opts ...grpc.CallOption) (*QueryProviderListResponse, error)
	// Queries a list of PoolCreatorList items.
	PoolCreatorList(ctx context.Context, in *QueryPoolCreatorListRequest, opts ...grpc.CallOption) (*QueryPoolCreatorListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rdex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapPoolInfo(ctx context.Context, in *QuerySwapPoolInfoRequest, opts ...grpc.CallOption) (*QuerySwapPoolInfoResponse, error) {
	out := new(QuerySwapPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rdex.Query/SwapPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapPoolList(ctx context.Context, in *QuerySwapPoolListRequest, opts ...grpc.CallOption) (*QuerySwapPoolListResponse, error) {
	out := new(QuerySwapPoolListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rdex.Query/SwapPoolList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderList(ctx context.Context, in *QueryProviderListRequest, opts ...grpc.CallOption) (*QueryProviderListResponse, error) {
	out := new(QueryProviderListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rdex.Query/ProviderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolCreatorList(ctx context.Context, in *QueryPoolCreatorListRequest, opts ...grpc.CallOption) (*QueryPoolCreatorListResponse, error) {
	out := new(QueryPoolCreatorListResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.rdex.Query/PoolCreatorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of SwapPoolInfo items.
	SwapPoolInfo(context.Context, *QuerySwapPoolInfoRequest) (*QuerySwapPoolInfoResponse, error)
	// Queries a list of SwapPoolList items.
	SwapPoolList(context.Context, *QuerySwapPoolListRequest) (*QuerySwapPoolListResponse, error)
	// Queries a list of ProviderList items.
	ProviderList(context.Context, *QueryProviderListRequest) (*QueryProviderListResponse, error)
	// Queries a list of PoolCreatorList items.
	PoolCreatorList(context.Context, *QueryPoolCreatorListRequest) (*QueryPoolCreatorListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SwapPoolInfo(ctx context.Context, req *QuerySwapPoolInfoRequest) (*QuerySwapPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPoolInfo not implemented")
}
func (*UnimplementedQueryServer) SwapPoolList(ctx context.Context, req *QuerySwapPoolListRequest) (*QuerySwapPoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPoolList not implemented")
}
func (*UnimplementedQueryServer) ProviderList(ctx context.Context, req *QueryProviderListRequest) (*QueryProviderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderList not implemented")
}
func (*UnimplementedQueryServer) PoolCreatorList(ctx context.Context, req *QueryPoolCreatorListRequest) (*QueryPoolCreatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolCreatorList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rdex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rdex.Query/SwapPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapPoolInfo(ctx, req.(*QuerySwapPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapPoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rdex.Query/SwapPoolList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapPoolList(ctx, req.(*QuerySwapPoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rdex.Query/ProviderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderList(ctx, req.(*QueryProviderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolCreatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolCreatorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolCreatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.rdex.Query/PoolCreatorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolCreatorList(ctx, req.(*QueryPoolCreatorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.rdex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SwapPoolInfo",
			Handler:    _Query_SwapPoolInfo_Handler,
		},
		{
			MethodName: "SwapPoolList",
			Handler:    _Query_SwapPoolList_Handler,
		},
		{
			MethodName: "ProviderList",
			Handler:    _Query_ProviderList_Handler,
		},
		{
			MethodName: "PoolCreatorList",
			Handler:    _Query_PoolCreatorList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rdex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySwapPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LpDenom) > 0 {
		i -= len(m.LpDenom)
		copy(dAtA[i:], m.LpDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LpDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapPool != nil {
		{
			size, err := m.SwapPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwapPoolListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapPoolListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapPoolListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySwapPoolListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwapPoolListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwapPoolListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapPoolList) > 0 {
		for iNdEx := len(m.SwapPoolList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapPoolList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProviderListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderList) > 0 {
		for iNdEx := len(m.ProviderList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProviderList[iNdEx])
			copy(dAtA[i:], m.ProviderList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolCreatorListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolCreatorListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolCreatorListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolCreatorListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolCreatorListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolCreatorListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolCreatorList) > 0 {
		for iNdEx := len(m.PoolCreatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PoolCreatorList[iNdEx])
			copy(dAtA[i:], m.PoolCreatorList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolCreatorList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySwapPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LpDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwapPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapPool != nil {
		l = m.SwapPool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwapPoolListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySwapPoolListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwapPoolList) > 0 {
		for _, e := range m.SwapPoolList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProviderListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProviderListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProviderList) > 0 {
		for _, s := range m.ProviderList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolCreatorListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolCreatorListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolCreatorList) > 0 {
		for _, s := range m.PoolCreatorList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapPool == nil {
				m.SwapPool = &SwapPool{}
			}
			if err := m.SwapPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapPoolListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapPoolListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapPoolListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwapPoolListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwapPoolListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwapPoolListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapPoolList = append(m.SwapPoolList, &SwapPool{})
			if err := m.SwapPoolList[len(m.SwapPoolList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderList = append(m.ProviderList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolCreatorListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolCreatorListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolCreatorListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolCreatorListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolCreatorListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolCreatorListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreatorList = append(m.PoolCreatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
