// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mining/models.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_stafihub_stafihub_utils "github.com/stafihub/stafihub/utils"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakePool struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staked token denom
	StakeTokenDenom string        `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	RewardPools     []*RewardPool `protobuf:"bytes,3,rep,name=rewardPools,proto3" json:"rewardPools,omitempty"`
	// total (staked) balance of staked token
	TotalStakedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=totalStakedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalStakedAmount"`
	TotalStakedPower  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=totalStakedPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalStakedPower"`
}

func (m *StakePool) Reset()         { *m = StakePool{} }
func (m *StakePool) String() string { return proto.CompactTextString(m) }
func (*StakePool) ProtoMessage()    {}
func (*StakePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{0}
}
func (m *StakePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakePool.Merge(m, src)
}
func (m *StakePool) XXX_Size() int {
	return m.Size()
}
func (m *StakePool) XXX_DiscardUnknown() {
	xxx_messageInfo_StakePool.DiscardUnknown(m)
}

var xxx_messageInfo_StakePool proto.InternalMessageInfo

func (m *StakePool) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *StakePool) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *StakePool) GetRewardPools() []*RewardPool {
	if m != nil {
		return m.RewardPools
	}
	return nil
}

type RewardPool struct {
	Index               uint32                                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	RewardTokenDenom    string                                 `protobuf:"bytes,2,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	TotalRewardAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	LeftRewardAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=leftRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"leftRewardAmount"`
	RewardPerSecond     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
	StartTimestamp      uint64                                 `protobuf:"varint,6,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	RewardPerPower      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=rewardPerPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerPower"`
	LastRewardTimestamp uint64                                 `protobuf:"varint,8,opt,name=lastRewardTimestamp,proto3" json:"lastRewardTimestamp,omitempty"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{1}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RewardPool) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

func (m *RewardPool) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *RewardPool) GetLastRewardTimestamp() uint64 {
	if m != nil {
		return m.LastRewardTimestamp
	}
	return 0
}

type UserStakeRecord struct {
	UserAddress    string                                 `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	StakePoolIndex uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	Index          uint32                                 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	StakedAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=stakedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"stakedAmount"`
	StakedPower    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=stakedPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"stakedPower"`
	// the begin timestamp
	StartTimestamp uint64 `protobuf:"varint,6,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	// promise not unstake before this timestamp
	EndTimestamp    uint64            `protobuf:"varint,7,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	UserRewardInfos []*UserRewardInfo `protobuf:"bytes,8,rep,name=userRewardInfos,proto3" json:"userRewardInfos,omitempty"`
	StakeItemIndex  uint32            `protobuf:"varint,9,opt,name=stakeItemIndex,proto3" json:"stakeItemIndex,omitempty"`
}

func (m *UserStakeRecord) Reset()         { *m = UserStakeRecord{} }
func (m *UserStakeRecord) String() string { return proto.CompactTextString(m) }
func (*UserStakeRecord) ProtoMessage()    {}
func (*UserStakeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{2}
}
func (m *UserStakeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStakeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStakeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserStakeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStakeRecord.Merge(m, src)
}
func (m *UserStakeRecord) XXX_Size() int {
	return m.Size()
}
func (m *UserStakeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStakeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UserStakeRecord proto.InternalMessageInfo

func (m *UserStakeRecord) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *UserStakeRecord) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *UserStakeRecord) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UserStakeRecord) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *UserStakeRecord) GetEndTimestamp() uint64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *UserStakeRecord) GetUserRewardInfos() []*UserRewardInfo {
	if m != nil {
		return m.UserRewardInfos
	}
	return nil
}

func (m *UserStakeRecord) GetStakeItemIndex() uint32 {
	if m != nil {
		return m.StakeItemIndex
	}
	return 0
}

type UserRewardInfo struct {
	RewardPoolIndex  uint32                                 `protobuf:"varint,1,opt,name=rewardPoolIndex,proto3" json:"rewardPoolIndex,omitempty"`
	RewardTokenDenom string                                 `protobuf:"bytes,2,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	RewardDebt       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=rewardDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardDebt"`
	ClaimedAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=claimedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimedAmount"`
}

func (m *UserRewardInfo) Reset()         { *m = UserRewardInfo{} }
func (m *UserRewardInfo) String() string { return proto.CompactTextString(m) }
func (*UserRewardInfo) ProtoMessage()    {}
func (*UserRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{3}
}
func (m *UserRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRewardInfo.Merge(m, src)
}
func (m *UserRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserRewardInfo proto.InternalMessageInfo

func (m *UserRewardInfo) GetRewardPoolIndex() uint32 {
	if m != nil {
		return m.RewardPoolIndex
	}
	return 0
}

func (m *UserRewardInfo) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

type RewardToken struct {
	RewardTokenDenom     string                                 `protobuf:"bytes,1,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	MinTotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=minTotalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minTotalRewardAmount"`
}

func (m *RewardToken) Reset()         { *m = RewardToken{} }
func (m *RewardToken) String() string { return proto.CompactTextString(m) }
func (*RewardToken) ProtoMessage()    {}
func (*RewardToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{4}
}
func (m *RewardToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardToken.Merge(m, src)
}
func (m *RewardToken) XXX_Size() int {
	return m.Size()
}
func (m *RewardToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardToken.DiscardUnknown(m)
}

var xxx_messageInfo_RewardToken proto.InternalMessageInfo

func (m *RewardToken) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

type StakeItem struct {
	Index          uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	StakePoolIndex uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	LockSecond     uint64 `protobuf:"varint,3,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	// user stakedPower = powerRewardRate * stakedAmount
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,4,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
	Enable          bool                                   `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *StakeItem) Reset()         { *m = StakeItem{} }
func (m *StakeItem) String() string { return proto.CompactTextString(m) }
func (*StakeItem) ProtoMessage()    {}
func (*StakeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_155eb5abfcd1d3be, []int{5}
}
func (m *StakeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeItem.Merge(m, src)
}
func (m *StakeItem) XXX_Size() int {
	return m.Size()
}
func (m *StakeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeItem.DiscardUnknown(m)
}

var xxx_messageInfo_StakeItem proto.InternalMessageInfo

func (m *StakeItem) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *StakeItem) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *StakeItem) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

func (m *StakeItem) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func init() {
	proto.RegisterType((*StakePool)(nil), "stafihub.stafihub.mining.StakePool")
	proto.RegisterType((*RewardPool)(nil), "stafihub.stafihub.mining.RewardPool")
	proto.RegisterType((*UserStakeRecord)(nil), "stafihub.stafihub.mining.UserStakeRecord")
	proto.RegisterType((*UserRewardInfo)(nil), "stafihub.stafihub.mining.UserRewardInfo")
	proto.RegisterType((*RewardToken)(nil), "stafihub.stafihub.mining.RewardToken")
	proto.RegisterType((*StakeItem)(nil), "stafihub.stafihub.mining.StakeItem")
}

func init() { proto.RegisterFile("mining/models.proto", fileDescriptor_155eb5abfcd1d3be) }

var fileDescriptor_155eb5abfcd1d3be = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xe3, 0xfe, 0xe5, 0xa6, 0x6d, 0xfa, 0x4d, 0xab, 0x4f, 0x16, 0x0b, 0x37, 0xb2, 0x50,
	0x65, 0x81, 0x70, 0x10, 0x3c, 0x41, 0xab, 0x82, 0x94, 0x0d, 0xaa, 0xa6, 0x29, 0x42, 0x15, 0x1b,
	0xc7, 0x9e, 0x06, 0x2b, 0xf6, 0x4c, 0xe4, 0x99, 0xa8, 0xe5, 0x1d, 0x58, 0xb0, 0x60, 0xcb, 0xfb,
	0x74, 0x83, 0xd4, 0x25, 0x02, 0xa9, 0xa0, 0xe6, 0x45, 0x90, 0xc7, 0xc6, 0xbf, 0x49, 0x55, 0x9c,
	0x55, 0xc7, 0xa7, 0x77, 0x8e, 0xef, 0x3d, 0xf7, 0xde, 0x13, 0xc3, 0x6e, 0xe0, 0x51, 0x8f, 0x8e,
	0x7a, 0x01, 0x73, 0x89, 0xcf, 0xad, 0x49, 0xc8, 0x04, 0x43, 0x1a, 0x17, 0xf6, 0x85, 0xf7, 0x61,
	0x3a, 0xb4, 0xd2, 0x43, 0x1c, 0xf6, 0x68, 0x6f, 0xc4, 0x46, 0x4c, 0x06, 0xf5, 0xa2, 0x53, 0x1c,
	0x6f, 0x7c, 0x6b, 0x42, 0xeb, 0x54, 0xd8, 0x63, 0x72, 0xc2, 0x98, 0x8f, 0xf6, 0x60, 0xd5, 0xa3,
	0x2e, 0xb9, 0xd2, 0x94, 0xae, 0x62, 0x6e, 0xe1, 0xf8, 0x01, 0x99, 0xd0, 0xe1, 0x51, 0xc8, 0x80,
	0x8d, 0x09, 0x3d, 0x26, 0x94, 0x05, 0x5a, 0xb3, 0xab, 0x98, 0x2d, 0x5c, 0x86, 0xd1, 0x6b, 0x68,
	0x87, 0xe4, 0xd2, 0x0e, 0xdd, 0x88, 0x8d, 0x6b, 0x6a, 0x57, 0x35, 0xdb, 0x2f, 0x1e, 0x5b, 0x8b,
	0x72, 0xb2, 0x70, 0x1a, 0x8c, 0xf3, 0x17, 0xd1, 0x7b, 0xf8, 0x4f, 0x30, 0x61, 0xfb, 0x32, 0x33,
	0xf7, 0x30, 0x60, 0x53, 0x2a, 0xb4, 0x95, 0xe8, 0x9d, 0x47, 0xd6, 0xf5, 0xed, 0x7e, 0xe3, 0xc7,
	0xed, 0xfe, 0xc1, 0xc8, 0x13, 0x11, 0x93, 0xc3, 0x82, 0x9e, 0xc3, 0x78, 0xc0, 0x78, 0xf2, 0xe7,
	0x19, 0x77, 0xc7, 0x3d, 0xf1, 0x71, 0x42, 0xb8, 0xd5, 0xa7, 0x02, 0x57, 0x89, 0xd0, 0x39, 0xec,
	0xe4, 0xc0, 0x13, 0x76, 0x49, 0x42, 0x6d, 0xb5, 0x16, 0x79, 0x85, 0xc7, 0xf8, 0xb2, 0x02, 0x90,
	0x55, 0xb5, 0x40, 0xd0, 0x27, 0xb0, 0x13, 0x57, 0x5b, 0x51, 0xb4, 0x82, 0xa7, 0x52, 0xc4, 0xa4,
	0x89, 0x14, 0xea, 0x12, 0x52, 0xe4, 0x89, 0x22, 0x29, 0x7c, 0x72, 0x21, 0x0a, 0xe4, 0xf5, 0x74,
	0xae, 0xf0, 0xa0, 0x77, 0xd0, 0x49, 0x7a, 0x4a, 0xc2, 0x53, 0xe2, 0x30, 0xea, 0xd6, 0x54, 0xb9,
	0x4c, 0x83, 0x0e, 0x60, 0x9b, 0x0b, 0x3b, 0x14, 0x03, 0x2f, 0x20, 0x5c, 0xd8, 0xc1, 0x44, 0x5b,
	0xeb, 0x2a, 0xe6, 0x0a, 0x2e, 0xa1, 0xe8, 0x2d, 0x6c, 0xa7, 0x57, 0xe3, 0x36, 0xaf, 0xd7, 0x4a,
	0xa0, 0xc4, 0x82, 0x9e, 0xc3, 0xae, 0x6f, 0xf3, 0xa4, 0xda, 0x2c, 0x89, 0x0d, 0x99, 0xc4, 0xbc,
	0x7f, 0x19, 0xbf, 0x54, 0xe8, 0x9c, 0x71, 0x12, 0xca, 0x51, 0xc1, 0xc4, 0x61, 0xa1, 0x8b, 0xba,
	0xd0, 0x9e, 0x72, 0x12, 0x1e, 0xba, 0x6e, 0x48, 0x38, 0x97, 0x13, 0xd2, 0xc2, 0x79, 0x28, 0xa9,
	0x33, 0xde, 0xcd, 0xbe, 0x1c, 0xa3, 0xa6, 0x1c, 0xa3, 0x12, 0x9a, 0x4d, 0x99, 0x9a, 0x9f, 0x32,
	0x0c, 0x9b, 0x7c, 0xf9, 0xfd, 0x29, 0x70, 0xa0, 0x13, 0x68, 0xf3, 0xa5, 0xb7, 0x26, 0x4f, 0xf1,
	0xe0, 0x5e, 0x1a, 0xb0, 0x49, 0x68, 0x4e, 0xec, 0x75, 0x19, 0x55, 0xc0, 0x10, 0x86, 0x4e, 0x24,
	0x5f, 0x2c, 0x7e, 0x9f, 0x5e, 0x30, 0xae, 0x6d, 0x48, 0x0b, 0x32, 0x17, 0x5b, 0xd0, 0x59, 0xe1,
	0x02, 0x2e, 0x13, 0xa4, 0x3d, 0xe8, 0x0b, 0x12, 0xc4, 0x3d, 0x68, 0xe5, 0x7a, 0x90, 0xa2, 0xc6,
	0xa7, 0x26, 0x6c, 0x17, 0xb9, 0x22, 0xdf, 0xcc, 0x4c, 0xad, 0x9f, 0xb3, 0x81, 0x32, 0xfc, 0x4f,
	0x86, 0xf0, 0x06, 0x20, 0xc6, 0x8e, 0xc9, 0xb0, 0xae, 0x13, 0xe4, 0x18, 0xd0, 0x00, 0xb6, 0x1c,
	0xdf, 0xf6, 0x82, 0x25, 0xe7, 0xa4, 0x48, 0x62, 0x7c, 0x55, 0xa0, 0x8d, 0xb3, 0xd4, 0xe7, 0x56,
	0xa8, 0x2c, 0xa8, 0x70, 0x08, 0x7b, 0x81, 0x47, 0x07, 0x15, 0xd7, 0x6b, 0xd6, 0x4a, 0x6c, 0x2e,
	0x97, 0xf1, 0x53, 0x49, 0x7e, 0xf7, 0xa2, 0x0e, 0x2e, 0xb0, 0xe9, 0x87, 0xae, 0x9f, 0x0e, 0xe0,
	0x33, 0x67, 0x9c, 0x78, 0x9c, 0x2a, 0x07, 0x33, 0x87, 0x44, 0x46, 0x38, 0x89, 0x66, 0x3d, 0x4e,
	0x00, 0xdb, 0x82, 0xdc, 0xa3, 0xf1, 0xdf, 0xf9, 0xcc, 0x0e, 0x53, 0xe1, 0xf9, 0xdc, 0x3a, 0x26,
	0x0e, 0x2e, 0xd3, 0xa0, 0xff, 0x61, 0x8d, 0x50, 0x7b, 0xe8, 0x13, 0xb9, 0x89, 0x1b, 0x38, 0x79,
	0x3a, 0x7a, 0x75, 0x7d, 0xa7, 0x2b, 0x37, 0x77, 0xba, 0xf2, 0xfb, 0x4e, 0x57, 0x3e, 0xcf, 0xf4,
	0xc6, 0xcd, 0x4c, 0x6f, 0x7c, 0x9f, 0xe9, 0x8d, 0xf3, 0xa7, 0xf7, 0xbe, 0xea, 0xaa, 0x97, 0x7c,
	0x53, 0x48, 0xf9, 0x86, 0x6b, 0xf2, 0x1b, 0xe1, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13,
	0x77, 0x59, 0x2f, 0x6a, 0x08, 0x00, 0x00,
}

func (m *StakePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalStakedPower.Size()
		i -= size
		if _, err := m.TotalStakedPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalStakedAmount.Size()
		i -= size
		if _, err := m.TotalStakedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardPools) > 0 {
		for iNdEx := len(m.RewardPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRewardTimestamp != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.LastRewardTimestamp))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.RewardPerPower.Size()
		i -= size
		if _, err := m.RewardPerPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.StartTimestamp != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LeftRewardAmount.Size()
		i -= size
		if _, err := m.LeftRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserStakeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStakeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserStakeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeItemIndex != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.StakeItemIndex))
		i--
		dAtA[i] = 0x48
	}
	if len(m.UserRewardInfos) > 0 {
		for iNdEx := len(m.UserRewardInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserRewardInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.EndTimestamp != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.EndTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTimestamp != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.StakedPower.Size()
		i -= size
		if _, err := m.StakedPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StakedAmount.Size()
		i -= size
		if _, err := m.StakedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Index != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClaimedAmount.Size()
		i -= size
		if _, err := m.ClaimedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.RewardDebt.Size()
		i -= size
		if _, err := m.RewardDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.RewardPoolIndex != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.RewardPoolIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinTotalRewardAmount.Size()
		i -= size
		if _, err := m.MinTotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LockSecond != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovModels(uint64(m.Index))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.RewardPools) > 0 {
		for _, e := range m.RewardPools {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = m.TotalStakedAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.TotalStakedPower.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovModels(uint64(m.Index))
	}
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.LeftRewardAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovModels(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovModels(uint64(m.StartTimestamp))
	}
	l = m.RewardPerPower.Size()
	n += 1 + l + sovModels(uint64(l))
	if m.LastRewardTimestamp != 0 {
		n += 1 + sovModels(uint64(m.LastRewardTimestamp))
	}
	return n
}

func (m *UserStakeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovModels(uint64(m.StakePoolIndex))
	}
	if m.Index != 0 {
		n += 1 + sovModels(uint64(m.Index))
	}
	l = m.StakedAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.StakedPower.Size()
	n += 1 + l + sovModels(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovModels(uint64(m.StartTimestamp))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovModels(uint64(m.EndTimestamp))
	}
	if len(m.UserRewardInfos) > 0 {
		for _, e := range m.UserRewardInfos {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.StakeItemIndex != 0 {
		n += 1 + sovModels(uint64(m.StakeItemIndex))
	}
	return n
}

func (m *UserRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardPoolIndex != 0 {
		n += 1 + sovModels(uint64(m.RewardPoolIndex))
	}
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.RewardDebt.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *RewardToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.MinTotalRewardAmount.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *StakeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovModels(uint64(m.Index))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovModels(uint64(m.StakePoolIndex))
	}
	if m.LockSecond != 0 {
		n += 1 + sovModels(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovModels(uint64(l))
	if m.Enable {
		n += 2
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPools = append(m.RewardPools, &RewardPool{})
			if err := m.RewardPools[len(m.RewardPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStakedPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeftRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardTimestamp", wireType)
			}
			m.LastRewardTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStakeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStakeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStakeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRewardInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRewardInfos = append(m.UserRewardInfos, &UserRewardInfo{})
			if err := m.UserRewardInfos[len(m.UserRewardInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeItemIndex", wireType)
			}
			m.StakeItemIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeItemIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolIndex", wireType)
			}
			m.RewardPoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardPoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
