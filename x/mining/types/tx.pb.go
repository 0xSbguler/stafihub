// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mining/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_stafihub_stafihub_utils "github.com/stafihub/stafihub/utils"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddStakePool struct {
	Creator            string                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeTokenDenom    string                  `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	RewardPoolInfoList []*CreateRewardPoolInfo `protobuf:"bytes,3,rep,name=rewardPoolInfoList,proto3" json:"rewardPoolInfoList,omitempty"`
	StakeItemInfoList  []*CreateStakeItemInfo  `protobuf:"bytes,4,rep,name=stakeItemInfoList,proto3" json:"stakeItemInfoList,omitempty"`
}

func (m *MsgAddStakePool) Reset()         { *m = MsgAddStakePool{} }
func (m *MsgAddStakePool) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakePool) ProtoMessage()    {}
func (*MsgAddStakePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{0}
}
func (m *MsgAddStakePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakePool.Merge(m, src)
}
func (m *MsgAddStakePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakePool proto.InternalMessageInfo

func (m *MsgAddStakePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddStakePool) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *MsgAddStakePool) GetRewardPoolInfoList() []*CreateRewardPoolInfo {
	if m != nil {
		return m.RewardPoolInfoList
	}
	return nil
}

func (m *MsgAddStakePool) GetStakeItemInfoList() []*CreateStakeItemInfo {
	if m != nil {
		return m.StakeItemInfoList
	}
	return nil
}

type CreateRewardPoolInfo struct {
	RewardTokenDenom  string                                 `protobuf:"bytes,1,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	TotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	RewardPerSecond   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
	StartTimestamp    uint64                                 `protobuf:"varint,4,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
}

func (m *CreateRewardPoolInfo) Reset()         { *m = CreateRewardPoolInfo{} }
func (m *CreateRewardPoolInfo) String() string { return proto.CompactTextString(m) }
func (*CreateRewardPoolInfo) ProtoMessage()    {}
func (*CreateRewardPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{1}
}
func (m *CreateRewardPoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRewardPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRewardPoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRewardPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRewardPoolInfo.Merge(m, src)
}
func (m *CreateRewardPoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *CreateRewardPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRewardPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRewardPoolInfo proto.InternalMessageInfo

func (m *CreateRewardPoolInfo) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

func (m *CreateRewardPoolInfo) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

type CreateStakeItemInfo struct {
	LockSecond uint64 `protobuf:"varint,1,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	// user stakedPower = powerRewardRate * stakedAmount
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,2,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
}

func (m *CreateStakeItemInfo) Reset()         { *m = CreateStakeItemInfo{} }
func (m *CreateStakeItemInfo) String() string { return proto.CompactTextString(m) }
func (*CreateStakeItemInfo) ProtoMessage()    {}
func (*CreateStakeItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{2}
}
func (m *CreateStakeItemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStakeItemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStakeItemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStakeItemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStakeItemInfo.Merge(m, src)
}
func (m *CreateStakeItemInfo) XXX_Size() int {
	return m.Size()
}
func (m *CreateStakeItemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStakeItemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStakeItemInfo proto.InternalMessageInfo

func (m *CreateStakeItemInfo) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

type MsgAddStakePoolResponse struct {
}

func (m *MsgAddStakePoolResponse) Reset()         { *m = MsgAddStakePoolResponse{} }
func (m *MsgAddStakePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakePoolResponse) ProtoMessage()    {}
func (*MsgAddStakePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{3}
}
func (m *MsgAddStakePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakePoolResponse.Merge(m, src)
}
func (m *MsgAddStakePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakePoolResponse proto.InternalMessageInfo

type MsgAddStakeItem struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex  uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	LockSecond      uint64                                 `protobuf:"varint,3,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,4,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
	Enable          bool                                   `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *MsgAddStakeItem) Reset()         { *m = MsgAddStakeItem{} }
func (m *MsgAddStakeItem) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakeItem) ProtoMessage()    {}
func (*MsgAddStakeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{4}
}
func (m *MsgAddStakeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakeItem.Merge(m, src)
}
func (m *MsgAddStakeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakeItem proto.InternalMessageInfo

func (m *MsgAddStakeItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddStakeItem) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgAddStakeItem) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

func (m *MsgAddStakeItem) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type MsgAddStakeItemResponse struct {
}

func (m *MsgAddStakeItemResponse) Reset()         { *m = MsgAddStakeItemResponse{} }
func (m *MsgAddStakeItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakeItemResponse) ProtoMessage()    {}
func (*MsgAddStakeItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{5}
}
func (m *MsgAddStakeItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakeItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakeItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakeItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakeItemResponse.Merge(m, src)
}
func (m *MsgAddStakeItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakeItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakeItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakeItemResponse proto.InternalMessageInfo

type MsgAddRewardPool struct {
	Creator           string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex    uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	RewardTokenDenom  string                                 `protobuf:"bytes,3,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	TotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	RewardPerSecond   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
	StartTimestamp    uint64                                 `protobuf:"varint,6,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
}

func (m *MsgAddRewardPool) Reset()         { *m = MsgAddRewardPool{} }
func (m *MsgAddRewardPool) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPool) ProtoMessage()    {}
func (*MsgAddRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{6}
}
func (m *MsgAddRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPool.Merge(m, src)
}
func (m *MsgAddRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPool proto.InternalMessageInfo

func (m *MsgAddRewardPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddRewardPool) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgAddRewardPool) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

func (m *MsgAddRewardPool) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

type MsgAddRewardPoolResponse struct {
}

func (m *MsgAddRewardPoolResponse) Reset()         { *m = MsgAddRewardPoolResponse{} }
func (m *MsgAddRewardPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPoolResponse) ProtoMessage()    {}
func (*MsgAddRewardPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{7}
}
func (m *MsgAddRewardPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPoolResponse.Merge(m, src)
}
func (m *MsgAddRewardPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPoolResponse proto.InternalMessageInfo

type MsgStake struct {
	Creator        string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=stakeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"stakeAmount"`
	StakeItemIndex uint32                                 `protobuf:"varint,4,opt,name=stakeItemIndex,proto3" json:"stakeItemIndex,omitempty"`
}

func (m *MsgStake) Reset()         { *m = MsgStake{} }
func (m *MsgStake) String() string { return proto.CompactTextString(m) }
func (*MsgStake) ProtoMessage()    {}
func (*MsgStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{8}
}
func (m *MsgStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStake.Merge(m, src)
}
func (m *MsgStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStake proto.InternalMessageInfo

func (m *MsgStake) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStake) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgStake) GetStakeItemIndex() uint32 {
	if m != nil {
		return m.StakeItemIndex
	}
	return 0
}

type MsgStakeResponse struct {
}

func (m *MsgStakeResponse) Reset()         { *m = MsgStakeResponse{} }
func (m *MsgStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeResponse) ProtoMessage()    {}
func (*MsgStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{9}
}
func (m *MsgStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeResponse.Merge(m, src)
}
func (m *MsgStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeResponse proto.InternalMessageInfo

type MsgClaimReward struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex   uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeRecordIndex uint32 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *MsgClaimReward) Reset()         { *m = MsgClaimReward{} }
func (m *MsgClaimReward) String() string { return proto.CompactTextString(m) }
func (*MsgClaimReward) ProtoMessage()    {}
func (*MsgClaimReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{10}
}
func (m *MsgClaimReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimReward.Merge(m, src)
}
func (m *MsgClaimReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimReward proto.InternalMessageInfo

func (m *MsgClaimReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimReward) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgClaimReward) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type MsgClaimRewardResponse struct {
}

func (m *MsgClaimRewardResponse) Reset()         { *m = MsgClaimRewardResponse{} }
func (m *MsgClaimRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardResponse) ProtoMessage()    {}
func (*MsgClaimRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{11}
}
func (m *MsgClaimRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardResponse.Merge(m, src)
}
func (m *MsgClaimRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardResponse proto.InternalMessageInfo

type MsgWithdraw struct {
	Creator          string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex   uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeRecordIndex uint32                                 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
	WithdrawAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=withdrawAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawAmount"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{12}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

func (m *MsgWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdraw) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgWithdraw) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type MsgWithdrawResponse struct {
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{13}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

type MsgUpdateStakeItem struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index           uint32                                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	StakePoolIndex  uint32                                 `protobuf:"varint,3,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	LockSecond      uint64                                 `protobuf:"varint,4,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,5,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
	Enable          bool                                   `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *MsgUpdateStakeItem) Reset()         { *m = MsgUpdateStakeItem{} }
func (m *MsgUpdateStakeItem) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakeItem) ProtoMessage()    {}
func (*MsgUpdateStakeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{14}
}
func (m *MsgUpdateStakeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakeItem.Merge(m, src)
}
func (m *MsgUpdateStakeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakeItem proto.InternalMessageInfo

func (m *MsgUpdateStakeItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateStakeItem) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MsgUpdateStakeItem) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgUpdateStakeItem) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

func (m *MsgUpdateStakeItem) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type MsgUpdateStakeItemResponse struct {
}

func (m *MsgUpdateStakeItemResponse) Reset()         { *m = MsgUpdateStakeItemResponse{} }
func (m *MsgUpdateStakeItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakeItemResponse) ProtoMessage()    {}
func (*MsgUpdateStakeItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{15}
}
func (m *MsgUpdateStakeItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakeItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakeItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakeItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakeItemResponse.Merge(m, src)
}
func (m *MsgUpdateStakeItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakeItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakeItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakeItemResponse proto.InternalMessageInfo

type MsgAddMiningProvider struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgAddMiningProvider) Reset()         { *m = MsgAddMiningProvider{} }
func (m *MsgAddMiningProvider) String() string { return proto.CompactTextString(m) }
func (*MsgAddMiningProvider) ProtoMessage()    {}
func (*MsgAddMiningProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{16}
}
func (m *MsgAddMiningProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMiningProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMiningProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMiningProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMiningProvider.Merge(m, src)
}
func (m *MsgAddMiningProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMiningProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMiningProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMiningProvider proto.InternalMessageInfo

func (m *MsgAddMiningProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddMiningProvider) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgAddMiningProviderResponse struct {
}

func (m *MsgAddMiningProviderResponse) Reset()         { *m = MsgAddMiningProviderResponse{} }
func (m *MsgAddMiningProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMiningProviderResponse) ProtoMessage()    {}
func (*MsgAddMiningProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{17}
}
func (m *MsgAddMiningProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMiningProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMiningProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMiningProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMiningProviderResponse.Merge(m, src)
}
func (m *MsgAddMiningProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMiningProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMiningProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMiningProviderResponse proto.InternalMessageInfo

type MsgRmMiningProvider struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgRmMiningProvider) Reset()         { *m = MsgRmMiningProvider{} }
func (m *MsgRmMiningProvider) String() string { return proto.CompactTextString(m) }
func (*MsgRmMiningProvider) ProtoMessage()    {}
func (*MsgRmMiningProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{18}
}
func (m *MsgRmMiningProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRmMiningProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRmMiningProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRmMiningProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRmMiningProvider.Merge(m, src)
}
func (m *MsgRmMiningProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgRmMiningProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRmMiningProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRmMiningProvider proto.InternalMessageInfo

func (m *MsgRmMiningProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRmMiningProvider) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgRmMiningProviderResponse struct {
}

func (m *MsgRmMiningProviderResponse) Reset()         { *m = MsgRmMiningProviderResponse{} }
func (m *MsgRmMiningProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRmMiningProviderResponse) ProtoMessage()    {}
func (*MsgRmMiningProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{19}
}
func (m *MsgRmMiningProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRmMiningProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRmMiningProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRmMiningProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRmMiningProviderResponse.Merge(m, src)
}
func (m *MsgRmMiningProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRmMiningProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRmMiningProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRmMiningProviderResponse proto.InternalMessageInfo

type MsgAddRewardToken struct {
	Creator              string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom                string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MinTotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=minTotalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minTotalRewardAmount"`
}

func (m *MsgAddRewardToken) Reset()         { *m = MsgAddRewardToken{} }
func (m *MsgAddRewardToken) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardToken) ProtoMessage()    {}
func (*MsgAddRewardToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{20}
}
func (m *MsgAddRewardToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardToken.Merge(m, src)
}
func (m *MsgAddRewardToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardToken proto.InternalMessageInfo

func (m *MsgAddRewardToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddRewardToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgAddRewardTokenResponse struct {
}

func (m *MsgAddRewardTokenResponse) Reset()         { *m = MsgAddRewardTokenResponse{} }
func (m *MsgAddRewardTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardTokenResponse) ProtoMessage()    {}
func (*MsgAddRewardTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{21}
}
func (m *MsgAddRewardTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardTokenResponse.Merge(m, src)
}
func (m *MsgAddRewardTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardTokenResponse proto.InternalMessageInfo

type MsgSetMaxRewardPoolNumber struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Number  uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *MsgSetMaxRewardPoolNumber) Reset()         { *m = MsgSetMaxRewardPoolNumber{} }
func (m *MsgSetMaxRewardPoolNumber) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxRewardPoolNumber) ProtoMessage()    {}
func (*MsgSetMaxRewardPoolNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{22}
}
func (m *MsgSetMaxRewardPoolNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxRewardPoolNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxRewardPoolNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxRewardPoolNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxRewardPoolNumber.Merge(m, src)
}
func (m *MsgSetMaxRewardPoolNumber) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxRewardPoolNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxRewardPoolNumber.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxRewardPoolNumber proto.InternalMessageInfo

func (m *MsgSetMaxRewardPoolNumber) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetMaxRewardPoolNumber) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MsgSetMaxRewardPoolNumberResponse struct {
}

func (m *MsgSetMaxRewardPoolNumberResponse) Reset()         { *m = MsgSetMaxRewardPoolNumberResponse{} }
func (m *MsgSetMaxRewardPoolNumberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxRewardPoolNumberResponse) ProtoMessage()    {}
func (*MsgSetMaxRewardPoolNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{23}
}
func (m *MsgSetMaxRewardPoolNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxRewardPoolNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxRewardPoolNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxRewardPoolNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxRewardPoolNumberResponse.Merge(m, src)
}
func (m *MsgSetMaxRewardPoolNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxRewardPoolNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxRewardPoolNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxRewardPoolNumberResponse proto.InternalMessageInfo

type MsgUpdateRewardPool struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex  uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	RewardPoolIndex uint32                                 `protobuf:"varint,3,opt,name=rewardPoolIndex,proto3" json:"rewardPoolIndex,omitempty"`
	RewardPerSecond github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
}

func (m *MsgUpdateRewardPool) Reset()         { *m = MsgUpdateRewardPool{} }
func (m *MsgUpdateRewardPool) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardPool) ProtoMessage()    {}
func (*MsgUpdateRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{24}
}
func (m *MsgUpdateRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardPool.Merge(m, src)
}
func (m *MsgUpdateRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardPool proto.InternalMessageInfo

func (m *MsgUpdateRewardPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRewardPool) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgUpdateRewardPool) GetRewardPoolIndex() uint32 {
	if m != nil {
		return m.RewardPoolIndex
	}
	return 0
}

type MsgUpdateRewardPoolResponse struct {
}

func (m *MsgUpdateRewardPoolResponse) Reset()         { *m = MsgUpdateRewardPoolResponse{} }
func (m *MsgUpdateRewardPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardPoolResponse) ProtoMessage()    {}
func (*MsgUpdateRewardPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{25}
}
func (m *MsgUpdateRewardPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardPoolResponse.Merge(m, src)
}
func (m *MsgUpdateRewardPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardPoolResponse proto.InternalMessageInfo

type MsgToggleProviderSwitch struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgToggleProviderSwitch) Reset()         { *m = MsgToggleProviderSwitch{} }
func (m *MsgToggleProviderSwitch) String() string { return proto.CompactTextString(m) }
func (*MsgToggleProviderSwitch) ProtoMessage()    {}
func (*MsgToggleProviderSwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{26}
}
func (m *MsgToggleProviderSwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleProviderSwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleProviderSwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleProviderSwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleProviderSwitch.Merge(m, src)
}
func (m *MsgToggleProviderSwitch) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleProviderSwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleProviderSwitch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleProviderSwitch proto.InternalMessageInfo

func (m *MsgToggleProviderSwitch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgToggleProviderSwitchResponse struct {
}

func (m *MsgToggleProviderSwitchResponse) Reset()         { *m = MsgToggleProviderSwitchResponse{} }
func (m *MsgToggleProviderSwitchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleProviderSwitchResponse) ProtoMessage()    {}
func (*MsgToggleProviderSwitchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{27}
}
func (m *MsgToggleProviderSwitchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleProviderSwitchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleProviderSwitchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleProviderSwitchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleProviderSwitchResponse.Merge(m, src)
}
func (m *MsgToggleProviderSwitchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleProviderSwitchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleProviderSwitchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleProviderSwitchResponse proto.InternalMessageInfo

type MsgSetMaxStakeItemNumber struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Number  uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *MsgSetMaxStakeItemNumber) Reset()         { *m = MsgSetMaxStakeItemNumber{} }
func (m *MsgSetMaxStakeItemNumber) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxStakeItemNumber) ProtoMessage()    {}
func (*MsgSetMaxStakeItemNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{28}
}
func (m *MsgSetMaxStakeItemNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxStakeItemNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxStakeItemNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxStakeItemNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxStakeItemNumber.Merge(m, src)
}
func (m *MsgSetMaxStakeItemNumber) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxStakeItemNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxStakeItemNumber.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxStakeItemNumber proto.InternalMessageInfo

func (m *MsgSetMaxStakeItemNumber) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetMaxStakeItemNumber) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MsgSetMaxStakeItemNumberResponse struct {
}

func (m *MsgSetMaxStakeItemNumberResponse) Reset()         { *m = MsgSetMaxStakeItemNumberResponse{} }
func (m *MsgSetMaxStakeItemNumberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxStakeItemNumberResponse) ProtoMessage()    {}
func (*MsgSetMaxStakeItemNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{29}
}
func (m *MsgSetMaxStakeItemNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxStakeItemNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxStakeItemNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxStakeItemNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxStakeItemNumberResponse.Merge(m, src)
}
func (m *MsgSetMaxStakeItemNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxStakeItemNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxStakeItemNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxStakeItemNumberResponse proto.InternalMessageInfo

type MsgAddReward struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex  uint32                                 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	RewardPoolIndex uint32                                 `protobuf:"varint,3,opt,name=rewardPoolIndex,proto3" json:"rewardPoolIndex,omitempty"`
	AddAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=addAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"addAmount"`
	StartTimestamp  uint64                                 `protobuf:"varint,5,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	RewardPerSecond github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
}

func (m *MsgAddReward) Reset()         { *m = MsgAddReward{} }
func (m *MsgAddReward) String() string { return proto.CompactTextString(m) }
func (*MsgAddReward) ProtoMessage()    {}
func (*MsgAddReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{30}
}
func (m *MsgAddReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddReward.Merge(m, src)
}
func (m *MsgAddReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddReward proto.InternalMessageInfo

func (m *MsgAddReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddReward) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgAddReward) GetRewardPoolIndex() uint32 {
	if m != nil {
		return m.RewardPoolIndex
	}
	return 0
}

func (m *MsgAddReward) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

type MsgAddRewardResponse struct {
}

func (m *MsgAddRewardResponse) Reset()         { *m = MsgAddRewardResponse{} }
func (m *MsgAddRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardResponse) ProtoMessage()    {}
func (*MsgAddRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{31}
}
func (m *MsgAddRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardResponse.Merge(m, src)
}
func (m *MsgAddRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardResponse proto.InternalMessageInfo

type MsgToggleEmergencySwitch struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
}

func (m *MsgToggleEmergencySwitch) Reset()         { *m = MsgToggleEmergencySwitch{} }
func (m *MsgToggleEmergencySwitch) String() string { return proto.CompactTextString(m) }
func (*MsgToggleEmergencySwitch) ProtoMessage()    {}
func (*MsgToggleEmergencySwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{32}
}
func (m *MsgToggleEmergencySwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleEmergencySwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleEmergencySwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleEmergencySwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleEmergencySwitch.Merge(m, src)
}
func (m *MsgToggleEmergencySwitch) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleEmergencySwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleEmergencySwitch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleEmergencySwitch proto.InternalMessageInfo

func (m *MsgToggleEmergencySwitch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgToggleEmergencySwitch) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

type MsgToggleEmergencySwitchResponse struct {
}

func (m *MsgToggleEmergencySwitchResponse) Reset()         { *m = MsgToggleEmergencySwitchResponse{} }
func (m *MsgToggleEmergencySwitchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleEmergencySwitchResponse) ProtoMessage()    {}
func (*MsgToggleEmergencySwitchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{33}
}
func (m *MsgToggleEmergencySwitchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleEmergencySwitchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleEmergencySwitchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleEmergencySwitchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleEmergencySwitchResponse.Merge(m, src)
}
func (m *MsgToggleEmergencySwitchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleEmergencySwitchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleEmergencySwitchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleEmergencySwitchResponse proto.InternalMessageInfo

type MsgEmergencyWithdraw struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakePoolIndex   uint32 `protobuf:"varint,2,opt,name=stakePoolIndex,proto3" json:"stakePoolIndex,omitempty"`
	StakeRecordIndex uint32 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *MsgEmergencyWithdraw) Reset()         { *m = MsgEmergencyWithdraw{} }
func (m *MsgEmergencyWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgEmergencyWithdraw) ProtoMessage()    {}
func (*MsgEmergencyWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{34}
}
func (m *MsgEmergencyWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmergencyWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmergencyWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmergencyWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmergencyWithdraw.Merge(m, src)
}
func (m *MsgEmergencyWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmergencyWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmergencyWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmergencyWithdraw proto.InternalMessageInfo

func (m *MsgEmergencyWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgEmergencyWithdraw) GetStakePoolIndex() uint32 {
	if m != nil {
		return m.StakePoolIndex
	}
	return 0
}

func (m *MsgEmergencyWithdraw) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type MsgEmergencyWithdrawResponse struct {
}

func (m *MsgEmergencyWithdrawResponse) Reset()         { *m = MsgEmergencyWithdrawResponse{} }
func (m *MsgEmergencyWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmergencyWithdrawResponse) ProtoMessage()    {}
func (*MsgEmergencyWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{35}
}
func (m *MsgEmergencyWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmergencyWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmergencyWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmergencyWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmergencyWithdrawResponse.Merge(m, src)
}
func (m *MsgEmergencyWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmergencyWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmergencyWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmergencyWithdrawResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddStakePool)(nil), "stafihub.stafihub.mining.MsgAddStakePool")
	proto.RegisterType((*CreateRewardPoolInfo)(nil), "stafihub.stafihub.mining.CreateRewardPoolInfo")
	proto.RegisterType((*CreateStakeItemInfo)(nil), "stafihub.stafihub.mining.CreateStakeItemInfo")
	proto.RegisterType((*MsgAddStakePoolResponse)(nil), "stafihub.stafihub.mining.MsgAddStakePoolResponse")
	proto.RegisterType((*MsgAddStakeItem)(nil), "stafihub.stafihub.mining.MsgAddStakeItem")
	proto.RegisterType((*MsgAddStakeItemResponse)(nil), "stafihub.stafihub.mining.MsgAddStakeItemResponse")
	proto.RegisterType((*MsgAddRewardPool)(nil), "stafihub.stafihub.mining.MsgAddRewardPool")
	proto.RegisterType((*MsgAddRewardPoolResponse)(nil), "stafihub.stafihub.mining.MsgAddRewardPoolResponse")
	proto.RegisterType((*MsgStake)(nil), "stafihub.stafihub.mining.MsgStake")
	proto.RegisterType((*MsgStakeResponse)(nil), "stafihub.stafihub.mining.MsgStakeResponse")
	proto.RegisterType((*MsgClaimReward)(nil), "stafihub.stafihub.mining.MsgClaimReward")
	proto.RegisterType((*MsgClaimRewardResponse)(nil), "stafihub.stafihub.mining.MsgClaimRewardResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "stafihub.stafihub.mining.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "stafihub.stafihub.mining.MsgWithdrawResponse")
	proto.RegisterType((*MsgUpdateStakeItem)(nil), "stafihub.stafihub.mining.MsgUpdateStakeItem")
	proto.RegisterType((*MsgUpdateStakeItemResponse)(nil), "stafihub.stafihub.mining.MsgUpdateStakeItemResponse")
	proto.RegisterType((*MsgAddMiningProvider)(nil), "stafihub.stafihub.mining.MsgAddMiningProvider")
	proto.RegisterType((*MsgAddMiningProviderResponse)(nil), "stafihub.stafihub.mining.MsgAddMiningProviderResponse")
	proto.RegisterType((*MsgRmMiningProvider)(nil), "stafihub.stafihub.mining.MsgRmMiningProvider")
	proto.RegisterType((*MsgRmMiningProviderResponse)(nil), "stafihub.stafihub.mining.MsgRmMiningProviderResponse")
	proto.RegisterType((*MsgAddRewardToken)(nil), "stafihub.stafihub.mining.MsgAddRewardToken")
	proto.RegisterType((*MsgAddRewardTokenResponse)(nil), "stafihub.stafihub.mining.MsgAddRewardTokenResponse")
	proto.RegisterType((*MsgSetMaxRewardPoolNumber)(nil), "stafihub.stafihub.mining.MsgSetMaxRewardPoolNumber")
	proto.RegisterType((*MsgSetMaxRewardPoolNumberResponse)(nil), "stafihub.stafihub.mining.MsgSetMaxRewardPoolNumberResponse")
	proto.RegisterType((*MsgUpdateRewardPool)(nil), "stafihub.stafihub.mining.MsgUpdateRewardPool")
	proto.RegisterType((*MsgUpdateRewardPoolResponse)(nil), "stafihub.stafihub.mining.MsgUpdateRewardPoolResponse")
	proto.RegisterType((*MsgToggleProviderSwitch)(nil), "stafihub.stafihub.mining.MsgToggleProviderSwitch")
	proto.RegisterType((*MsgToggleProviderSwitchResponse)(nil), "stafihub.stafihub.mining.MsgToggleProviderSwitchResponse")
	proto.RegisterType((*MsgSetMaxStakeItemNumber)(nil), "stafihub.stafihub.mining.MsgSetMaxStakeItemNumber")
	proto.RegisterType((*MsgSetMaxStakeItemNumberResponse)(nil), "stafihub.stafihub.mining.MsgSetMaxStakeItemNumberResponse")
	proto.RegisterType((*MsgAddReward)(nil), "stafihub.stafihub.mining.MsgAddReward")
	proto.RegisterType((*MsgAddRewardResponse)(nil), "stafihub.stafihub.mining.MsgAddRewardResponse")
	proto.RegisterType((*MsgToggleEmergencySwitch)(nil), "stafihub.stafihub.mining.MsgToggleEmergencySwitch")
	proto.RegisterType((*MsgToggleEmergencySwitchResponse)(nil), "stafihub.stafihub.mining.MsgToggleEmergencySwitchResponse")
	proto.RegisterType((*MsgEmergencyWithdraw)(nil), "stafihub.stafihub.mining.MsgEmergencyWithdraw")
	proto.RegisterType((*MsgEmergencyWithdrawResponse)(nil), "stafihub.stafihub.mining.MsgEmergencyWithdrawResponse")
}

func init() { proto.RegisterFile("mining/tx.proto", fileDescriptor_7b7cc93178595aaa) }

var fileDescriptor_7b7cc93178595aaa = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0x9b, 0x3f, 0xb4, 0xa7, 0x5b, 0xd3, 0x7a, 0x5d, 0xc9, 0xbc, 0x91, 0x66, 0x46, 0x54,
	0xa1, 0xa3, 0x09, 0x6d, 0x19, 0x12, 0xf0, 0xd4, 0xfd, 0x79, 0xa8, 0xd4, 0xa0, 0xe2, 0x16, 0x86,
	0x60, 0x42, 0x38, 0xf6, 0x9d, 0x6b, 0x35, 0xf6, 0x8d, 0x7c, 0x6f, 0xd6, 0x4e, 0x48, 0x3c, 0x21,
	0x21, 0xf1, 0x02, 0xe2, 0x23, 0xf0, 0xc2, 0x37, 0x41, 0x13, 0x4f, 0x93, 0x78, 0x41, 0x20, 0x55,
	0x53, 0x2b, 0xbe, 0x06, 0x42, 0xbe, 0xd7, 0xb9, 0x71, 0x6c, 0xc7, 0x71, 0xba, 0x6c, 0x3c, 0x35,
	0xbe, 0xfe, 0x9d, 0xdf, 0xef, 0x9c, 0x73, 0xcf, 0x3d, 0xf7, 0xb8, 0x50, 0x72, 0x6c, 0xd7, 0x76,
	0xad, 0x06, 0x3d, 0xa9, 0x77, 0x3c, 0x4c, 0xb1, 0x5c, 0x26, 0x54, 0x7f, 0x64, 0x1f, 0x76, 0x5b,
	0x75, 0xf1, 0x83, 0x43, 0x94, 0x25, 0x0b, 0x5b, 0x98, 0x81, 0x1a, 0xfe, 0x2f, 0x8e, 0x57, 0x2a,
	0x06, 0x26, 0x0e, 0x26, 0x8d, 0x96, 0x4e, 0x50, 0xe3, 0xf1, 0x46, 0x0b, 0x51, 0x7d, 0xa3, 0x61,
	0x60, 0xdb, 0xe5, 0xef, 0xd5, 0x9f, 0xa7, 0xa1, 0xd4, 0x24, 0xd6, 0xb6, 0x69, 0xee, 0x53, 0xfd,
	0x08, 0xed, 0x61, 0xdc, 0x96, 0xcb, 0xf0, 0x9a, 0xe1, 0x21, 0x9d, 0x62, 0xaf, 0x2c, 0x55, 0xa5,
	0xda, 0xac, 0xd6, 0x7b, 0x94, 0x6b, 0x50, 0x22, 0x3e, 0xec, 0x00, 0x1f, 0x21, 0xf7, 0x1e, 0x72,
	0xb1, 0x53, 0x9e, 0x66, 0x88, 0xe8, 0xb2, 0xfc, 0x15, 0xc8, 0x1e, 0x3a, 0xd6, 0x3d, 0xd3, 0x67,
	0xdc, 0x71, 0x1f, 0xe1, 0x5d, 0x9b, 0xd0, 0x72, 0xae, 0x9a, 0xab, 0xcd, 0x6d, 0xd6, 0xeb, 0xc3,
	0x82, 0xa8, 0xdf, 0xf5, 0x85, 0x90, 0x36, 0x60, 0xa9, 0x25, 0x30, 0xc9, 0x5f, 0xc2, 0x22, 0x93,
	0xdc, 0xa1, 0xc8, 0x11, 0xf4, 0x79, 0x46, 0xbf, 0x3e, 0x8a, 0x7e, 0x3f, 0x6c, 0xa8, 0xc5, 0x79,
	0xd4, 0x5f, 0xa6, 0x61, 0x29, 0xc9, 0x13, 0x79, 0x0d, 0x16, 0xb8, 0x2f, 0xa1, 0x04, 0xf0, 0x14,
	0xc5, 0xd6, 0xe5, 0x87, 0xb0, 0x48, 0x31, 0xd5, 0xdb, 0x9c, 0x62, 0xdb, 0xc1, 0x5d, 0x97, 0xf2,
	0x6c, 0xdd, 0xa9, 0x3f, 0x3d, 0x5d, 0x99, 0xfa, 0xeb, 0x74, 0x65, 0xd5, 0xb2, 0xa9, 0xef, 0x9d,
	0x81, 0x9d, 0x46, 0xb0, 0x4f, 0xfc, 0xcf, 0x3a, 0x31, 0x8f, 0x1a, 0xf4, 0x49, 0x07, 0x91, 0xfa,
	0x8e, 0x4b, 0xb5, 0x38, 0x91, 0xfc, 0x39, 0x94, 0x82, 0xac, 0x20, 0x6f, 0x1f, 0x19, 0xd8, 0x35,
	0xcb, 0xb9, 0x0b, 0x71, 0x47, 0x69, 0xe4, 0x55, 0x98, 0x27, 0x54, 0xf7, 0xe8, 0x81, 0xed, 0x20,
	0x42, 0x75, 0xa7, 0x53, 0xce, 0x57, 0xa5, 0x5a, 0x5e, 0x8b, 0xac, 0xaa, 0x3f, 0x4a, 0x70, 0x25,
	0x21, 0x9f, 0x72, 0x05, 0xa0, 0x8d, 0x8d, 0xa3, 0xc0, 0x29, 0x89, 0xd9, 0x86, 0x56, 0x7c, 0xcf,
	0x3b, 0xf8, 0x18, 0x79, 0x3c, 0x1c, 0x4d, 0xa7, 0x28, 0x25, 0x2b, 0xbd, 0x0d, 0xec, 0xff, 0xe8,
	0x52, 0xbb, 0x4d, 0xea, 0xf7, 0x90, 0xa1, 0x45, 0x69, 0xd4, 0x6b, 0xf0, 0x7a, 0xa4, 0x94, 0x35,
	0x44, 0x3a, 0xd8, 0x25, 0x48, 0xfd, 0x47, 0x1a, 0x28, 0x73, 0xdf, 0xd9, 0x94, 0x32, 0xe7, 0x29,
	0xe0, 0x14, 0x3b, 0xae, 0x89, 0x4e, 0x98, 0x87, 0x97, 0xb5, 0xc8, 0x6a, 0x24, 0xd4, 0x5c, 0x96,
	0x50, 0xf3, 0x13, 0x09, 0x55, 0x5e, 0x86, 0x22, 0x72, 0xf5, 0x56, 0x1b, 0x95, 0x0b, 0x55, 0xa9,
	0x36, 0xa3, 0x05, 0x4f, 0x91, 0x14, 0xf8, 0x61, 0x8a, 0x14, 0x3c, 0x9f, 0x86, 0x05, 0xfe, 0xae,
	0x5f, 0xd4, 0x13, 0xc8, 0x41, 0xd2, 0x91, 0xc8, 0x8d, 0x73, 0x24, 0xf2, 0x2f, 0xf1, 0x48, 0x14,
	0x5e, 0xd6, 0x91, 0x28, 0x26, 0x1e, 0x09, 0x05, 0xca, 0xd1, 0x0c, 0x8b, 0xf4, 0xff, 0x26, 0xc1,
	0x4c, 0x93, 0x58, 0x6c, 0x5f, 0x26, 0x90, 0xf6, 0x3d, 0x98, 0x63, 0x2b, 0x41, 0x12, 0x2f, 0x76,
	0xf6, 0xc3, 0x14, 0x42, 0x99, 0x1f, 0x64, 0x5f, 0x39, 0x1f, 0x52, 0x16, 0xab, 0xaa, 0xcc, 0xca,
	0x88, 0xc5, 0x21, 0x82, 0xfb, 0x16, 0xe6, 0x9b, 0xc4, 0xba, 0xdb, 0xd6, 0x6d, 0x87, 0x87, 0x3e,
	0x99, 0xc2, 0x22, 0x5c, 0xc4, 0xc0, 0x9e, 0xc9, 0x91, 0x39, 0x86, 0x8c, 0xad, 0xab, 0x65, 0x58,
	0x1e, 0xd4, 0x17, 0x9e, 0xfd, 0x21, 0xc1, 0x5c, 0x93, 0x58, 0x0f, 0x6c, 0x7a, 0x68, 0x7a, 0xfa,
	0xf1, 0xab, 0xf5, 0x4b, 0xfe, 0x0c, 0xe6, 0x8f, 0x03, 0xe5, 0x17, 0xaa, 0xf6, 0x08, 0x8b, 0x7a,
	0x15, 0xae, 0x84, 0x82, 0x12, 0xc1, 0xfe, 0x2b, 0x81, 0xdc, 0x24, 0xd6, 0xa7, 0x1d, 0x33, 0xdc,
	0x95, 0x53, 0x62, 0x5e, 0x82, 0x82, 0x1d, 0x0a, 0x95, 0x3f, 0x24, 0x64, 0x22, 0x97, 0xa1, 0xfd,
	0xe5, 0xb3, 0xb4, 0xbf, 0xc2, 0xa4, 0xdb, 0x5f, 0x71, 0xa0, 0xfd, 0xdd, 0x00, 0x25, 0x1e, 0xbf,
	0x48, 0x8f, 0x06, 0x4b, 0xfc, 0x78, 0x36, 0xd9, 0x34, 0xb0, 0xe7, 0xe1, 0xc7, 0xb6, 0x89, 0xbc,
	0x94, 0xfc, 0x54, 0x61, 0xae, 0x4b, 0x90, 0xb7, 0x6d, 0x9a, 0x1e, 0x22, 0x24, 0x98, 0x75, 0xc2,
	0x4b, 0x6a, 0x05, 0x6e, 0x24, 0x71, 0x0a, 0xcd, 0x4f, 0xd8, 0x4e, 0x69, 0xce, 0x04, 0x25, 0xdf,
	0x80, 0xeb, 0x09, 0x94, 0x42, 0xf1, 0x57, 0x09, 0x16, 0xc3, 0x5d, 0x88, 0xf5, 0xdf, 0xf4, 0x1a,
	0x30, 0x43, 0x93, 0x1c, 0x7f, 0x90, 0x5b, 0xb0, 0xe4, 0xd8, 0xee, 0x41, 0xac, 0x5b, 0x5f, 0xac,
	0xd1, 0x24, 0x72, 0xa9, 0xd7, 0xe1, 0x5a, 0xcc, 0x51, 0x11, 0x46, 0x93, 0xbd, 0xdc, 0x47, 0xb4,
	0xa9, 0x9f, 0xf4, 0xdb, 0xe9, 0xc7, 0x5d, 0xa7, 0x95, 0x9a, 0xbe, 0x65, 0x28, 0xba, 0x0c, 0x13,
	0x94, 0x74, 0xf0, 0xa4, 0xbe, 0x09, 0x37, 0x87, 0xd2, 0x09, 0xcd, 0xbf, 0x25, 0xb6, 0x5b, 0xbc,
	0x7e, 0x26, 0x7a, 0x4b, 0xd6, 0xc4, 0xdd, 0x14, 0x39, 0x53, 0xd1, 0xe5, 0xa4, 0x5b, 0x2c, 0x3f,
	0x91, 0x5b, 0x2c, 0xa8, 0x9b, 0x68, 0x70, 0x22, 0xf8, 0x2d, 0x36, 0x3a, 0x1c, 0x60, 0xcb, 0x6a,
	0xa3, 0x5e, 0x51, 0xed, 0x1f, 0xdb, 0xd4, 0x38, 0x1c, 0x1e, 0xbf, 0x7a, 0x13, 0x56, 0x86, 0x18,
	0x09, 0xde, 0x5d, 0x76, 0x29, 0xf2, 0xcc, 0x8b, 0x33, 0x79, 0xe1, 0x7d, 0x54, 0xa1, 0x3a, 0x8c,
	0x4d, 0x28, 0xfe, 0x3e, 0x0d, 0x97, 0xc2, 0x85, 0xf5, 0x4a, 0xf7, 0x6f, 0x17, 0x66, 0x75, 0xf3,
	0xc5, 0x66, 0x9b, 0x3e, 0x41, 0xc2, 0xe4, 0x51, 0x48, 0x9a, 0x3c, 0x92, 0xaa, 0xa6, 0x38, 0x99,
	0xaa, 0x59, 0xee, 0x35, 0xcd, 0xc8, 0xc5, 0xfa, 0x90, 0x6d, 0x2b, 0xdf, 0xf9, 0xfb, 0x0e, 0xf2,
	0x2c, 0xe4, 0x1a, 0x4f, 0x46, 0xd5, 0x4b, 0xd6, 0x7c, 0x07, 0xdb, 0x9c, 0xc8, 0x2e, 0x3c, 0xf8,
	0x4e, 0x62, 0xae, 0x89, 0xd7, 0xff, 0xcf, 0x1d, 0x1f, 0xdc, 0x00, 0x31, 0x2f, 0x7a, 0x6e, 0x6e,
	0x9e, 0x96, 0x20, 0xd7, 0x24, 0x96, 0xdc, 0x86, 0x4b, 0x03, 0x5f, 0xd9, 0x6f, 0x0f, 0xff, 0x4c,
	0x8d, 0x7c, 0xc5, 0x28, 0x1b, 0x99, 0xa1, 0x3d, 0xd5, 0xb0, 0x1a, 0x9b, 0x01, 0xb2, 0xa9, 0xf9,
	0xd0, 0x8c, 0x6a, 0xe1, 0x9b, 0x55, 0xc6, 0x70, 0x79, 0xf0, 0xbb, 0x62, 0x6d, 0x14, 0x47, 0x1f,
	0xab, 0x6c, 0x66, 0xc7, 0x0a, 0xc1, 0x07, 0x50, 0xe0, 0x93, 0xb4, 0x9a, 0x6a, 0xcc, 0x30, 0xca,
	0xda, 0x68, 0x8c, 0x20, 0xb6, 0x61, 0x2e, 0x3c, 0xc6, 0xd6, 0x52, 0x4d, 0x43, 0x48, 0xe5, 0xdd,
	0xac, 0x48, 0x21, 0xf5, 0x35, 0xcc, 0x88, 0x92, 0x7d, 0x2b, 0xd5, 0xba, 0x07, 0x53, 0xd6, 0x33,
	0xc1, 0x84, 0x42, 0x17, 0x4a, 0xd1, 0x59, 0xf0, 0x9d, 0x54, 0x86, 0x08, 0x5a, 0x79, 0x6f, 0x1c,
	0xb4, 0x90, 0xfd, 0x06, 0x16, 0xe3, 0x43, 0x56, 0x7d, 0xd4, 0x2e, 0x0f, 0xe2, 0x95, 0xf7, 0xc7,
	0xc3, 0x0b, 0xf1, 0x13, 0x58, 0x88, 0x4d, 0x5b, 0xe9, 0x69, 0x8b, 0xc2, 0x95, 0xdb, 0x63, 0xc1,
	0x85, 0xb2, 0x07, 0xf3, 0x91, 0xa1, 0xeb, 0x56, 0xb6, 0xca, 0x66, 0x60, 0x65, 0x6b, 0x0c, 0xb0,
	0xd0, 0xfc, 0x41, 0x82, 0xe5, 0x21, 0x33, 0x52, 0x3a, 0x5f, 0xb2, 0x91, 0xf2, 0xd1, 0x05, 0x8c,
	0xc2, 0xa9, 0x8f, 0x8d, 0x4e, 0xeb, 0x19, 0x2a, 0x28, 0xd4, 0x0b, 0x6e, 0x8f, 0x05, 0x17, 0xca,
	0xfe, 0x55, 0x90, 0x38, 0xb9, 0xa4, 0xf7, 0xb2, 0x24, 0x13, 0xe5, 0x83, 0xb1, 0x4d, 0x84, 0x1b,
	0xdf, 0x4b, 0x70, 0x35, 0x79, 0xd0, 0xd9, 0xcc, 0x90, 0xd7, 0x88, 0x8d, 0xf2, 0xe1, 0xf8, 0x36,
	0xc2, 0x13, 0x03, 0x66, 0xfb, 0xe3, 0xcf, 0x6a, 0xb6, 0xca, 0x52, 0xea, 0xd9, 0x70, 0x03, 0xe1,
	0x26, 0x0f, 0x00, 0x9b, 0x19, 0x72, 0x18, 0xb1, 0x19, 0x11, 0x6e, 0xea, 0x28, 0xe0, 0x77, 0x9c,
	0xf8, 0x18, 0x90, 0x1e, 0x4e, 0x0c, 0x3f, 0xa2, 0xe3, 0x0c, 0xbd, 0xe0, 0xef, 0xdc, 0x7f, 0x7a,
	0x56, 0x91, 0x9e, 0x9d, 0x55, 0xa4, 0xe7, 0x67, 0x15, 0xe9, 0xa7, 0xf3, 0xca, 0xd4, 0xb3, 0xf3,
	0xca, 0xd4, 0x9f, 0xe7, 0x95, 0xa9, 0x2f, 0x6e, 0xa5, 0x7e, 0xdf, 0x9e, 0x34, 0x7a, 0xff, 0xdc,
	0xf7, 0xa7, 0xaf, 0x56, 0x91, 0xfd, 0x43, 0x7e, 0xeb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x9f, 0xe7, 0xb1, 0xf3, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddStakePool(ctx context.Context, in *MsgAddStakePool, opts ...grpc.CallOption) (*MsgAddStakePoolResponse, error)
	AddStakeItem(ctx context.Context, in *MsgAddStakeItem, opts ...grpc.CallOption) (*MsgAddStakeItemResponse, error)
	AddRewardPool(ctx context.Context, in *MsgAddRewardPool, opts ...grpc.CallOption) (*MsgAddRewardPoolResponse, error)
	Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error)
	ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	UpdateStakeItem(ctx context.Context, in *MsgUpdateStakeItem, opts ...grpc.CallOption) (*MsgUpdateStakeItemResponse, error)
	AddMiningProvider(ctx context.Context, in *MsgAddMiningProvider, opts ...grpc.CallOption) (*MsgAddMiningProviderResponse, error)
	RmMiningProvider(ctx context.Context, in *MsgRmMiningProvider, opts ...grpc.CallOption) (*MsgRmMiningProviderResponse, error)
	AddRewardToken(ctx context.Context, in *MsgAddRewardToken, opts ...grpc.CallOption) (*MsgAddRewardTokenResponse, error)
	SetMaxRewardPoolNumber(ctx context.Context, in *MsgSetMaxRewardPoolNumber, opts ...grpc.CallOption) (*MsgSetMaxRewardPoolNumberResponse, error)
	UpdateRewardPool(ctx context.Context, in *MsgUpdateRewardPool, opts ...grpc.CallOption) (*MsgUpdateRewardPoolResponse, error)
	ToggleProviderSwitch(ctx context.Context, in *MsgToggleProviderSwitch, opts ...grpc.CallOption) (*MsgToggleProviderSwitchResponse, error)
	SetMaxStakeItemNumber(ctx context.Context, in *MsgSetMaxStakeItemNumber, opts ...grpc.CallOption) (*MsgSetMaxStakeItemNumberResponse, error)
	AddReward(ctx context.Context, in *MsgAddReward, opts ...grpc.CallOption) (*MsgAddRewardResponse, error)
	ToggleEmergencySwitch(ctx context.Context, in *MsgToggleEmergencySwitch, opts ...grpc.CallOption) (*MsgToggleEmergencySwitchResponse, error)
	EmergencyWithdraw(ctx context.Context, in *MsgEmergencyWithdraw, opts ...grpc.CallOption) (*MsgEmergencyWithdrawResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddStakePool(ctx context.Context, in *MsgAddStakePool, opts ...grpc.CallOption) (*MsgAddStakePoolResponse, error) {
	out := new(MsgAddStakePoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddStakePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddStakeItem(ctx context.Context, in *MsgAddStakeItem, opts ...grpc.CallOption) (*MsgAddStakeItemResponse, error) {
	out := new(MsgAddStakeItemResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddStakeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewardPool(ctx context.Context, in *MsgAddRewardPool, opts ...grpc.CallOption) (*MsgAddRewardPoolResponse, error) {
	out := new(MsgAddRewardPoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddRewardPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error) {
	out := new(MsgStakeResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error) {
	out := new(MsgClaimRewardResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakeItem(ctx context.Context, in *MsgUpdateStakeItem, opts ...grpc.CallOption) (*MsgUpdateStakeItemResponse, error) {
	out := new(MsgUpdateStakeItemResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/UpdateStakeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMiningProvider(ctx context.Context, in *MsgAddMiningProvider, opts ...grpc.CallOption) (*MsgAddMiningProviderResponse, error) {
	out := new(MsgAddMiningProviderResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddMiningProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RmMiningProvider(ctx context.Context, in *MsgRmMiningProvider, opts ...grpc.CallOption) (*MsgRmMiningProviderResponse, error) {
	out := new(MsgRmMiningProviderResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/RmMiningProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewardToken(ctx context.Context, in *MsgAddRewardToken, opts ...grpc.CallOption) (*MsgAddRewardTokenResponse, error) {
	out := new(MsgAddRewardTokenResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddRewardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxRewardPoolNumber(ctx context.Context, in *MsgSetMaxRewardPoolNumber, opts ...grpc.CallOption) (*MsgSetMaxRewardPoolNumberResponse, error) {
	out := new(MsgSetMaxRewardPoolNumberResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/SetMaxRewardPoolNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRewardPool(ctx context.Context, in *MsgUpdateRewardPool, opts ...grpc.CallOption) (*MsgUpdateRewardPoolResponse, error) {
	out := new(MsgUpdateRewardPoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/UpdateRewardPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleProviderSwitch(ctx context.Context, in *MsgToggleProviderSwitch, opts ...grpc.CallOption) (*MsgToggleProviderSwitchResponse, error) {
	out := new(MsgToggleProviderSwitchResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/ToggleProviderSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxStakeItemNumber(ctx context.Context, in *MsgSetMaxStakeItemNumber, opts ...grpc.CallOption) (*MsgSetMaxStakeItemNumberResponse, error) {
	out := new(MsgSetMaxStakeItemNumberResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/SetMaxStakeItemNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddReward(ctx context.Context, in *MsgAddReward, opts ...grpc.CallOption) (*MsgAddRewardResponse, error) {
	out := new(MsgAddRewardResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleEmergencySwitch(ctx context.Context, in *MsgToggleEmergencySwitch, opts ...grpc.CallOption) (*MsgToggleEmergencySwitchResponse, error) {
	out := new(MsgToggleEmergencySwitchResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/ToggleEmergencySwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EmergencyWithdraw(ctx context.Context, in *MsgEmergencyWithdraw, opts ...grpc.CallOption) (*MsgEmergencyWithdrawResponse, error) {
	out := new(MsgEmergencyWithdrawResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/EmergencyWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddStakePool(context.Context, *MsgAddStakePool) (*MsgAddStakePoolResponse, error)
	AddStakeItem(context.Context, *MsgAddStakeItem) (*MsgAddStakeItemResponse, error)
	AddRewardPool(context.Context, *MsgAddRewardPool) (*MsgAddRewardPoolResponse, error)
	Stake(context.Context, *MsgStake) (*MsgStakeResponse, error)
	ClaimReward(context.Context, *MsgClaimReward) (*MsgClaimRewardResponse, error)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	UpdateStakeItem(context.Context, *MsgUpdateStakeItem) (*MsgUpdateStakeItemResponse, error)
	AddMiningProvider(context.Context, *MsgAddMiningProvider) (*MsgAddMiningProviderResponse, error)
	RmMiningProvider(context.Context, *MsgRmMiningProvider) (*MsgRmMiningProviderResponse, error)
	AddRewardToken(context.Context, *MsgAddRewardToken) (*MsgAddRewardTokenResponse, error)
	SetMaxRewardPoolNumber(context.Context, *MsgSetMaxRewardPoolNumber) (*MsgSetMaxRewardPoolNumberResponse, error)
	UpdateRewardPool(context.Context, *MsgUpdateRewardPool) (*MsgUpdateRewardPoolResponse, error)
	ToggleProviderSwitch(context.Context, *MsgToggleProviderSwitch) (*MsgToggleProviderSwitchResponse, error)
	SetMaxStakeItemNumber(context.Context, *MsgSetMaxStakeItemNumber) (*MsgSetMaxStakeItemNumberResponse, error)
	AddReward(context.Context, *MsgAddReward) (*MsgAddRewardResponse, error)
	ToggleEmergencySwitch(context.Context, *MsgToggleEmergencySwitch) (*MsgToggleEmergencySwitchResponse, error)
	EmergencyWithdraw(context.Context, *MsgEmergencyWithdraw) (*MsgEmergencyWithdrawResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddStakePool(ctx context.Context, req *MsgAddStakePool) (*MsgAddStakePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStakePool not implemented")
}
func (*UnimplementedMsgServer) AddStakeItem(ctx context.Context, req *MsgAddStakeItem) (*MsgAddStakeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStakeItem not implemented")
}
func (*UnimplementedMsgServer) AddRewardPool(ctx context.Context, req *MsgAddRewardPool) (*MsgAddRewardPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewardPool not implemented")
}
func (*UnimplementedMsgServer) Stake(ctx context.Context, req *MsgStake) (*MsgStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedMsgServer) ClaimReward(ctx context.Context, req *MsgClaimReward) (*MsgClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) UpdateStakeItem(ctx context.Context, req *MsgUpdateStakeItem) (*MsgUpdateStakeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakeItem not implemented")
}
func (*UnimplementedMsgServer) AddMiningProvider(ctx context.Context, req *MsgAddMiningProvider) (*MsgAddMiningProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMiningProvider not implemented")
}
func (*UnimplementedMsgServer) RmMiningProvider(ctx context.Context, req *MsgRmMiningProvider) (*MsgRmMiningProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmMiningProvider not implemented")
}
func (*UnimplementedMsgServer) AddRewardToken(ctx context.Context, req *MsgAddRewardToken) (*MsgAddRewardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewardToken not implemented")
}
func (*UnimplementedMsgServer) SetMaxRewardPoolNumber(ctx context.Context, req *MsgSetMaxRewardPoolNumber) (*MsgSetMaxRewardPoolNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxRewardPoolNumber not implemented")
}
func (*UnimplementedMsgServer) UpdateRewardPool(ctx context.Context, req *MsgUpdateRewardPool) (*MsgUpdateRewardPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRewardPool not implemented")
}
func (*UnimplementedMsgServer) ToggleProviderSwitch(ctx context.Context, req *MsgToggleProviderSwitch) (*MsgToggleProviderSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleProviderSwitch not implemented")
}
func (*UnimplementedMsgServer) SetMaxStakeItemNumber(ctx context.Context, req *MsgSetMaxStakeItemNumber) (*MsgSetMaxStakeItemNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxStakeItemNumber not implemented")
}
func (*UnimplementedMsgServer) AddReward(ctx context.Context, req *MsgAddReward) (*MsgAddRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReward not implemented")
}
func (*UnimplementedMsgServer) ToggleEmergencySwitch(ctx context.Context, req *MsgToggleEmergencySwitch) (*MsgToggleEmergencySwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEmergencySwitch not implemented")
}
func (*UnimplementedMsgServer) EmergencyWithdraw(ctx context.Context, req *MsgEmergencyWithdraw) (*MsgEmergencyWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmergencyWithdraw not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddStakePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStakePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStakePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddStakePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStakePool(ctx, req.(*MsgAddStakePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddStakeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStakeItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStakeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddStakeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStakeItem(ctx, req.(*MsgAddStakeItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewardPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewardPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewardPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddRewardPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewardPool(ctx, req.(*MsgAddRewardPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Stake(ctx, req.(*MsgStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimReward(ctx, req.(*MsgClaimReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakeItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/UpdateStakeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakeItem(ctx, req.(*MsgUpdateStakeItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMiningProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMiningProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMiningProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddMiningProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMiningProvider(ctx, req.(*MsgAddMiningProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RmMiningProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRmMiningProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RmMiningProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/RmMiningProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RmMiningProvider(ctx, req.(*MsgRmMiningProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewardToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddRewardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewardToken(ctx, req.(*MsgAddRewardToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxRewardPoolNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxRewardPoolNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxRewardPoolNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/SetMaxRewardPoolNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxRewardPoolNumber(ctx, req.(*MsgSetMaxRewardPoolNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRewardPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRewardPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRewardPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/UpdateRewardPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRewardPool(ctx, req.(*MsgUpdateRewardPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleProviderSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleProviderSwitch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleProviderSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/ToggleProviderSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleProviderSwitch(ctx, req.(*MsgToggleProviderSwitch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxStakeItemNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxStakeItemNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxStakeItemNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/SetMaxStakeItemNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxStakeItemNumber(ctx, req.(*MsgSetMaxStakeItemNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddReward(ctx, req.(*MsgAddReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleEmergencySwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleEmergencySwitch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleEmergencySwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/ToggleEmergencySwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleEmergencySwitch(ctx, req.(*MsgToggleEmergencySwitch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EmergencyWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEmergencyWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EmergencyWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/EmergencyWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EmergencyWithdraw(ctx, req.(*MsgEmergencyWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.mining.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStakePool",
			Handler:    _Msg_AddStakePool_Handler,
		},
		{
			MethodName: "AddStakeItem",
			Handler:    _Msg_AddStakeItem_Handler,
		},
		{
			MethodName: "AddRewardPool",
			Handler:    _Msg_AddRewardPool_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Msg_Stake_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _Msg_ClaimReward_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "UpdateStakeItem",
			Handler:    _Msg_UpdateStakeItem_Handler,
		},
		{
			MethodName: "AddMiningProvider",
			Handler:    _Msg_AddMiningProvider_Handler,
		},
		{
			MethodName: "RmMiningProvider",
			Handler:    _Msg_RmMiningProvider_Handler,
		},
		{
			MethodName: "AddRewardToken",
			Handler:    _Msg_AddRewardToken_Handler,
		},
		{
			MethodName: "SetMaxRewardPoolNumber",
			Handler:    _Msg_SetMaxRewardPoolNumber_Handler,
		},
		{
			MethodName: "UpdateRewardPool",
			Handler:    _Msg_UpdateRewardPool_Handler,
		},
		{
			MethodName: "ToggleProviderSwitch",
			Handler:    _Msg_ToggleProviderSwitch_Handler,
		},
		{
			MethodName: "SetMaxStakeItemNumber",
			Handler:    _Msg_SetMaxStakeItemNumber_Handler,
		},
		{
			MethodName: "AddReward",
			Handler:    _Msg_AddReward_Handler,
		},
		{
			MethodName: "ToggleEmergencySwitch",
			Handler:    _Msg_ToggleEmergencySwitch_Handler,
		},
		{
			MethodName: "EmergencyWithdraw",
			Handler:    _Msg_EmergencyWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mining/tx.proto",
}

func (m *MsgAddStakePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeItemInfoList) > 0 {
		for iNdEx := len(m.StakeItemInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeItemInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RewardPoolInfoList) > 0 {
		for iNdEx := len(m.RewardPoolInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPoolInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRewardPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRewardPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRewardPoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateStakeItemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStakeItemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStakeItemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.LockSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStakePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddStakeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LockSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStakeItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakeItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakeItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeItemIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeItemIndex))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.StakeAmount.Size()
		i -= size
		if _, err := m.StakeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WithdrawAmount.Size()
		i -= size
		if _, err := m.WithdrawAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.StakeRecordIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.LockSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x20
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakeItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakeItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakeItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMiningProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMiningProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMiningProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMiningProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMiningProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMiningProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRmMiningProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRmMiningProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRmMiningProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRmMiningProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRmMiningProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRmMiningProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinTotalRewardAmount.Size()
		i -= size
		if _, err := m.MinTotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxRewardPoolNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxRewardPoolNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxRewardPoolNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxRewardPoolNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxRewardPoolNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxRewardPoolNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardPoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardPoolIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleProviderSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleProviderSwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleProviderSwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleProviderSwitchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleProviderSwitchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleProviderSwitchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxStakeItemNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxStakeItemNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxStakeItemNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxStakeItemNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxStakeItemNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxStakeItemNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.StartTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.AddAmount.Size()
		i -= size
		if _, err := m.AddAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardPoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardPoolIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleEmergencySwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleEmergencySwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleEmergencySwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleEmergencySwitchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleEmergencySwitchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleEmergencySwitchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEmergencyWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmergencyWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmergencyWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StakePoolIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakePoolIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEmergencyWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmergencyWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmergencyWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddStakePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RewardPoolInfoList) > 0 {
		for _, e := range m.RewardPoolInfoList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.StakeItemInfoList) > 0 {
		for _, e := range m.StakeItemInfoList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *CreateRewardPoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovTx(uint64(m.StartTimestamp))
	}
	return n
}

func (m *CreateStakeItemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockSecond != 0 {
		n += 1 + sovTx(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddStakePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddStakeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.LockSecond != 0 {
		n += 1 + sovTx(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Enable {
		n += 2
	}
	return n
}

func (m *MsgAddStakeItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovTx(uint64(m.StartTimestamp))
	}
	return n
}

func (m *MsgAddRewardPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	l = m.StakeAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StakeItemIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeItemIndex))
	}
	return n
}

func (m *MsgStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *MsgClaimRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeRecordIndex))
	}
	l = m.WithdrawAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStakeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.LockSecond != 0 {
		n += 1 + sovTx(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Enable {
		n += 2
	}
	return n
}

func (m *MsgUpdateStakeItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMiningProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMiningProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRmMiningProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRmMiningProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewardToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinTotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddRewardTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMaxRewardPoolNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	return n
}

func (m *MsgSetMaxRewardPoolNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.RewardPoolIndex != 0 {
		n += 1 + sovTx(uint64(m.RewardPoolIndex))
	}
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateRewardPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleProviderSwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgToggleProviderSwitchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMaxStakeItemNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	return n
}

func (m *MsgSetMaxStakeItemNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.RewardPoolIndex != 0 {
		n += 1 + sovTx(uint64(m.RewardPoolIndex))
	}
	l = m.AddAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovTx(uint64(m.StartTimestamp))
	}
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleEmergencySwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	return n
}

func (m *MsgToggleEmergencySwitchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEmergencyWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakePoolIndex != 0 {
		n += 1 + sovTx(uint64(m.StakePoolIndex))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *MsgEmergencyWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddStakePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPoolInfoList = append(m.RewardPoolInfoList, &CreateRewardPoolInfo{})
			if err := m.RewardPoolInfoList[len(m.RewardPoolInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeItemInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeItemInfoList = append(m.StakeItemInfoList, &CreateStakeItemInfo{})
			if err := m.StakeItemInfoList[len(m.StakeItemInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRewardPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRewardPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRewardPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStakeItemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStakeItemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStakeItemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakeItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakeItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakeItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeItemIndex", wireType)
			}
			m.StakeItemIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeItemIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakeItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakeItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakeItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMiningProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMiningProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMiningProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMiningProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMiningProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMiningProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRmMiningProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRmMiningProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRmMiningProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRmMiningProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRmMiningProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRmMiningProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxRewardPoolNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxRewardPoolNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxRewardPoolNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxRewardPoolNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxRewardPoolNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxRewardPoolNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolIndex", wireType)
			}
			m.RewardPoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardPoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleProviderSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleProviderSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleProviderSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleProviderSwitchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleProviderSwitchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleProviderSwitchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxStakeItemNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxStakeItemNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxStakeItemNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxStakeItemNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxStakeItemNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxStakeItemNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolIndex", wireType)
			}
			m.RewardPoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardPoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleEmergencySwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleEmergencySwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleEmergencySwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleEmergencySwitchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleEmergencySwitchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleEmergencySwitchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmergencyWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmergencyWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmergencyWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePoolIndex", wireType)
			}
			m.StakePoolIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakePoolIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmergencyWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmergencyWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmergencyWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
