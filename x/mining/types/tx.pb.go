// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mining/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_stafihub_stafihub_utils "github.com/stafihub/stafihub/utils"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddStakePool struct {
	Creator              string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeTokenDenom      string                                 `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	MaxRewardPools       uint32                                 `protobuf:"varint,3,opt,name=maxRewardPools,proto3" json:"maxRewardPools,omitempty"`
	MinTotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=minTotalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minTotalRewardAmount"`
}

func (m *MsgAddStakePool) Reset()         { *m = MsgAddStakePool{} }
func (m *MsgAddStakePool) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakePool) ProtoMessage()    {}
func (*MsgAddStakePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{0}
}
func (m *MsgAddStakePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakePool.Merge(m, src)
}
func (m *MsgAddStakePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakePool proto.InternalMessageInfo

func (m *MsgAddStakePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddStakePool) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *MsgAddStakePool) GetMaxRewardPools() uint32 {
	if m != nil {
		return m.MaxRewardPools
	}
	return 0
}

type MsgAddStakePoolResponse struct {
}

func (m *MsgAddStakePoolResponse) Reset()         { *m = MsgAddStakePoolResponse{} }
func (m *MsgAddStakePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakePoolResponse) ProtoMessage()    {}
func (*MsgAddStakePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{1}
}
func (m *MsgAddStakePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakePoolResponse.Merge(m, src)
}
func (m *MsgAddStakePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakePoolResponse proto.InternalMessageInfo

type MsgAddStakeItem struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LockSecond      uint64                                 `protobuf:"varint,2,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,3,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
	Enable          bool                                   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *MsgAddStakeItem) Reset()         { *m = MsgAddStakeItem{} }
func (m *MsgAddStakeItem) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakeItem) ProtoMessage()    {}
func (*MsgAddStakeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{2}
}
func (m *MsgAddStakeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakeItem.Merge(m, src)
}
func (m *MsgAddStakeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakeItem proto.InternalMessageInfo

func (m *MsgAddStakeItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddStakeItem) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

func (m *MsgAddStakeItem) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type MsgAddStakeItemResponse struct {
}

func (m *MsgAddStakeItemResponse) Reset()         { *m = MsgAddStakeItemResponse{} }
func (m *MsgAddStakeItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddStakeItemResponse) ProtoMessage()    {}
func (*MsgAddStakeItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{3}
}
func (m *MsgAddStakeItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStakeItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStakeItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStakeItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStakeItemResponse.Merge(m, src)
}
func (m *MsgAddStakeItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStakeItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStakeItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStakeItemResponse proto.InternalMessageInfo

type MsgAddRewardPool struct {
	Creator           string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeTokenDenom   string                                 `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	RewardTokenDenom  string                                 `protobuf:"bytes,3,opt,name=rewardTokenDenom,proto3" json:"rewardTokenDenom,omitempty"`
	TotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=totalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalRewardAmount"`
	RewardPerSecond   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=rewardPerSecond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewardPerSecond"`
	StartTimestamp    uint64                                 `protobuf:"varint,6,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
}

func (m *MsgAddRewardPool) Reset()         { *m = MsgAddRewardPool{} }
func (m *MsgAddRewardPool) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPool) ProtoMessage()    {}
func (*MsgAddRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{4}
}
func (m *MsgAddRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPool.Merge(m, src)
}
func (m *MsgAddRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPool proto.InternalMessageInfo

func (m *MsgAddRewardPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddRewardPool) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *MsgAddRewardPool) GetRewardTokenDenom() string {
	if m != nil {
		return m.RewardTokenDenom
	}
	return ""
}

func (m *MsgAddRewardPool) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

type MsgAddRewardPoolResponse struct {
}

func (m *MsgAddRewardPoolResponse) Reset()         { *m = MsgAddRewardPoolResponse{} }
func (m *MsgAddRewardPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewardPoolResponse) ProtoMessage()    {}
func (*MsgAddRewardPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{5}
}
func (m *MsgAddRewardPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewardPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewardPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewardPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewardPoolResponse.Merge(m, src)
}
func (m *MsgAddRewardPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewardPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewardPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewardPoolResponse proto.InternalMessageInfo

type MsgStake struct {
	Creator        string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeToken     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=stakeToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"stakeToken"`
	StakeItemIndex uint32                                  `protobuf:"varint,3,opt,name=stakeItemIndex,proto3" json:"stakeItemIndex,omitempty"`
}

func (m *MsgStake) Reset()         { *m = MsgStake{} }
func (m *MsgStake) String() string { return proto.CompactTextString(m) }
func (*MsgStake) ProtoMessage()    {}
func (*MsgStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{6}
}
func (m *MsgStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStake.Merge(m, src)
}
func (m *MsgStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStake proto.InternalMessageInfo

func (m *MsgStake) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStake) GetStakeItemIndex() uint32 {
	if m != nil {
		return m.StakeItemIndex
	}
	return 0
}

type MsgStakeResponse struct {
}

func (m *MsgStakeResponse) Reset()         { *m = MsgStakeResponse{} }
func (m *MsgStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeResponse) ProtoMessage()    {}
func (*MsgStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{7}
}
func (m *MsgStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeResponse.Merge(m, src)
}
func (m *MsgStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeResponse proto.InternalMessageInfo

type MsgClaimReward struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeTokenDenom  string `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	StakeRecordIndex uint32 `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *MsgClaimReward) Reset()         { *m = MsgClaimReward{} }
func (m *MsgClaimReward) String() string { return proto.CompactTextString(m) }
func (*MsgClaimReward) ProtoMessage()    {}
func (*MsgClaimReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{8}
}
func (m *MsgClaimReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimReward.Merge(m, src)
}
func (m *MsgClaimReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimReward proto.InternalMessageInfo

func (m *MsgClaimReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimReward) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *MsgClaimReward) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type MsgClaimRewardResponse struct {
}

func (m *MsgClaimRewardResponse) Reset()         { *m = MsgClaimRewardResponse{} }
func (m *MsgClaimRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardResponse) ProtoMessage()    {}
func (*MsgClaimRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{9}
}
func (m *MsgClaimRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardResponse.Merge(m, src)
}
func (m *MsgClaimRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardResponse proto.InternalMessageInfo

type MsgWithdraw struct {
	Creator          string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeToken       github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=stakeToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"stakeToken"`
	StakeRecordIndex uint32                                  `protobuf:"varint,3,opt,name=stakeRecordIndex,proto3" json:"stakeRecordIndex,omitempty"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{10}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

func (m *MsgWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdraw) GetStakeRecordIndex() uint32 {
	if m != nil {
		return m.StakeRecordIndex
	}
	return 0
}

type MsgWithdrawResponse struct {
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{11}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

type MsgProvideRewardToken struct {
	Creator string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Token   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=token,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"token"`
}

func (m *MsgProvideRewardToken) Reset()         { *m = MsgProvideRewardToken{} }
func (m *MsgProvideRewardToken) String() string { return proto.CompactTextString(m) }
func (*MsgProvideRewardToken) ProtoMessage()    {}
func (*MsgProvideRewardToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{12}
}
func (m *MsgProvideRewardToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideRewardToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideRewardToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideRewardToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideRewardToken.Merge(m, src)
}
func (m *MsgProvideRewardToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideRewardToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideRewardToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideRewardToken proto.InternalMessageInfo

func (m *MsgProvideRewardToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgProvideRewardTokenResponse struct {
}

func (m *MsgProvideRewardTokenResponse) Reset()         { *m = MsgProvideRewardTokenResponse{} }
func (m *MsgProvideRewardTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProvideRewardTokenResponse) ProtoMessage()    {}
func (*MsgProvideRewardTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{13}
}
func (m *MsgProvideRewardTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvideRewardTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvideRewardTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvideRewardTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvideRewardTokenResponse.Merge(m, src)
}
func (m *MsgProvideRewardTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvideRewardTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvideRewardTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvideRewardTokenResponse proto.InternalMessageInfo

type MsgUpdateStakePool struct {
	Creator              string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StakeTokenDenom      string                                 `protobuf:"bytes,2,opt,name=stakeTokenDenom,proto3" json:"stakeTokenDenom,omitempty"`
	MaxRewardPools       uint32                                 `protobuf:"varint,3,opt,name=maxRewardPools,proto3" json:"maxRewardPools,omitempty"`
	MinTotalRewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=minTotalRewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minTotalRewardAmount"`
}

func (m *MsgUpdateStakePool) Reset()         { *m = MsgUpdateStakePool{} }
func (m *MsgUpdateStakePool) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakePool) ProtoMessage()    {}
func (*MsgUpdateStakePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{14}
}
func (m *MsgUpdateStakePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakePool.Merge(m, src)
}
func (m *MsgUpdateStakePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakePool proto.InternalMessageInfo

func (m *MsgUpdateStakePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateStakePool) GetStakeTokenDenom() string {
	if m != nil {
		return m.StakeTokenDenom
	}
	return ""
}

func (m *MsgUpdateStakePool) GetMaxRewardPools() uint32 {
	if m != nil {
		return m.MaxRewardPools
	}
	return 0
}

type MsgUpdateStakePoolResponse struct {
}

func (m *MsgUpdateStakePoolResponse) Reset()         { *m = MsgUpdateStakePoolResponse{} }
func (m *MsgUpdateStakePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakePoolResponse) ProtoMessage()    {}
func (*MsgUpdateStakePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{15}
}
func (m *MsgUpdateStakePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakePoolResponse.Merge(m, src)
}
func (m *MsgUpdateStakePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakePoolResponse proto.InternalMessageInfo

type MsgUpdateStakeItem struct {
	Creator         string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index           uint32                                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	LockSecond      uint64                                 `protobuf:"varint,3,opt,name=lockSecond,proto3" json:"lockSecond,omitempty"`
	PowerRewardRate github_com_stafihub_stafihub_utils.Dec `protobuf:"bytes,4,opt,name=powerRewardRate,proto3,customtype=github.com/stafihub/stafihub/utils.Dec" json:"powerRewardRate"`
	Enable          bool                                   `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *MsgUpdateStakeItem) Reset()         { *m = MsgUpdateStakeItem{} }
func (m *MsgUpdateStakeItem) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakeItem) ProtoMessage()    {}
func (*MsgUpdateStakeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{16}
}
func (m *MsgUpdateStakeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakeItem.Merge(m, src)
}
func (m *MsgUpdateStakeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakeItem proto.InternalMessageInfo

func (m *MsgUpdateStakeItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateStakeItem) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MsgUpdateStakeItem) GetLockSecond() uint64 {
	if m != nil {
		return m.LockSecond
	}
	return 0
}

func (m *MsgUpdateStakeItem) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type MsgUpdateStakeItemResponse struct {
}

func (m *MsgUpdateStakeItemResponse) Reset()         { *m = MsgUpdateStakeItemResponse{} }
func (m *MsgUpdateStakeItemResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakeItemResponse) ProtoMessage()    {}
func (*MsgUpdateStakeItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{17}
}
func (m *MsgUpdateStakeItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakeItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakeItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakeItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakeItemResponse.Merge(m, src)
}
func (m *MsgUpdateStakeItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakeItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakeItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakeItemResponse proto.InternalMessageInfo

type MsgAddRewarder struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgAddRewarder) Reset()         { *m = MsgAddRewarder{} }
func (m *MsgAddRewarder) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewarder) ProtoMessage()    {}
func (*MsgAddRewarder) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{18}
}
func (m *MsgAddRewarder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewarder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewarder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewarder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewarder.Merge(m, src)
}
func (m *MsgAddRewarder) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewarder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewarder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewarder proto.InternalMessageInfo

func (m *MsgAddRewarder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddRewarder) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgAddRewarderResponse struct {
}

func (m *MsgAddRewarderResponse) Reset()         { *m = MsgAddRewarderResponse{} }
func (m *MsgAddRewarderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRewarderResponse) ProtoMessage()    {}
func (*MsgAddRewarderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{19}
}
func (m *MsgAddRewarderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRewarderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRewarderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRewarderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRewarderResponse.Merge(m, src)
}
func (m *MsgAddRewarderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRewarderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRewarderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRewarderResponse proto.InternalMessageInfo

type MsgRmRewarder struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgRmRewarder) Reset()         { *m = MsgRmRewarder{} }
func (m *MsgRmRewarder) String() string { return proto.CompactTextString(m) }
func (*MsgRmRewarder) ProtoMessage()    {}
func (*MsgRmRewarder) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{20}
}
func (m *MsgRmRewarder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRmRewarder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRmRewarder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRmRewarder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRmRewarder.Merge(m, src)
}
func (m *MsgRmRewarder) XXX_Size() int {
	return m.Size()
}
func (m *MsgRmRewarder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRmRewarder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRmRewarder proto.InternalMessageInfo

func (m *MsgRmRewarder) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRmRewarder) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgRmRewarderResponse struct {
}

func (m *MsgRmRewarderResponse) Reset()         { *m = MsgRmRewarderResponse{} }
func (m *MsgRmRewarderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRmRewarderResponse) ProtoMessage()    {}
func (*MsgRmRewarderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7cc93178595aaa, []int{21}
}
func (m *MsgRmRewarderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRmRewarderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRmRewarderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRmRewarderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRmRewarderResponse.Merge(m, src)
}
func (m *MsgRmRewarderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRmRewarderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRmRewarderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRmRewarderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddStakePool)(nil), "stafihub.stafihub.mining.MsgAddStakePool")
	proto.RegisterType((*MsgAddStakePoolResponse)(nil), "stafihub.stafihub.mining.MsgAddStakePoolResponse")
	proto.RegisterType((*MsgAddStakeItem)(nil), "stafihub.stafihub.mining.MsgAddStakeItem")
	proto.RegisterType((*MsgAddStakeItemResponse)(nil), "stafihub.stafihub.mining.MsgAddStakeItemResponse")
	proto.RegisterType((*MsgAddRewardPool)(nil), "stafihub.stafihub.mining.MsgAddRewardPool")
	proto.RegisterType((*MsgAddRewardPoolResponse)(nil), "stafihub.stafihub.mining.MsgAddRewardPoolResponse")
	proto.RegisterType((*MsgStake)(nil), "stafihub.stafihub.mining.MsgStake")
	proto.RegisterType((*MsgStakeResponse)(nil), "stafihub.stafihub.mining.MsgStakeResponse")
	proto.RegisterType((*MsgClaimReward)(nil), "stafihub.stafihub.mining.MsgClaimReward")
	proto.RegisterType((*MsgClaimRewardResponse)(nil), "stafihub.stafihub.mining.MsgClaimRewardResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "stafihub.stafihub.mining.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "stafihub.stafihub.mining.MsgWithdrawResponse")
	proto.RegisterType((*MsgProvideRewardToken)(nil), "stafihub.stafihub.mining.MsgProvideRewardToken")
	proto.RegisterType((*MsgProvideRewardTokenResponse)(nil), "stafihub.stafihub.mining.MsgProvideRewardTokenResponse")
	proto.RegisterType((*MsgUpdateStakePool)(nil), "stafihub.stafihub.mining.MsgUpdateStakePool")
	proto.RegisterType((*MsgUpdateStakePoolResponse)(nil), "stafihub.stafihub.mining.MsgUpdateStakePoolResponse")
	proto.RegisterType((*MsgUpdateStakeItem)(nil), "stafihub.stafihub.mining.MsgUpdateStakeItem")
	proto.RegisterType((*MsgUpdateStakeItemResponse)(nil), "stafihub.stafihub.mining.MsgUpdateStakeItemResponse")
	proto.RegisterType((*MsgAddRewarder)(nil), "stafihub.stafihub.mining.MsgAddRewarder")
	proto.RegisterType((*MsgAddRewarderResponse)(nil), "stafihub.stafihub.mining.MsgAddRewarderResponse")
	proto.RegisterType((*MsgRmRewarder)(nil), "stafihub.stafihub.mining.MsgRmRewarder")
	proto.RegisterType((*MsgRmRewarderResponse)(nil), "stafihub.stafihub.mining.MsgRmRewarderResponse")
}

func init() { proto.RegisterFile("mining/tx.proto", fileDescriptor_7b7cc93178595aaa) }

var fileDescriptor_7b7cc93178595aaa = []byte{
	// 912 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x6f, 0xeb, 0x44,
	0x10, 0x8f, 0xdb, 0xa6, 0xf4, 0x4d, 0xe8, 0xcb, 0xc3, 0xf4, 0xbd, 0xba, 0x16, 0xb8, 0x95, 0x25,
	0xda, 0x50, 0xa8, 0x4d, 0x4b, 0x25, 0xce, 0xfd, 0xc3, 0xa1, 0x02, 0x4b, 0x95, 0x5b, 0x54, 0x84,
	0x38, 0xd4, 0xb1, 0xb7, 0xae, 0x49, 0xec, 0x8d, 0xbc, 0x9b, 0x36, 0x5c, 0x10, 0x1f, 0x01, 0x89,
	0x2f, 0x03, 0x07, 0xc4, 0xb5, 0xc7, 0x9e, 0x10, 0xe2, 0x50, 0x41, 0xca, 0x07, 0x41, 0x5e, 0xdb,
	0x1b, 0xc7, 0x49, 0x1d, 0x07, 0x05, 0x09, 0xbd, 0x53, 0xec, 0xc9, 0x6f, 0xe7, 0x37, 0xbf, 0x99,
	0xd9, 0x9d, 0x35, 0xd4, 0x7d, 0x2f, 0xf0, 0x02, 0x57, 0xa7, 0x3d, 0xad, 0x13, 0x62, 0x8a, 0x45,
	0x89, 0x50, 0xeb, 0xca, 0xbb, 0xee, 0x36, 0x35, 0xfe, 0x10, 0x43, 0xe4, 0x15, 0x17, 0xbb, 0x98,
	0x81, 0xf4, 0xe8, 0x29, 0xc6, 0xcb, 0x8a, 0x8d, 0x89, 0x8f, 0x89, 0xde, 0xb4, 0x08, 0xd2, 0x6f,
	0x76, 0x9b, 0x88, 0x5a, 0xbb, 0xba, 0x8d, 0xbd, 0x20, 0xfe, 0x5f, 0xfd, 0x4b, 0x80, 0xba, 0x41,
	0xdc, 0x03, 0xc7, 0x39, 0xa3, 0x56, 0x0b, 0x9d, 0x62, 0xdc, 0x16, 0x25, 0x78, 0xc3, 0x0e, 0x91,
	0x45, 0x71, 0x28, 0x09, 0x1b, 0x42, 0xe3, 0x99, 0x99, 0xbe, 0x8a, 0x0d, 0xa8, 0x93, 0x08, 0x76,
	0x8e, 0x5b, 0x28, 0x38, 0x46, 0x01, 0xf6, 0xa5, 0x39, 0x86, 0xc8, 0x9b, 0xc5, 0x4d, 0x78, 0xee,
	0x5b, 0x3d, 0x13, 0xdd, 0x5a, 0xa1, 0x13, 0x39, 0x25, 0xd2, 0xfc, 0x86, 0xd0, 0x58, 0x36, 0x73,
	0x56, 0xb1, 0x09, 0x2b, 0xbe, 0x17, 0x9c, 0x63, 0x6a, 0xb5, 0x63, 0xf3, 0x81, 0x8f, 0xbb, 0x01,
	0x95, 0x16, 0x22, 0xb7, 0x87, 0xda, 0xdd, 0xc3, 0x7a, 0xe5, 0x8f, 0x87, 0xf5, 0x4d, 0xd7, 0xa3,
	0x91, 0x54, 0x1b, 0xfb, 0x7a, 0x22, 0x28, 0xfe, 0xd9, 0x21, 0x4e, 0x4b, 0xa7, 0xdf, 0x76, 0x10,
	0xd1, 0x4e, 0x02, 0x6a, 0x8e, 0xf5, 0xa5, 0xae, 0xc1, 0x6a, 0x4e, 0xa2, 0x89, 0x48, 0x07, 0x07,
	0x04, 0xa9, 0xbf, 0x0c, 0xcb, 0x3f, 0xa1, 0xc8, 0x2f, 0x90, 0xaf, 0x00, 0xb4, 0xb1, 0xdd, 0x3a,
	0x43, 0x36, 0x0e, 0x1c, 0xa6, 0x7c, 0xc1, 0xcc, 0x58, 0xc4, 0x2f, 0xa1, 0xde, 0xc1, 0xb7, 0x28,
	0x8c, 0xd9, 0x4d, 0x8b, 0x22, 0xa6, 0x7a, 0xbc, 0x8e, 0xb4, 0x7e, 0x83, 0x87, 0x2e, 0xf5, 0xda,
	0x44, 0x3b, 0x46, 0xb6, 0x99, 0x77, 0x23, 0xbe, 0x82, 0x45, 0x14, 0x58, 0xcd, 0x36, 0x62, 0x89,
	0x59, 0x32, 0x93, 0xb7, 0x9c, 0xb4, 0x28, 0x7c, 0x2e, 0xad, 0x3f, 0x07, 0x2f, 0xe2, 0xff, 0x06,
	0xf9, 0x9e, 0x49, 0x69, 0xb7, 0xe1, 0x45, 0xc8, 0x3c, 0x66, 0xa0, 0x4c, 0xa6, 0x39, 0x62, 0x17,
	0xbf, 0x86, 0xb7, 0xe8, 0x8c, 0x6a, 0x3b, 0xea, 0x28, 0xca, 0x77, 0xcc, 0x78, 0x8a, 0xc2, 0xa4,
	0x28, 0xd5, 0x7f, 0xe5, 0x3b, 0xef, 0x26, 0x6a, 0x5f, 0x42, 0xad, 0x90, 0x9e, 0x7b, 0x3e, 0x22,
	0xd4, 0xf2, 0x3b, 0xd2, 0x22, 0xab, 0x76, 0xce, 0xaa, 0xca, 0x20, 0xe5, 0x73, 0xcc, 0x0b, 0xf0,
	0x93, 0x00, 0x4b, 0x06, 0x71, 0x59, 0x65, 0x0a, 0x12, 0xff, 0x0d, 0xc0, 0x20, 0xc3, 0x2c, 0xe7,
	0xb5, 0xbd, 0x35, 0x2d, 0x0e, 0x53, 0x8b, 0xb6, 0xad, 0x96, 0x6c, 0x5b, 0xed, 0x08, 0x7b, 0xc1,
	0xa1, 0x9e, 0x48, 0xdb, 0x2a, 0x21, 0x2d, 0x5a, 0x60, 0x66, 0xbc, 0x27, 0xb2, 0xe2, 0x46, 0x39,
	0x09, 0x1c, 0xd4, 0x4b, 0x77, 0xe5, 0xb0, 0x55, 0x15, 0x59, 0xeb, 0xb0, 0xc8, 0xb9, 0x9c, 0xef,
	0x05, 0x78, 0x6e, 0x10, 0xf7, 0xa8, 0x6d, 0x79, 0x7e, 0xac, 0x76, 0x56, 0xdd, 0x44, 0x62, 0x1e,
	0x1b, 0x87, 0x4e, 0x36, 0xa8, 0x11, 0xbb, 0x2a, 0xc1, 0xab, 0xe1, 0x08, 0x78, 0x70, 0xbf, 0x0a,
	0x50, 0x33, 0x88, 0x7b, 0xe1, 0xd1, 0x6b, 0x27, 0xb4, 0x6e, 0xff, 0x27, 0xe9, 0x9e, 0x46, 0xdb,
	0x4b, 0x78, 0x3b, 0x23, 0x80, 0x0b, 0xfb, 0x51, 0x80, 0x97, 0x06, 0x71, 0x4f, 0x43, 0x7c, 0xe3,
	0x39, 0xc8, 0x1c, 0xec, 0xaf, 0x02, 0x89, 0x97, 0x50, 0xa5, 0xff, 0x91, 0xba, 0xd8, 0xb1, 0xba,
	0x0e, 0xef, 0x8e, 0x0d, 0x8a, 0x87, 0xfd, 0xb7, 0x00, 0xa2, 0x41, 0xdc, 0x2f, 0x3a, 0x8e, 0x45,
	0xd1, 0xeb, 0x3b, 0x59, 0xde, 0x01, 0x79, 0x54, 0x25, 0x4f, 0xc2, 0x6f, 0x23, 0x49, 0x98, 0x30,
	0x5f, 0x56, 0xa0, 0xea, 0xb1, 0x26, 0x99, 0x63, 0x8a, 0xe2, 0x97, 0xdc, 0xd4, 0x99, 0x2f, 0x33,
	0x75, 0x16, 0x66, 0x3d, 0x75, 0xaa, 0x43, 0x53, 0x67, 0x44, 0xf6, 0xd0, 0xe0, 0xf9, 0x9c, 0x9d,
	0x13, 0xfc, 0x4c, 0x44, 0x61, 0x81, 0xe2, 0x0d, 0xa8, 0x75, 0x09, 0x0a, 0x0f, 0x1c, 0x27, 0x44,
	0x84, 0x24, 0x25, 0xcf, 0x9a, 0x92, 0x3d, 0x9f, 0xf1, 0xc6, 0x79, 0x3e, 0x83, 0x65, 0x83, 0xb8,
	0xa6, 0x3f, 0x13, 0x9a, 0x55, 0xb6, 0xcd, 0x06, 0xce, 0x52, 0x96, 0xbd, 0x9f, 0x9f, 0xc1, 0xbc,
	0x41, 0x5c, 0xb1, 0x0d, 0x6f, 0x0e, 0x5d, 0x92, 0xde, 0xd7, 0x9e, 0xba, 0x89, 0x69, 0xb9, 0xcb,
	0x86, 0xbc, 0x5b, 0x1a, 0x9a, 0xb2, 0x66, 0xd9, 0x58, 0xcf, 0x94, 0x63, 0x8b, 0xa0, 0x25, 0xd9,
	0xb2, 0x15, 0x13, 0x31, 0x2c, 0x0f, 0x5f, 0x13, 0xb6, 0x27, 0xf9, 0x18, 0x60, 0xe5, 0xbd, 0xf2,
	0x58, 0x4e, 0x78, 0x01, 0xd5, 0x78, 0x2c, 0xaa, 0x85, 0x8b, 0x19, 0x46, 0xde, 0x9e, 0x8c, 0xe1,
	0x8e, 0x3d, 0xa8, 0x65, 0x07, 0x54, 0xa3, 0x70, 0x69, 0x06, 0x29, 0x7f, 0x54, 0x16, 0xc9, 0xa9,
	0x2e, 0x61, 0x89, 0x8f, 0x9b, 0xf7, 0x0a, 0x57, 0xa7, 0x30, 0x79, 0xa7, 0x14, 0x8c, 0x33, 0x7c,
	0x07, 0xe2, 0x98, 0x73, 0x5f, 0x2f, 0x74, 0x32, 0xba, 0x40, 0xfe, 0x64, 0xca, 0x05, 0x9c, 0xbf,
	0x0b, 0xf5, 0xfc, 0x01, 0xfe, 0x61, 0xa1, 0xaf, 0x1c, 0x5a, 0xde, 0x9f, 0x06, 0xfd, 0x04, 0x2d,
	0x6b, 0xff, 0xd2, 0xb4, 0x6c, 0x07, 0xec, 0x4f, 0x83, 0xce, 0xb6, 0x4e, 0xf6, 0xcc, 0x6a, 0x94,
	0x6b, 0x6b, 0x14, 0x4e, 0x68, 0x9d, 0x31, 0x27, 0x97, 0x78, 0x05, 0x90, 0x39, 0xb6, 0xb6, 0x0a,
	0xd7, 0x0f, 0x80, 0xb2, 0x5e, 0x12, 0x98, 0xf2, 0x1c, 0x7e, 0x7a, 0xd7, 0x57, 0x84, 0xfb, 0xbe,
	0x22, 0xfc, 0xd9, 0x57, 0x84, 0x1f, 0x1e, 0x95, 0xca, 0xfd, 0xa3, 0x52, 0xf9, 0xfd, 0x51, 0xa9,
	0x7c, 0xf5, 0x41, 0xe1, 0x48, 0xe8, 0xe9, 0xe9, 0x67, 0x67, 0x34, 0xff, 0x9a, 0x8b, 0xec, 0x53,
	0xf1, 0xe3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xde, 0x83, 0x25, 0xe7, 0x8d, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddStakePool(ctx context.Context, in *MsgAddStakePool, opts ...grpc.CallOption) (*MsgAddStakePoolResponse, error)
	AddStakeItem(ctx context.Context, in *MsgAddStakeItem, opts ...grpc.CallOption) (*MsgAddStakeItemResponse, error)
	AddRewardPool(ctx context.Context, in *MsgAddRewardPool, opts ...grpc.CallOption) (*MsgAddRewardPoolResponse, error)
	Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error)
	ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	ProvideRewardToken(ctx context.Context, in *MsgProvideRewardToken, opts ...grpc.CallOption) (*MsgProvideRewardTokenResponse, error)
	UpdateStakePool(ctx context.Context, in *MsgUpdateStakePool, opts ...grpc.CallOption) (*MsgUpdateStakePoolResponse, error)
	UpdateStakeItem(ctx context.Context, in *MsgUpdateStakeItem, opts ...grpc.CallOption) (*MsgUpdateStakeItemResponse, error)
	AddRewarder(ctx context.Context, in *MsgAddRewarder, opts ...grpc.CallOption) (*MsgAddRewarderResponse, error)
	RmRewarder(ctx context.Context, in *MsgRmRewarder, opts ...grpc.CallOption) (*MsgRmRewarderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddStakePool(ctx context.Context, in *MsgAddStakePool, opts ...grpc.CallOption) (*MsgAddStakePoolResponse, error) {
	out := new(MsgAddStakePoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddStakePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddStakeItem(ctx context.Context, in *MsgAddStakeItem, opts ...grpc.CallOption) (*MsgAddStakeItemResponse, error) {
	out := new(MsgAddStakeItemResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddStakeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewardPool(ctx context.Context, in *MsgAddRewardPool, opts ...grpc.CallOption) (*MsgAddRewardPoolResponse, error) {
	out := new(MsgAddRewardPoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddRewardPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error) {
	out := new(MsgStakeResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimReward(ctx context.Context, in *MsgClaimReward, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error) {
	out := new(MsgClaimRewardResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProvideRewardToken(ctx context.Context, in *MsgProvideRewardToken, opts ...grpc.CallOption) (*MsgProvideRewardTokenResponse, error) {
	out := new(MsgProvideRewardTokenResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/ProvideRewardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakePool(ctx context.Context, in *MsgUpdateStakePool, opts ...grpc.CallOption) (*MsgUpdateStakePoolResponse, error) {
	out := new(MsgUpdateStakePoolResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/UpdateStakePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakeItem(ctx context.Context, in *MsgUpdateStakeItem, opts ...grpc.CallOption) (*MsgUpdateStakeItemResponse, error) {
	out := new(MsgUpdateStakeItemResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/UpdateStakeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRewarder(ctx context.Context, in *MsgAddRewarder, opts ...grpc.CallOption) (*MsgAddRewarderResponse, error) {
	out := new(MsgAddRewarderResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/AddRewarder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RmRewarder(ctx context.Context, in *MsgRmRewarder, opts ...grpc.CallOption) (*MsgRmRewarderResponse, error) {
	out := new(MsgRmRewarderResponse)
	err := c.cc.Invoke(ctx, "/stafihub.stafihub.mining.Msg/RmRewarder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddStakePool(context.Context, *MsgAddStakePool) (*MsgAddStakePoolResponse, error)
	AddStakeItem(context.Context, *MsgAddStakeItem) (*MsgAddStakeItemResponse, error)
	AddRewardPool(context.Context, *MsgAddRewardPool) (*MsgAddRewardPoolResponse, error)
	Stake(context.Context, *MsgStake) (*MsgStakeResponse, error)
	ClaimReward(context.Context, *MsgClaimReward) (*MsgClaimRewardResponse, error)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	ProvideRewardToken(context.Context, *MsgProvideRewardToken) (*MsgProvideRewardTokenResponse, error)
	UpdateStakePool(context.Context, *MsgUpdateStakePool) (*MsgUpdateStakePoolResponse, error)
	UpdateStakeItem(context.Context, *MsgUpdateStakeItem) (*MsgUpdateStakeItemResponse, error)
	AddRewarder(context.Context, *MsgAddRewarder) (*MsgAddRewarderResponse, error)
	RmRewarder(context.Context, *MsgRmRewarder) (*MsgRmRewarderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddStakePool(ctx context.Context, req *MsgAddStakePool) (*MsgAddStakePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStakePool not implemented")
}
func (*UnimplementedMsgServer) AddStakeItem(ctx context.Context, req *MsgAddStakeItem) (*MsgAddStakeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStakeItem not implemented")
}
func (*UnimplementedMsgServer) AddRewardPool(ctx context.Context, req *MsgAddRewardPool) (*MsgAddRewardPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewardPool not implemented")
}
func (*UnimplementedMsgServer) Stake(ctx context.Context, req *MsgStake) (*MsgStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedMsgServer) ClaimReward(ctx context.Context, req *MsgClaimReward) (*MsgClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) ProvideRewardToken(ctx context.Context, req *MsgProvideRewardToken) (*MsgProvideRewardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideRewardToken not implemented")
}
func (*UnimplementedMsgServer) UpdateStakePool(ctx context.Context, req *MsgUpdateStakePool) (*MsgUpdateStakePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakePool not implemented")
}
func (*UnimplementedMsgServer) UpdateStakeItem(ctx context.Context, req *MsgUpdateStakeItem) (*MsgUpdateStakeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakeItem not implemented")
}
func (*UnimplementedMsgServer) AddRewarder(ctx context.Context, req *MsgAddRewarder) (*MsgAddRewarderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRewarder not implemented")
}
func (*UnimplementedMsgServer) RmRewarder(ctx context.Context, req *MsgRmRewarder) (*MsgRmRewarderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmRewarder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddStakePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStakePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStakePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddStakePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStakePool(ctx, req.(*MsgAddStakePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddStakeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStakeItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStakeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddStakeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStakeItem(ctx, req.(*MsgAddStakeItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewardPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewardPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewardPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddRewardPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewardPool(ctx, req.(*MsgAddRewardPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Stake(ctx, req.(*MsgStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimReward(ctx, req.(*MsgClaimReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProvideRewardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvideRewardToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProvideRewardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/ProvideRewardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProvideRewardToken(ctx, req.(*MsgProvideRewardToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/UpdateStakePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakePool(ctx, req.(*MsgUpdateStakePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakeItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/UpdateStakeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakeItem(ctx, req.(*MsgUpdateStakeItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRewarder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRewarder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRewarder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/AddRewarder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRewarder(ctx, req.(*MsgAddRewarder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RmRewarder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRmRewarder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RmRewarder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stafihub.stafihub.mining.Msg/RmRewarder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RmRewarder(ctx, req.(*MsgRmRewarder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stafihub.stafihub.mining.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStakePool",
			Handler:    _Msg_AddStakePool_Handler,
		},
		{
			MethodName: "AddStakeItem",
			Handler:    _Msg_AddStakeItem_Handler,
		},
		{
			MethodName: "AddRewardPool",
			Handler:    _Msg_AddRewardPool_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Msg_Stake_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _Msg_ClaimReward_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "ProvideRewardToken",
			Handler:    _Msg_ProvideRewardToken_Handler,
		},
		{
			MethodName: "UpdateStakePool",
			Handler:    _Msg_UpdateStakePool_Handler,
		},
		{
			MethodName: "UpdateStakeItem",
			Handler:    _Msg_UpdateStakeItem_Handler,
		},
		{
			MethodName: "AddRewarder",
			Handler:    _Msg_AddRewarder_Handler,
		},
		{
			MethodName: "RmRewarder",
			Handler:    _Msg_RmRewarder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mining/tx.proto",
}

func (m *MsgAddStakePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinTotalRewardAmount.Size()
		i -= size
		if _, err := m.MinTotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MaxRewardPools != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxRewardPools))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStakePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddStakeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LockSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStakeItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStakeItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStakeItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.RewardPerSecond.Size()
		i -= size
		if _, err := m.RewardPerSecond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalRewardAmount.Size()
		i -= size
		if _, err := m.TotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardTokenDenom) > 0 {
		i -= len(m.RewardTokenDenom)
		copy(dAtA[i:], m.RewardTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardTokenDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewardPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewardPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewardPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeItemIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeItemIndex))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.StakeToken.Size()
		i -= size
		if _, err := m.StakeToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRecordIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakeRecordIndex))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.StakeToken.Size()
		i -= size
		if _, err := m.StakeToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProvideRewardToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideRewardToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideRewardToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Token.Size()
		i -= size
		if _, err := m.Token.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProvideRewardTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvideRewardTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvideRewardTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinTotalRewardAmount.Size()
		i -= size
		if _, err := m.MinTotalRewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MaxRewardPools != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxRewardPools))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StakeTokenDenom) > 0 {
		i -= len(m.StakeTokenDenom)
		copy(dAtA[i:], m.StakeTokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakeTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.PowerRewardRate.Size()
		i -= size
		if _, err := m.PowerRewardRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LockSecond != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakeItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakeItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakeItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRewarder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewarder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewarder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRewarderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRewarderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRewarderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRmRewarder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRmRewarder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRmRewarder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRmRewarderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRmRewarderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRmRewarderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddStakePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxRewardPools != 0 {
		n += 1 + sovTx(uint64(m.MaxRewardPools))
	}
	l = m.MinTotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddStakePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddStakeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LockSecond != 0 {
		n += 1 + sovTx(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Enable {
		n += 2
	}
	return n
}

func (m *MsgAddStakeItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RewardPerSecond.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StartTimestamp != 0 {
		n += 1 + sovTx(uint64(m.StartTimestamp))
	}
	return n
}

func (m *MsgAddRewardPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.StakeToken.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StakeItemIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeItemIndex))
	}
	return n
}

func (m *MsgStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakeRecordIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *MsgClaimRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.StakeToken.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.StakeRecordIndex != 0 {
		n += 1 + sovTx(uint64(m.StakeRecordIndex))
	}
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProvideRewardToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgProvideRewardTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStakePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakeTokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxRewardPools != 0 {
		n += 1 + sovTx(uint64(m.MaxRewardPools))
	}
	l = m.MinTotalRewardAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateStakePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStakeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTx(uint64(m.Index))
	}
	if m.LockSecond != 0 {
		n += 1 + sovTx(uint64(m.LockSecond))
	}
	l = m.PowerRewardRate.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Enable {
		n += 2
	}
	return n
}

func (m *MsgUpdateStakeItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRewarder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddRewarderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRmRewarder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRmRewarderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddStakePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardPools", wireType)
			}
			m.MaxRewardPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRewardPools |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStakeItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStakeItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStakeItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerSecond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewardPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewardPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewardPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeItemIndex", wireType)
			}
			m.StakeItemIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeItemIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRecordIndex", wireType)
			}
			m.StakeRecordIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeRecordIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvideRewardToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideRewardToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideRewardToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvideRewardTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvideRewardTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvideRewardTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardPools", wireType)
			}
			m.MaxRewardPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRewardPools |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalRewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTotalRewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSecond", wireType)
			}
			m.LockSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerRewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerRewardRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakeItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakeItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakeItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewarder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewarder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewarder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRewarderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRewarderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRewarderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRmRewarder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRmRewarder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRmRewarder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRmRewarderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRmRewarderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRmRewarderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
