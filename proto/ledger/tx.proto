syntax = "proto3";
package stafihub.stafihub.ledger;

import "gogoproto/gogo.proto";
import "ledger/ledger.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/stafihub/stafihub/x/ledger/types";

// Msg defines the Msg service.
service Msg {
  rpc AddNewPool(MsgAddNewPool) returns (MsgAddNewPoolResponse);
  rpc RemovePool(MsgRemovePool) returns (MsgRemovePoolResponse);
  rpc SetEraUnbondLimit(MsgSetEraUnbondLimit) returns (MsgSetEraUnbondLimitResponse);
  rpc SetInitBond(MsgSetInitBond) returns (MsgSetInitBondResponse);
  rpc SetChainBondingDuration(MsgSetChainBondingDuration) returns (MsgSetChainBondingDurationResponse);
  rpc SetPoolDetail(MsgSetPoolDetail) returns (MsgSetPoolDetailResponse);
  rpc SetLeastBond(MsgSetLeastBond) returns (MsgSetLeastBondResponse);
  rpc ClearCurrentEraSnapShots(MsgClearCurrentEraSnapShots) returns (MsgClearCurrentEraSnapShotsResponse);
  rpc SetCommission(MsgSetCommission) returns (MsgSetCommissionResponse);
  rpc SetReceiver(MsgSetReceiver) returns (MsgSetReceiverResponse);
  rpc SetUnbondFee(MsgSetUnbondFee) returns (MsgSetUnbondFeeResponse);
  rpc LiquidityUnbond(MsgLiquidityUnbond) returns (MsgLiquidityUnbondResponse);
  rpc SetUnbondCommission(MsgSetUnbondCommission) returns (MsgSetUnbondCommissionResponse);
  rpc SubmitSignature(MsgSubmitSignature) returns (MsgSubmitSignatureResponse);
  rpc SetRParams(MsgSetRParams) returns (MsgSetRParamsResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgAddNewPool {
  string creator = 1;
  string denom = 2;
  string addr = 3;
}

message MsgAddNewPoolResponse {
}

message MsgRemovePool {
  string creator = 1;
  string denom = 2;
  string addr = 3;
}

message MsgRemovePoolResponse {
}

message MsgSetEraUnbondLimit {
  string creator = 1;
  string denom = 2;
  uint32 limit = 3;
}

message MsgSetEraUnbondLimitResponse {
}

message MsgSetInitBond {
  string creator = 1;
  string pool = 2;
  string coin = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  string receiver = 4;
}

message MsgSetInitBondResponse {
}

message MsgSetChainBondingDuration {
  string creator = 1;
  string denom = 2;
  uint32 era = 3;
}

message MsgSetChainBondingDurationResponse {
}

message MsgSetPoolDetail {
  string creator = 1;
  string denom = 2;
  string pool = 3;
  repeated string subAccounts = 4;
  uint32 threshold = 5;
}

message MsgSetPoolDetailResponse {
}

message MsgSetLeastBond {
  string creator = 1;
  string denom = 2;
  string amount = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

message MsgSetLeastBondResponse {
}

message MsgClearCurrentEraSnapShots {
  string creator = 1;
  string denom = 2;
}

message MsgClearCurrentEraSnapShotsResponse {
}

message MsgSetCommission {
  string creator = 1;
  string commission = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message MsgSetCommissionResponse {
}

message MsgSetReceiver {
  string creator = 1;
  string receiver = 2;
}

message MsgSetReceiverResponse {
}

message MsgSetUnbondFee {
  string creator = 1;
  string denom = 2;
  string value = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
}

message MsgSetUnbondFeeResponse {
}

message MsgLiquidityUnbond {
  string creator = 1;
  string pool = 2;
  string value = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  string recipient = 4;
}

message MsgLiquidityUnbondResponse {
}

message MsgSetUnbondCommission {
  string creator = 1;
  string commission = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message MsgSetUnbondCommissionResponse {
}

message MsgSubmitSignature {
  string creator = 1;
  string denom = 2;
  uint32 era = 3;
  string pool = 4;
  OriginalTxType txType = 5;
  string propId = 6;
  string signature = 7;
}

message MsgSubmitSignatureResponse {
}

message MsgSetRParams {
  string creator = 1;
  string denom = 2;
  string chainId = 3;
  string nativeDenom = 4;
  string gasPrice = 5;
  string eraSeconds = 6;
  repeated string validators = 7;
}

message MsgSetRParamsResponse {
}

// this line is used by starport scaffolding # proto/tx/message